"use strict";(self.webpackChunkscrollytelling_template=self.webpackChunkscrollytelling_template||[]).push([[179],{5642:(t,e,n)=>{n(9554),n(1539),n(2222),n(1038),n(8783),n(6992),n(8674),n(3948),n(9753),n(2526),n(1817),n(2165),n(7042),n(8309),n(4916);var r=n(9438),a=(n(5666),n(189),n(1249),n(9884)),o=(n(7327),n(7941),n(6158)),i=n(9947),c=n(2895);function l(t){a.gyn("./data/collisions_routieres_locations.csv").then((function(e){for(var n={},r=0,a=0;a<e.length;++a){var l=e[a].LOC_LAT,s=e[a].LOC_LONG,f=i.geoToH3(l,s,8);n[f]=null!=n[f]?n[f]+1:0,r=Math.max(r,n[f])}o.accessToken="pk.eyJ1IjoiYWtvZGEiLCJhIjoiY2wyMnZ0MHowMWsyZTNrbzV4eWlybmlmaCJ9.ID6Bhabq_oe8crICSXGhgA";var d=new o.Map({container:t,style:"mapbox://styles/mapbox/light-v10",center:[-73.7141,45.5388],zoom:10,interactive:!1});d.on("load",(function(){!function(t,e,n,r){var a=c.h3SetToFeatureCollection(Object.keys(e).filter((function(t){return e[t]>0})),(function(t){return{value:e[t]}})),o="h3-hexes",i="".concat(o,"-layer"),l=t.getSource(o);l||(t.addSource(o,{type:"geojson",data:a}),t.addLayer({id:i,source:o,type:"fill",interactive:!1,paint:{"fill-outline-color":"rgba(0,0,0,0)"}}),l=t.getSource(o)),l.setData(a),t.setPaintProperty(i,"fill-color",{property:"value",stops:[[10,u[0]],[100,u[1]],[1e3,u[2]]]}),t.setPaintProperty(i,"fill-opacity",.4)}(d,n)}))}))}var u=["#ffff00","#ffc400","#a60000"];n(3710),n(9600);var s=n(7308);function f(t,e){return a.Xf().domain(a.Wem(t)).range([0,e])}function d(t,e,n){return a.BYU().domain([t,e]).range([n,0])}function p(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2e3,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"yAxisLineChart";a.Ys("#"+n).transition().delay(e).call(a.y4O(t))}function h(t,e){return[t=t.map((function(t){return{date:a.Z1g("%Y-%m-%d")(t.Date),value:+t.Nombres}})),(e=e.map((function(t){return{date:a.Z1g("%Y-%m-%d")(t.Date),type:t.Types,value:+t.Nombres}}))).filter((function(t){return"SANS_CAMION"===t.type})),e.filter((function(t){return"CAMION"===t.type}))]}function y(t,e,n,r,o,i){!function(t,e,n){t.append("g").attr("id","xAxisLineChart").attr("transform","translate(0,"+n+")").call(a.LLu(e).tickSizeOuter(0))}(t,e,o),function(t,e){t.append("g").attr("id","yAxisLineChart").call(a.y4O().scale(e))}(t,n),function(t){a.Ys("#yAxisLineChart").append("text").attr("x",4.5*-t.left).attr("y",-t.left/2).attr("font-size","1.5em").attr("fill","currentColor").attr("text-anchor","start").attr("transform","rotate(-90)").text("Nombre d'accidents par jour (moyenne roulante 7 jours)")}(i),function(t,e){a.Ys("#xAxisLineChart").append("text").attr("x",t/1.7).attr("y",e.bottom/1.5).attr("font-size","1.5em").attr("fill","currentColor").attr("text-anchor","end").text("Date du rapport de l'accident")}(r,i)}function g(t,e,n,r,a){var o=[];switch(a){case"annotation1":o=[{note:{label:"Vision Zéro"},subject:{y1:n.top,y2:e(0)},y:n.top,data:{x:"2016-09-01"}},{note:{label:"Début couvre-feu"},subject:{y1:n.top,y2:e(0)},y:n.top,data:{x:"2020-03-14"}}];break;case"annotation2":o=[{note:{title:"Tendance à la hausse"},connector:{end:"arrow"},subject:{height:r.height-n.top-n.bottom,width:t(new Date("2020-03-14"))-t(new Date("2016-01-01"))},type:s.RA,x:t(new Date("2016-01-01")),y:n.top,disable:["connector"]}]}return o}function m(t,e,n,r){var a=s.Bv(s.dF,{note:{lineType:"none",orientation:"top",align:"middle"}}),o=s.dQ().type(a).accessors({x:function(t){return e(new Date(t.x))},y:function(t){return n(t.y)}}).annotations(r).textWrap(30);return t.append("g").attr("class","annotation-group").call(o)}function v(t,e,n,r,a){var o=g(e,n,a.margin,a,"annotation1"),i=g(e,r,a.margin,a,"annotation2"),c=m(t,e,n,o),l=m(t,e,r,i);return c.style("opacity",0),l.style("opacity",0),[c,l]}function w(t,e,n,r,o){return r.append("g").selectAll(".lines").data([t]).join("path").attr("class","lines").attr("d",a.jvg().x((function(t){return e(t.date)})).y((function(t){return n(t.value)}))).attr("fill","none").attr("stroke",o).attr("stroke-width",2.5).style("opacity",0)}function b(t,e){console.log("drawing all vehicule"),t.transition().style("opacity",0),e.style("opacity",0)}function A(t,e,n,r){e.transition().style("opacity",0),n.transition().style("opacity",0),t.transition().delay(200).style("opacity",1),r.style("opacity",1)}function x(t,e,n,r,a,o,i){p(i,0),o.transition().style("opacity",0),a.transition().style("opacity",0),t.transition().delay(500).style("opacity",0),r.style("opacity",0),e.transition().delay(1e3).style("opacity",1),n.transition().delay(1e3).style("opacity",1)}function S(t,e,n,r,a){t.transition().delay(1e3).style("opacity",0),e.transition().delay(1e3).style("opacity",0),p(n,2e3),r.transition().delay(3e3).style("opacity",1),a.transition().delay(3e3).style("opacity",1)}n(1532),n(1058),n(6699),n(4747),n(2023),n(9601);var k=n(358),E=n(6417),_=n(1928);function O(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return C(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?C(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,a=function(){};return{s:a,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,c=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return i=t.done,t},e:function(t){c=!0,o=t},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw o}}}}function C(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function I(t,e,n,r,a,o,i){try{var c=t[o](i),l=c.value}catch(t){return void n(t)}c.done?e(l):Promise.resolve(l).then(r,a)}function Y(t){return function(){var e=this,n=arguments;return new Promise((function(r,a){var o=t.apply(e,n);function i(t){I(o,r,a,i,c,"next",t)}function c(t){I(o,r,a,i,c,"throw",t)}i(void 0)}))}}var M="whitesmoke",L="#940d45";function N(t){return T.apply(this,arguments)}function T(){return T=Y(regeneratorRuntime.mark((function t(e){var n,r=arguments;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=r.length>1&&void 0!==r[1]?r[1]:"#940d45",L=n,t.next=4,a.gyn(e).then((function(t){return t.filter((function(t){return"Grave ou Mortel"===t.Gravite}))}));case 4:return t.abrupt("return",t.sent);case 5:case"end":return t.stop()}}),t)}))),T.apply(this,arguments)}function j(t,e,n,r,a){return B.apply(this,arguments)}function B(){return(B=Y(regeneratorRuntime.mark((function t(e,n,r,a,o){var i,c,l,u,s,f,d,p;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return console.log("draw"),i={width:r-a.right-a.left,height:n-a.bottom-a.top},c=(0,k.Z)().attr("class","d3-tip").html((function(t){return H(t)})),e.call(c),(l=Object.keys(o[0])).pop(),u=P(l,o),s=(0,E.Z)().nodeSort(null).linkSort(null).nodeWidth(20).nodePadding(20).extent([[0,5],[i.width,i.height]]),f=s({nodes:u.nodes.map((function(t){return Object.assign({},t)})),links:u.links.map((function(t){return Object.assign({},t)}))}),d=f.nodes,p=f.links,R(e,o,d,c,i.height),U(e,p,M,c),D(e,i.width),Z(e,L,M),t.abrupt("return",e);case 14:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function z(t,e,n){L=n;var r=t.selectAll(".graph-node").data();V(t,e>=0?r[e]:null,L,M)}function P(t,e){var n,r=-1,a=[],o=new Map,i=new Map,c=[],l=O(t);try{for(l.s();!(n=l.n()).done;){var u,s=n.value,f=O(e);try{for(f.s();!(u=f.n()).done;){var d=u.value,p=JSON.stringify([s,d[s]]);if(!o.has(p)){var h={name:d[s]};a.push(h),o.set(p,h),i.set(p,++r)}}}catch(t){f.e(t)}finally{f.f()}}}catch(t){l.e(t)}finally{l.f()}for(var y=1;y<t.length;++y){var g,m=t[y-1],v=t[y],w=t.slice(0,y+1),b=new Map,A=O(e);try{var x=function(){var t=g.value,e=w.map((function(e){return t[e]})),n=JSON.stringify(e),r=parseInt(t.count)||1,a=b.get(n);if(a)return a.value+=r,"continue";a={source:i.get(JSON.stringify([m,t[m]])),target:i.get(JSON.stringify([v,t[v]])),names:e,value:r},c.push(a),b.set(n,a)};for(A.s();!(g=A.n()).done;)x()}catch(t){A.e(t)}finally{A.f()}}return{nodes:a,links:c}}function R(t,e,n,r,o){var i=a.Smz(e,(function(t){return t.count}));console.log("count : ",i),console.log("height : ",o),t.selectAll(".graph-node").data(n).enter().append("g").attr("class","graph-node").append("rect").attr("x",(function(t){return t.x0})).attr("y",(function(t){return t.y0})).attr("height",(function(t){return t.y1-t.y0})).attr("width",(function(t){return t.x1-t.x0})).attr("fill","black").on("mouseover",r.show).on("mouseout",r.hide)}function U(t,e,n,r){t.selectAll(".graph-line").data(e).enter().append("g").attr("fill","none").attr("class","graph-line").append("path").attr("d",(0,_.Z)()).attr("stroke",(function(t){return n})).attr("stroke-width",(function(t){return t.width})).style("mix-blend-mode","multiply").on("mouseover",r.show).on("mouseout",r.hide)}function D(t,e){t.selectAll(".info").remove(),t.selectAll(".graph-node").style("font","20px sans-serif bolder").append("text").attr("class","info").attr("x",(function(t){return t.x0<e/2?t.x1+6:t.x0-6})).attr("y",(function(t){return(t.y1+t.y0)/2})).attr("dy","0.35em").attr("text-anchor",(function(t){return t.x0<e/2?"start":"end"})).text((function(t){return t.name})).append("tspan").attr("class","info").attr("fill-opacity",.7)}function H(t){return"<span id='tooltip-title'>"+a.Ys(t.target).data()[0].value+"</span>"}function Z(t,e,n){var r=t.selectAll(".graph-node");console.log("values : ",r),r.on("click",(function(r){var o=a.Ys(r.target).data();V(t,o[0],e,n)}))}function V(t,e,n,r){var a=[];null!=e&&(q(a,e.sourceLinks),G(a,e.targetLinks)),t.selectAll(".graph-line").select("path").attr("stroke",(function(t){return a.includes(t.index)?n:r}))}function q(t,e){console.log("sources",e),e.forEach((function(e){t.includes(e.index)||t.push(e.index),q(t,e.target.sourceLinks)}))}function G(t,e){console.log("targets",e),e.forEach((function(e){t.includes(e.index)||t.push(e.index),G(t,e.source.targetLinks)}))}function J(t,e,n,r){var o,i;!function(t,e){t.append("g").attr("id","xAxisBar").attr("transform","translate(0,"+e+")")}(t,n.height),function(t){t.append("g").attr("id","yAxisBar")}(t),o=n.width,i=a.tiA().domain(["Camion","Sans camion"]).range([0,o]).padding([.2]),a.Ys("#xAxisBar").call(a.LLu(i).tickSize(0)),t.append("g").attr("id","rect1"),t.append("g").attr("id","rect2"),function(t,e,n,r){var o=e.columns.slice(1),i=(a.BYU().domain([0,100]).range([0,-n.height]),a.tiA().domain(["CAMION","SANS_CAMION"]).range([0,n.width]).padding([.2])),c=a.knu().keys(o)(e);a.Ys("#rect1").selectAll("g").data(c).enter().append("g").attr("transform","translate(0,"+n.height+")").attr("fill",(function(t){return r(t.key)})).selectAll("rect").data((function(t){return t})).enter().append("rect").attr("x",(function(t){return i(t.data.TYPE_VEHICULE)})).attr("width",i.bandwidth()).style("opacity",.9)}(0,e,n,r),function(t,e,n,r){var o=e.columns.slice(2),i=(a.BYU().domain([0,1]).range([n.height,0]),a.tiA().domain(["CAMION","SANS_CAMION"]).range([0,n.width]).padding([.2])),c=a.knu().keys(o)(e);a.Ys("#rect2").selectAll("g").data(c).enter().append("g").attr("fill",(function(t){return r(t.key)})).selectAll("rect").data((function(t){return t})).enter().append("rect").attr("x",(function(t){return i(t.data.TYPE_VEHICULE)})).attr("width",i.bandwidth()).style("opacity",.9)}(0,e,n,r)}function W(t,e,n,r){!function(t,e,n,r){var o=e.columns.slice(2),i=(a.BYU().domain([0,1]).range([n.height,0]),a.tiA().domain(["CAMION","SANS_CAMION"]).range([0,n.width]).padding([.2]));a.knu().keys(o)(e),a.Ys("#rect2").selectAll("rect").attr("x",(function(t){return i(t.data.TYPE_VEHICULE)})).attr("width",i.bandwidth()).style("opacity",0).transition().delay(500).attr("y",(function(t){return 0})).attr("height",(function(t){return 0}))}(0,e,n),function(t,e,n,r){var o=e.columns.slice(1),i=a.BYU().domain([0,100]).range([0,-n.height]),c=a.tiA().domain(["CAMION","SANS_CAMION"]).range([0,n.width]).padding([.2]);a.knu().keys(o)(e),a.Ys("#rect1").selectAll("rect").attr("x",(function(t){return c(t.data.TYPE_VEHICULE)})).attr("width",c.bandwidth()).style("opacity",1).transition().delay(0).attr("y",(function(t){return i(t[1])})).attr("height",(function(t){return i(t[0])-i(t[1])}))}(0,e,n)}function F(t,e,n,r){!function(t,e,n,r){var o=e.columns.slice(1),i=(a.BYU().domain([0,100]).range([0,-n.height]),a.tiA().domain(["CAMION","SANS_CAMION"]).range([0,n.width]).padding([.2]));a.knu().keys(o)(e),a.Ys("#rect1").selectAll("rect").attr("x",(function(t){return i(t.data.TYPE_VEHICULE)})).attr("width",i.bandwidth()).style("opacity",0).transition().delay(500).attr("y",(function(t){return 0})).attr("height",(function(t){return 0}))}(0,e,n),function(t,e,n,r){var o=e.columns.slice(2),i=a.BYU().domain([0,1]).range([n.height,0]),c=a.tiA().domain(["CAMION","SANS_CAMION"]).range([0,n.width]).padding([.2]);a.knu().keys(o)(e),a.Ys("#rect2").selectAll("rect").attr("x",(function(t){return c(t.data.TYPE_VEHICULE)})).attr("width",c.bandwidth()).style("opacity",1).transition().delay(0).attr("y",(function(t){return i(t[1])})).attr("height",(function(t){return i(t[0])-i(t[1])}))}(0,e,n)}function $(t,e){var n=t.node().getBBox().width,r=t.append("text").html(e).attr("class","graph-title");r.style("font-size","calc(12px + 0.6vw)").attr("x",(n-r.node().getBBox().width)/2).attr("y",-2*r.node().getBBox().height)}function X(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,a,o=[],i=!0,c=!1;try{for(n=n.call(t);!(i=(r=n.next()).done)&&(o.push(r.value),!e||o.length!==e);i=!0);}catch(t){c=!0,a=t}finally{try{i||null==n.return||n.return()}finally{if(c)throw a}}return o}}(t,e)||function(t,e){if(t){if("string"==typeof t)return K(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?K(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function K(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Q(t,e,n,r,a,o,i){try{var c=t[o](i),l=c.value}catch(t){return void n(t)}c.done?e(l):Promise.resolve(l).then(r,a)}function tt(t){return function(){var e=this,n=arguments;return new Promise((function(r,a){var o=t.apply(e,n);function i(t){Q(o,r,a,i,c,"next",t)}function c(t){Q(o,r,a,i,c,"throw",t)}i(void 0)}))}}var et={width:1e3,height:500,margin:{top:100,right:100,bottom:100,left:100}},nt=et.margin.left+et.width+et.margin.right,rt=et.margin.top+et.height+et.margin.bottom,at=a.Ys("#viz_line_chart").append("svg").attr("viewBox","0 0 ".concat(nt," ").concat(rt)).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate(".concat(et.margin.left,", ").concat(et.margin.top,")")),ot=a.Ys("#viz_bar_chart").append("svg").attr("viewBox","0 0 ".concat(nt," ").concat(rt)).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate(".concat(et.margin.left,", ").concat(et.margin.top,")")),it=a.Ys("#pset1").append("svg").attr("viewBox","0 0 ".concat(2e3," ",1400)).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate(".concat(et.margin.left,", ").concat(et.margin.top,")")),ct=a.Ys("#pset3").append("svg").attr("viewBox","0 0 ".concat(2e3," ",1400)).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate(".concat(et.margin.left,", ").concat(et.margin.top,")"));function lt(){return(lt=tt(regeneratorRuntime.mark((function t(){var e,n,r,o,i,c,u,s,p,g,m,k,E,_,O,C,I,Y,M,L,T,B,P,R,U,D,H,Z,V,q,G;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return G=function(){a.td_(".tick>text").style("font-size",q),a.td_("#xAxisBar>.tick>text").attr("dy","1em")},t.next=3,N("./data/pset_env_route_vit.csv","#2c4aad");case 3:return e=t.sent,j(it,1e3,2e3,et.margin,e),t.next=7,N("./data/pset_cond_ext.csv","#f68c1c");case 7:return n=t.sent,j(ct,1e3,2e3,et.margin,n),r="#2c4aad",o="#f68c1c",t.next=13,a.gyn("./data/rolling7_viz1_all_vehicule_date.csv");case 13:return i=t.sent,t.next=16,a.gyn("./data/rolling7_viz2_acc_by_type_date.csv");case 16:return c=t.sent,t.next=19,a.gyn("./data/stackbar_pourcentage.csv");case 19:return u=t.sent,s=a.PKp().domain(["LEGER_MATERIEL","GRAVE","MORTEL"]).range(["#ffb8b8","#ff4646","#9f0000"]),J(ot,u,et,s),$(ot,"Proportion d'accident léger, grave et mortel selon le type de véhicule."),l("map"),k=h(i,c),E=X(k,3),p=E[0],g=E[1],m=E[2],_=[a.Fp7(p,(function(t){return t.value})),a.Fp7(m,(function(t){return t.value}))],O=_[0],C=_[1],I=Array.from(new Set(p.map((function(t){return t.date})))),Y=[f(I,et.width),d(0,O,et.height),d(0,C,et.height)],T=Y[2],y(at,M=Y[0],L=Y[1],et.width,et.height,et.margin),B=w(p,M,L,at,"#000000"),P=w(g,M,L,at,"#656565"),R=w(m,M,L,at,"#2D0631AD"),U=w(m,M,T,at,"#2D0631AD"),D=v(at,M,L,T,et),H=X(D,2),Z=H[0],V=H[1],$(at,"Nombre d'accident par jour à Montréal selon les rapports de police."),q="calc(8px + 0.6vw)",t.abrupt("return",[[function(){},function(){}],[function(){W(0,u,et),G()},function(){F(0,u,et),G()}],[function(){b(B,Z),G()},function(){A(B,P,R,Z),G()},function(){x(B,P,R,Z,V,U,L),G()},function(){S(P,R,T,U,V),G()}],[function(){z(it,-1,r)},function(){z(it,2,r)},function(){z(it,3,r)},function(){z(it,3,r)}],[function(){z(ct,4,o)},function(){z(ct,1,o)}]]);case 42:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function ut(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function st(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n(9070),n(3161),n(9653);var ft=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.el=e,this.index=n,this.callback=r,this._isActivate=!1}var e,n;return e=t,(n=[{key:"activate",value:function(t){this._isActivate||(this._isActivate=!0,this.el.classList.add("active"),this.callback(t))}},{key:"deactivate",value:function(){this._isActivate&&(this._isActivate=!1,this.el.classList.remove("active"))}}])&&st(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function dt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var pt=[];[".viz",".full-page-section > img",".full-page-section > video"].forEach((function(t){pt=pt.concat(Array.from(document.querySelectorAll(t)))})),(0,r.Z)(pt,{stickyBitStickyOffset:40}),Promise.all([function(){return lt.apply(this,arguments)}()]).then((function(t){var e,n;(function(t){var e=0,n=0,r=window.innerHeight,a=!1,o=0,i=[],c=[],l=[],u=document.querySelector(".article-reminder"),s=document.querySelector("header > .progress"),f=document.querySelector(".intro-section h1"),d=document.querySelectorAll(".viz-section");if(console.log(t),console.log(t.length),d.length!==t.length)throw new Error("The number of viz sections (".concat(d.length,") mismatch with the length of the first ")+"dimension of the callbacks array (".concat(t.length,"). Please, be sure that the two elements ")+"have the same size.");d.forEach((function(e,n){var r,a=function(t){if(Array.isArray(t))return ut(t)}(r=e.querySelectorAll("section"))||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(r)||function(t,e){if(t){if("string"==typeof t)return ut(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ut(t,e):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();if(a.length!==t[n].length)throw new Error("The number of steps (".concat(a.length,") in the viz section #").concat(n+1," mismatch with the ")+"number of callbacks specified (".concat(t[n].length,') at the index "').concat(n,'". Please, be sure that the two ')+"elements have the same size.");i=i.concat(a.map((function(e,r){return new ft(e,"".concat(n,"-").concat(r),t[n][r])}))),c=c.concat(c,e.querySelector(".viz > *"))}));var p=function(){var t=window.pageYOffset||document.documentElement.scrollTop;i.forEach((function(t){var a=t.el.getBoundingClientRect();r-a.top-n>0&&a.top+a.height-e>0?l.push(t):t.deactivate()}));var a=f.getBoundingClientRect().bottom<=0,c=u.classList.contains("visible");a&&!c?u.classList.add("visible"):!a&&c&&u.classList.remove("visible"),l.forEach((function(e,n){t>=o?n===l.length-1?e.activate("down"):e.deactivate():0===n?e.activate("up"):e.deactivate()})),h(),l=[],o=t},h=function(){var t=(document.body.scrollTop||document.documentElement.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100;s.style.width=t+"%"},y={initialize:function(){if(a)throw new Error("The scroller is already initialized.");return a=!0,window.addEventListener("scroll",p),window.addEventListener("resize",(function(){r=window.innerHeight,h()})),(window.pageYOffset||document.documentElement.scrollTop)>0&&p(),h(),y},offsetTop:function(t){if(void 0===t)return e;if(!Number.isInteger(t))throw new Error("The offset must be an integer number.");return e=t,y},offsetBottom:function(t){if(void 0===t)return n;if(!Number.isInteger(t))throw new Error("The offset must be an integer number.");return n=t,y}};return y})((e=t,n=1,function(t){if(Array.isArray(t))return t}(e)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,a,o=[],i=!0,c=!1;try{for(n=n.call(t);!(i=(r=n.next()).done)&&(o.push(r.value),!e||o.length!==e);i=!0);}catch(t){c=!0,a=t}finally{try{i||null==n.return||n.return()}finally{if(c)throw a}}return o}}(e,n)||function(t,e){if(t){if("string"==typeof t)return dt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?dt(t,e):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0]).offsetTop(40).offsetBottom(0).initialize()}))}},t=>{var e=e=>t(t.s=e);t.O(0,[216],(()=>(e(8594),e(5666),e(5642)))),t.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,