"use strict";(self.webpackChunkscrollytelling_template=self.webpackChunkscrollytelling_template||[]).push([[179],{3476:(t,n,e)=>{e(9554),e(1539),e(2222),e(1038),e(8783),e(6992),e(8674),e(3948),e(9753),e(2526),e(1817),e(2165),e(7042),e(8309),e(4916);var r=e(9438),a=(e(5666),e(189),e(1249),e(4479)),i=(e(7327),e(7941),e(6158)),o=e(9947),c=e(2895);function l(t){a.gyn("./data/collisions_routieres_locations.csv").then((function(n){for(var e={},r=0,a=0;a<n.length;++a){var l=n[a].LOC_LAT,s=n[a].LOC_LONG,f=o.geoToH3(l,s,8);e[f]=null!=e[f]?e[f]+1:0,r=Math.max(r,e[f])}i.accessToken="pk.eyJ1IjoiYWtvZGEiLCJhIjoiY2wyMnZ0MHowMWsyZTNrbzV4eWlybmlmaCJ9.ID6Bhabq_oe8crICSXGhgA";var d=new i.Map({container:t,style:"mapbox://styles/mapbox/light-v10",center:[-73.7141,45.5388],zoom:10,interactive:!1});d.on("load",(function(){!function(t,n,e,r){var a=c.h3SetToFeatureCollection(Object.keys(n).filter((function(t){return n[t]>0})),(function(t){return{value:n[t]}})),i="h3-hexes",o="".concat(i,"-layer"),l=t.getSource(i);l||(t.addSource(i,{type:"geojson",data:a}),t.addLayer({id:o,source:i,type:"fill",interactive:!1,paint:{"fill-outline-color":"rgba(0,0,0,0)"}}),l=t.getSource(i)),l.setData(a),t.setPaintProperty(o,"fill-color",{property:"value",stops:[[10,u[0]],[100,u[1]],[1e3,u[2]]]}),t.setPaintProperty(o,"fill-opacity",.4)}(d,e)}))}))}var u=["#ffff00","#ffc400","#a60000"];e(3710),e(9600);var s=e(7308);function f(t,n){return a.Xf().domain(a.Wem(t)).range([0,n])}function d(t,n,e){return a.BYU().domain([t,n]).range([e,0])}function p(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2e3,e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"yAxisLineChart";a.Ys("#"+e).transition().delay(n).call(a.y4O(t))}function h(t,n){return[t=t.map((function(t){return{date:a.Z1g("%Y-%m-%d")(t.Date),value:+t.Nombres}})),(n=n.map((function(t){return{date:a.Z1g("%Y-%m-%d")(t.Date),type:t.Types,value:+t.Nombres}}))).filter((function(t){return"SANS_CAMION"===t.type})),n.filter((function(t){return"CAMION"===t.type}))]}function y(t,n,e,r,i){!function(t,n,e){t.append("g").attr("id","xAxisLineChart").attr("transform","translate(0,"+e+")").call(a.LLu(n).tickSizeOuter(0))}(t,n,i),function(t,n){t.append("g").attr("id","yAxisLineChart").call(a.y4O().scale(n))}(t,e)}function g(t,n,e,r,a){var i=[];switch(a){case"annotation1":i=[{note:{label:"Vision Zéro"},subject:{y1:e.top,y2:n(0)},y:e.top,data:{x:"2016-09-01"}},{note:{label:"Début couvre-feu"},subject:{y1:e.top,y2:n(0)},y:e.top,data:{x:"2020-03-14"}}];break;case"annotation2":i=[{note:{title:"Tendance à la hausse"},connector:{end:"arrow"},subject:{height:r.height-e.top-e.bottom,width:t(new Date("2020-03-14"))-t(new Date("2016-01-01"))},type:s.RA,x:t(new Date("2016-01-01")),y:e.top,disable:["connector"]}]}return i}function m(t,n,e,r){var a=s.Bv(s.dF,{note:{lineType:"none",orientation:"top",align:"middle"}}),i=s.dQ().type(a).accessors({x:function(t){return n(new Date(t.x))},y:function(t){return e(t.y)}}).annotations(r).textWrap(30);return t.append("g").attr("class","annotation-group").call(i)}function v(t,n,e,r,a){var i=g(n,e,a.margin,a,"annotation1"),o=g(n,r,a.margin,a,"annotation2"),c=m(t,n,e,i),l=m(t,n,r,o);return c.style("opacity",0),l.style("opacity",0),[c,l]}function w(t,n,e,r,i){return r.append("g").selectAll(".lines").data([t]).join("path").attr("class","lines").attr("d",a.jvg().x((function(t){return n(t.date)})).y((function(t){return e(t.value)}))).attr("fill","none").attr("stroke",i).attr("stroke-width",2.5).style("opacity",0)}function b(t,n){console.log("drawing all vehicule"),t.transition().style("opacity",0),n.style("opacity",0)}function A(t,n,e,r){n.transition().style("opacity",0),e.transition().style("opacity",0),t.transition().delay(200).style("opacity",1),r.style("opacity",1)}function x(t,n,e,r,a,i,o){p(o,0),i.transition().style("opacity",0),a.transition().style("opacity",0),t.transition().delay(500).style("opacity",0),r.style("opacity",0),n.transition().delay(1e3).style("opacity",1),e.transition().delay(1e3).style("opacity",1)}function S(t,n,e,r,a){t.transition().delay(1e3).style("opacity",0),n.transition().delay(1e3).style("opacity",0),p(e,2e3),r.transition().delay(3e3).style("opacity",1),a.transition().delay(3e3).style("opacity",1)}e(1532),e(1058),e(6699),e(4747),e(2023),e(9601);var k=e(358),E=e(6417),O=e(1928);function _(t,n){var e="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=function(t,n){if(t){if("string"==typeof t)return C(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?C(t,n):void 0}}(t))||n&&t&&"number"==typeof t.length){e&&(t=e);var r=0,a=function(){};return{s:a,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,c=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return o=t.done,t},e:function(t){c=!0,i=t},f:function(){try{o||null==e.return||e.return()}finally{if(c)throw i}}}}function C(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function I(t,n,e,r,a,i,o){try{var c=t[i](o),l=c.value}catch(t){return void e(t)}c.done?n(l):Promise.resolve(l).then(r,a)}function M(t){return function(){var n=this,e=arguments;return new Promise((function(r,a){var i=t.apply(n,e);function o(t){I(i,r,a,o,c,"next",t)}function c(t){I(i,r,a,o,c,"throw",t)}o(void 0)}))}}var Y="#CCC",N="#940d45";function L(t){return T.apply(this,arguments)}function T(){return T=M(regeneratorRuntime.mark((function t(n){var e,r=arguments;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=r.length>1&&void 0!==r[1]?r[1]:"#940d45",N=e,t.next=4,a.gyn(n).then((function(t){return t.filter((function(t){return"Grave ou Mortel"===t.Gravite}))}));case 4:return t.abrupt("return",t.sent);case 5:case"end":return t.stop()}}),t)}))),T.apply(this,arguments)}function j(t,n,e,r,a){return B.apply(this,arguments)}function B(){return(B=M(regeneratorRuntime.mark((function t(n,e,r,a,i){var o,c,l,u,s,f,d,p;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return console.log("draw"),o={width:r-a.right-a.left,height:e-a.bottom-a.top},c=(0,k.Z)().attr("class","d3-tip").html((function(t){return Z(t)})),n.call(c),(l=Object.keys(i[0])).pop(),u=z(l,i),s=(0,E.Z)().nodeSort(null).linkSort(null).nodeWidth(20).nodePadding(20).extent([[0,5],[o.width,o.height]]),f=s({nodes:u.nodes.map((function(t){return Object.assign({},t)})),links:u.links.map((function(t){return Object.assign({},t)}))}),d=f.nodes,p=f.links,R(n,i,d,c,o.height),U(n,p,Y,c),H(n,o.width),D(n,N,Y),t.abrupt("return",n);case 14:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function P(t,n,e){N=e;var r=t.selectAll(".graph-node").data();V(t,n>=0?r[n]:null,N,Y)}function z(t,n){var e,r=-1,a=[],i=new Map,o=new Map,c=[],l=_(t);try{for(l.s();!(e=l.n()).done;){var u,s=e.value,f=_(n);try{for(f.s();!(u=f.n()).done;){var d=u.value,p=JSON.stringify([s,d[s]]);if(!i.has(p)){var h={name:d[s]};a.push(h),i.set(p,h),o.set(p,++r)}}}catch(t){f.e(t)}finally{f.f()}}}catch(t){l.e(t)}finally{l.f()}for(var y=1;y<t.length;++y){var g,m=t[y-1],v=t[y],w=t.slice(0,y+1),b=new Map,A=_(n);try{var x=function(){var t=g.value,n=w.map((function(n){return t[n]})),e=JSON.stringify(n),r=parseInt(t.count)||1,a=b.get(e);if(a)return a.value+=r,"continue";a={source:o.get(JSON.stringify([m,t[m]])),target:o.get(JSON.stringify([v,t[v]])),names:n,value:r},c.push(a),b.set(e,a)};for(A.s();!(g=A.n()).done;)x()}catch(t){A.e(t)}finally{A.f()}}return{nodes:a,links:c}}function R(t,n,e,r,i){var o=a.Smz(n,(function(t){return t.count}));console.log("count : ",o),console.log("height : ",i),t.selectAll(".graph-node").data(e).enter().append("g").attr("class","graph-node").append("rect").attr("x",(function(t){return t.x0})).attr("y",(function(t){return t.y0})).attr("height",(function(t){return t.y1-t.y0})).attr("width",(function(t){return t.x1-t.x0})).attr("fill","black").on("mouseover",r.show).on("mouseout",r.hide)}function U(t,n,e,r){t.selectAll(".graph-line").data(n).enter().append("g").attr("fill","none").attr("class","graph-line").append("path").attr("d",(0,O.Z)()).attr("stroke",(function(t){return e})).attr("stroke-width",(function(t){return t.width})).style("mix-blend-mode","multiply").on("mouseover",r.show).on("mouseout",r.hide)}function H(t,n){t.selectAll(".info").remove(),t.selectAll(".graph-node").style("font","20px sans-serif bolder").append("text").attr("class","info").attr("x",(function(t){return t.x0<n/2?t.x1+6:t.x0-6})).attr("y",(function(t){return(t.y1+t.y0)/2})).attr("dy","0.35em").attr("text-anchor",(function(t){return t.x0<n/2?"start":"end"})).text((function(t){return t.name})).append("tspan").attr("class","info").attr("fill-opacity",.7)}function Z(t){return"<span id='tooltip-title'>"+a.Ys(t.target).data()[0].value+"</span>"}function D(t,n,e){var r=t.selectAll(".graph-node");console.log("values : ",r),r.on("click",(function(r){var i=a.Ys(r.target).data();V(t,i[0],n,e)}))}function V(t,n,e,r){var a=[];null!=n&&(q(a,n.sourceLinks),G(a,n.targetLinks)),t.selectAll(".graph-line").select("path").attr("stroke",(function(t){return a.includes(t.index)?e:r}))}function q(t,n){console.log("sources",n),n.forEach((function(n){t.includes(n.index)||t.push(n.index),q(t,n.target.sourceLinks)}))}function G(t,n){console.log("targets",n),n.forEach((function(n){t.includes(n.index)||t.push(n.index),G(t,n.source.targetLinks)}))}function J(t,n,e,r){var i,o;!function(t,n){t.append("g").attr("id","xAxisBar").attr("transform","translate(0,"+n+")")}(t,e.height),function(t){t.append("g").attr("id","yAxisBar")}(t),i=e.width,o=a.tiA().domain(["CAMION","SANS_CAMION"]).range([0,i]).padding([.2]),a.Ys("#xAxisBar").call(a.LLu(o).tickSize(0)),t.append("g").attr("id","rect1"),t.append("g").attr("id","rect2"),function(t,n,e,r){var i=n.columns.slice(1),o=(a.BYU().domain([0,100]).range([0,-e.height]),a.tiA().domain(["CAMION","SANS_CAMION"]).range([0,e.width]).padding([.2])),c=a.knu().keys(i)(n);a.Ys("#rect1").selectAll("g").data(c).enter().append("g").attr("transform","translate(0,"+e.height+")").attr("fill",(function(t){return r(t.key)})).selectAll("rect").data((function(t){return t})).enter().append("rect").attr("x",(function(t){return o(t.data.TYPE_VEHICULE)})).attr("width",o.bandwidth()).style("opacity",.9)}(0,n,e,r),function(t,n,e,r){var i=n.columns.slice(2),o=(a.BYU().domain([0,1]).range([e.height,0]),a.tiA().domain(["CAMION","SANS_CAMION"]).range([0,e.width]).padding([.2])),c=a.knu().keys(i)(n);a.Ys("#rect2").selectAll("g").data(c).enter().append("g").attr("fill",(function(t){return r(t.key)})).selectAll("rect").data((function(t){return t})).enter().append("rect").attr("x",(function(t){return o(t.data.TYPE_VEHICULE)})).attr("width",o.bandwidth()).style("opacity",.9)}(0,n,e,r)}function W(t,n,e,r){!function(t,n,e,r){var i=n.columns.slice(2),o=(a.BYU().domain([0,1]).range([e.height,0]),a.tiA().domain(["CAMION","SANS_CAMION"]).range([0,e.width]).padding([.2]));a.knu().keys(i)(n),a.Ys("#rect2").selectAll("rect").attr("x",(function(t){return o(t.data.TYPE_VEHICULE)})).attr("width",o.bandwidth()).style("opacity",0).transition().delay(500).attr("y",(function(t){return 0})).attr("height",(function(t){return 0}))}(0,n,e),function(t,n,e,r){var i=n.columns.slice(1),o=a.BYU().domain([0,100]).range([0,-e.height]),c=a.tiA().domain(["CAMION","SANS_CAMION"]).range([0,e.width]).padding([.2]);a.knu().keys(i)(n),a.Ys("#rect1").selectAll("rect").attr("x",(function(t){return c(t.data.TYPE_VEHICULE)})).attr("width",c.bandwidth()).style("opacity",1).transition().delay(0).attr("y",(function(t){return o(t[1])})).attr("height",(function(t){return o(t[0])-o(t[1])}))}(0,n,e)}function F(t,n,e,r){!function(t,n,e,r){var i=n.columns.slice(1),o=(a.BYU().domain([0,100]).range([0,-e.height]),a.tiA().domain(["CAMION","SANS_CAMION"]).range([0,e.width]).padding([.2]));a.knu().keys(i)(n),a.Ys("#rect1").selectAll("rect").attr("x",(function(t){return o(t.data.TYPE_VEHICULE)})).attr("width",o.bandwidth()).style("opacity",0).transition().delay(500).attr("y",(function(t){return 0})).attr("height",(function(t){return 0}))}(0,n,e),function(t,n,e,r){var i=n.columns.slice(2),o=a.BYU().domain([0,1]).range([e.height,0]),c=a.tiA().domain(["CAMION","SANS_CAMION"]).range([0,e.width]).padding([.2]);a.knu().keys(i)(n),a.Ys("#rect2").selectAll("rect").attr("x",(function(t){return c(t.data.TYPE_VEHICULE)})).attr("width",c.bandwidth()).style("opacity",1).transition().delay(0).attr("y",(function(t){return o(t[1])})).attr("height",(function(t){return o(t[0])-o(t[1])}))}(0,n,e)}function $(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var e=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=e){var r,a,i=[],o=!0,c=!1;try{for(e=e.call(t);!(o=(r=e.next()).done)&&(i.push(r.value),!n||i.length!==n);o=!0);}catch(t){c=!0,a=t}finally{try{o||null==e.return||e.return()}finally{if(c)throw a}}return i}}(t,n)||function(t,n){if(t){if("string"==typeof t)return X(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?X(t,n):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function X(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function K(t,n,e,r,a,i,o){try{var c=t[i](o),l=c.value}catch(t){return void e(t)}c.done?n(l):Promise.resolve(l).then(r,a)}function Q(t){return function(){var n=this,e=arguments;return new Promise((function(r,a){var i=t.apply(n,e);function o(t){K(i,r,a,o,c,"next",t)}function c(t){K(i,r,a,o,c,"throw",t)}o(void 0)}))}}var tt={width:1e3,height:500,margin:{top:100,right:100,bottom:100,left:100}},nt=tt.margin.left+tt.width+tt.margin.right,et=tt.margin.top+tt.height+tt.margin.bottom,rt=a.Ys("#viz_line_chart").append("svg").attr("viewBox","0 0 ".concat(nt," ").concat(et)).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate(".concat(tt.margin.left,", ").concat(tt.margin.top,")")),at=a.Ys("#viz_bar_chart").append("svg").attr("viewBox","0 0 ".concat(nt," ").concat(et)).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate(".concat(tt.margin.left,", ").concat(tt.margin.top,")")),it=a.Ys("#pset1").append("svg").attr("viewBox","0 0 ".concat(2400," ",1400)).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate(".concat(tt.margin.left,", ").concat(tt.margin.top,")")),ot=a.Ys("#pset3").append("svg").attr("viewBox","0 0 ".concat(2400," ",1400)).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate(".concat(tt.margin.left,", ").concat(tt.margin.top,")"));function ct(){return(ct=Q(regeneratorRuntime.mark((function t(){var n,e,r,i,o,c,u,s,p,g,m,k,E,O,_,C,I,M,Y,N,T,B,z,R,U,H,Z,D,V;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,L("./data/pset_env_route_vit.csv","#2c4aad");case 2:return n=t.sent,j(it,1e3,2e3,tt.margin,n),t.next=6,L("./data/pset_cond_ext.csv","#f68c1c");case 6:return e=t.sent,j(ot,1e3,2e3,tt.margin,e),r="#2c4aad",i="#f68c1c",t.next=12,a.gyn("./data/rolling7_viz1_all_vehicule_date.csv");case 12:return o=t.sent,t.next=15,a.gyn("./data/rolling7_viz2_acc_by_type_date.csv");case 15:return c=t.sent,t.next=18,a.gyn("./data/stackbar_pourcentage.csv");case 18:return u=t.sent,s=a.PKp().domain(["LEGER_MATERIEL","GRAVE","MORTEL"]).range(["#ffb8b8","#ff4646","#9f0000"]),J(at,u,tt,s),l("map"),k=h(o,c),E=$(k,3),p=E[0],g=E[1],m=E[2],O=[a.Fp7(p,(function(t){return t.value})),a.Fp7(m,(function(t){return t.value}))],_=O[0],C=O[1],I=Array.from(new Set(p.map((function(t){return t.date})))),M=[f(I,tt.width),d(0,_,tt.height),d(0,C,tt.height)],T=M[2],y(rt,Y=M[0],N=M[1],0,tt.height),B=w(p,Y,N,rt,"#000000"),z=w(g,Y,N,rt,"#656565"),R=w(m,Y,N,rt,"#8d072b"),U=w(m,Y,T,rt,"#8d072b"),H=v(rt,Y,N,T,tt),Z=$(H,2),D=Z[0],V=Z[1],t.abrupt("return",[[function(){},function(){}],[function(){W(0,u,tt)},function(){F(0,u,tt)}],[function(){b(B,D)},function(){A(B,z,R,D)},function(){x(B,z,R,D,V,U,N)},function(){S(z,R,T,U,V)}],[function(){P(it,-1,r)},function(){P(it,2,r)},function(){P(it,3,r)},function(){P(it,3,r)}],[function(){P(ot,4,i)},function(){P(ot,1,i)}]]);case 38:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function lt(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function ut(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}e(9070),e(3161),e(9653);var st=function(){function t(n,e,r){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.el=n,this.index=e,this.callback=r,this._isActivate=!1}var n,e;return n=t,(e=[{key:"activate",value:function(t){this._isActivate||(this._isActivate=!0,this.el.classList.add("active"),this.callback(t))}},{key:"deactivate",value:function(){this._isActivate&&(this._isActivate=!1,this.el.classList.remove("active"))}}])&&ut(n.prototype,e),Object.defineProperty(n,"prototype",{writable:!1}),t}();function ft(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}var dt=[];[".viz",".full-page-section > img",".full-page-section > video"].forEach((function(t){dt=dt.concat(Array.from(document.querySelectorAll(t)))})),(0,r.Z)(dt,{stickyBitStickyOffset:40}),Promise.all([function(){return ct.apply(this,arguments)}()]).then((function(t){var n,e;(function(t){var n=0,e=0,r=window.innerHeight,a=!1,i=0,o=[],c=[],l=[],u=document.querySelector(".article-reminder"),s=document.querySelector("header > .progress"),f=document.querySelector(".intro-section h1"),d=document.querySelectorAll(".viz-section");if(console.log(t),console.log(t.length),d.length!==t.length)throw new Error("The number of viz sections (".concat(d.length,") mismatch with the length of the first ")+"dimension of the callbacks array (".concat(t.length,"). Please, be sure that the two elements ")+"have the same size.");d.forEach((function(n,e){var r,a=function(t){if(Array.isArray(t))return lt(t)}(r=n.querySelectorAll("section"))||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(r)||function(t,n){if(t){if("string"==typeof t)return lt(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?lt(t,n):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();if(a.length!==t[e].length)throw new Error("The number of steps (".concat(a.length,") in the viz section #").concat(e+1," mismatch with the ")+"number of callbacks specified (".concat(t[e].length,') at the index "').concat(e,'". Please, be sure that the two ')+"elements have the same size.");o=o.concat(a.map((function(n,r){return new st(n,"".concat(e,"-").concat(r),t[e][r])}))),c=c.concat(c,n.querySelector(".viz > *"))}));var p=function(){var t=window.pageYOffset||document.documentElement.scrollTop;o.forEach((function(t){var a=t.el.getBoundingClientRect();r-a.top-e>0&&a.top+a.height-n>0?l.push(t):t.deactivate()}));var a=f.getBoundingClientRect().bottom<=0,c=u.classList.contains("visible");a&&!c?u.classList.add("visible"):!a&&c&&u.classList.remove("visible"),l.forEach((function(n,e){t>=i?e===l.length-1?n.activate("down"):n.deactivate():0===e?n.activate("up"):n.deactivate()})),h(),l=[],i=t},h=function(){var t=(document.body.scrollTop||document.documentElement.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100;s.style.width=t+"%"},y={initialize:function(){if(a)throw new Error("The scroller is already initialized.");return a=!0,window.addEventListener("scroll",p),window.addEventListener("resize",(function(){r=window.innerHeight,h()})),(window.pageYOffset||document.documentElement.scrollTop)>0&&p(),h(),y},offsetTop:function(t){if(void 0===t)return n;if(!Number.isInteger(t))throw new Error("The offset must be an integer number.");return n=t,y},offsetBottom:function(t){if(void 0===t)return e;if(!Number.isInteger(t))throw new Error("The offset must be an integer number.");return e=t,y}};return y})((n=t,e=1,function(t){if(Array.isArray(t))return t}(n)||function(t,n){var e=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=e){var r,a,i=[],o=!0,c=!1;try{for(e=e.call(t);!(o=(r=e.next()).done)&&(i.push(r.value),!n||i.length!==n);o=!0);}catch(t){c=!0,a=t}finally{try{o||null==e.return||e.return()}finally{if(c)throw a}}return i}}(n,e)||function(t,n){if(t){if("string"==typeof t)return ft(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?ft(t,n):void 0}}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0]).offsetTop(40).offsetBottom(0).initialize()}))}},t=>{var n=n=>t(t.s=n);t.O(0,[216],(()=>(n(8594),n(5666),n(3476)))),t.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Ly4vc3JjL2FwcC9tYXAuanMiLCJ3ZWJwYWNrOi8vc2Nyb2xseXRlbGxpbmctdGVtcGxhdGUvLi9zcmMvYXBwL2xpbmVjaGFydC5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvcGFyYWxsZWxlU2V0Q2hhcnQuanMiLCJ3ZWJwYWNrOi8vc2Nyb2xseXRlbGxpbmctdGVtcGxhdGUvLi9zcmMvYXBwL2JhckNoYXJ0LmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC92aXouanMiLCJ3ZWJwYWNrOi8vc2Nyb2xseXRlbGxpbmctdGVtcGxhdGUvLi9zcmMvYXBwL3Njcm9sbGVyLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9hcHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0ICogYXMgbWFwYm94Z2wgZnJvbSBcIm1hcGJveC1nbFwiO1xuaW1wb3J0ICogYXMgaDMgZnJvbSBcImgzLWpzXCI7XG5pbXBvcnQgKiBhcyBnZW9qc29uMmgzIGZyb20gXCJnZW9qc29uMmgzXCI7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTWFwKGRpdl9pZCl7XG4gIGNvbnN0IHBhdGhUb0NzdiA9IFwiLi9kYXRhL2NvbGxpc2lvbnNfcm91dGllcmVzX2xvY2F0aW9ucy5jc3ZcIjtcbiAgZDMuY3N2KHBhdGhUb0NzdikudGhlbigoZGF0YSkgPT4ge1xuICAgIFxuICAgIC8vY29vcmQgZGUgbW9udHJlYWxcbiAgICBjb25zdCBsYXQgPSA0NS41Mzg4O1xuICAgIGNvbnN0IGxvbmcgPSAtNzMuNzE0MTtcblxuICAgIGNvbnN0IHByZWNpc2lvbkxldmVsID0gODtcbiAgICBcbiAgICB2YXIgaGV4YWdvbnMgPSB7fTtcbiAgICB2YXIgbWF4QWNjID0gMFxuXG4gICAgLy8gTG9vcCBjYWxjdWxhdGVzIG51bWJlciBvZiBhY2NpZGVudCB3aXRoaW4gZWFjaCBoZXhhZ29uXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpe1xuICAgICAgdmFyIGRhdGFMYXQgPSBkYXRhW2ldLkxPQ19MQVQ7XG4gICAgICB2YXIgZGF0YUxvbmcgPSBkYXRhW2ldLkxPQ19MT05HO1xuICAgICAgdmFyIGhleCA9IGgzLmdlb1RvSDMoZGF0YUxhdCwgZGF0YUxvbmcsIHByZWNpc2lvbkxldmVsKTtcbiAgICAgIGhleGFnb25zW2hleF0gPSBoZXhhZ29uc1toZXhdICE9IG51bGwgPyBoZXhhZ29uc1toZXhdKzEgOiAwO1xuICAgICAgbWF4QWNjID0gTWF0aC5tYXgobWF4QWNjLGhleGFnb25zW2hleF0pO1xuICAgIH1cblxuICAgIG1hcGJveGdsLmFjY2Vzc1Rva2VuID0gXCJway5leUoxSWpvaVlXdHZaR0VpTENKaElqb2lZMnd5TW5aME1Ib3dNV3N5WlROcmJ6VjRlV2x5Ym1sbWFDSjkuSUQ2QmhhYnFfb2U4Y3JJQ1NYR2hnQVwiXG4gICAgY29uc3QgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7XG4gICAgICAgIGNvbnRhaW5lcjogZGl2X2lkLCAvLyBjb250YWluZXIgSURcbiAgICAgICAgLy9zdHlsZTogJ21hcGJveDovL3N0eWxlcy9tYXBib3gvc3RyZWV0cy12MTEnLCAvLyBzdHlsZSBVUkxcbiAgICAgICAgc3R5bGU6ICdtYXBib3g6Ly9zdHlsZXMvbWFwYm94L2xpZ2h0LXYxMCcsIC8vIHN0eWxlIFVSTFxuICAgICAgICBjZW50ZXI6IFtsb25nLCBsYXRdLCAvLyBzdGFydGluZyBwb3NpdGlvbiBbbG5nLCBsYXRdXG4gICAgICAgIHpvb206IDEwLCAvLyBzdGFydGluZyB6b29tXG4gICAgICAgIGludGVyYWN0aXZlOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgIG1hcC5vbignbG9hZCcsICgpID0+IHtcbiAgICAgICAgcmVuZGVySGV4ZXMobWFwLCBoZXhhZ29ucywgMCwgbWF4QWNjKTtcbiAgICAgICAgLy9yZW5kZXJBcmVhcyhtYXAsIGhleGFnb25zLCAwKTtcbiAgICAgICAgLy9kMy5zZWxlY3QoJy5tYXBib3hnbC1jb250cm9sLWNvbnRhaW5lcicpLnJlbW92ZSgpOyAvL1xuICAgIH0pO1xuICAgIFxuICB9KTtcbn1cblxuXG4vLyBNb3N0IGNvZGUgZG93biB0aGVyZSB0YWtlbiBmcm9tIGh0dHBzOi8vb2JzZXJ2YWJsZWhxLmNvbS9AbnJhYmlub3dpdHovaDMtdHV0b3JpYWwtaGVhdG1hcC1yZW5kZXJpbmdcblxuLy9jb25zdCBjb2xvclNjYWxlID0gWycjZmZmZmNjJywgJyM3OGM2NzknLCAnIzAwNjgzNyddO1xuLy9jb25zdCBjb2xvclNjYWxlID0gWycjMmJmZjAwJywgJyNmZmZiMDAnLCAnI2ZmMDAwMCddO1xuLy9jb25zdCBjb2xvclNjYWxlID0gWycjZmZmZjAwJywgJyNmZjlkMDAnICwnI2E2MDAwMCddO1xuY29uc3QgY29sb3JTY2FsZSA9IFsnI2ZmZmYwMCcsICcjZmZjNDAwJyAsJyNhNjAwMDAnXTtcbmNvbnN0IGZpbGxPcGFjaXR5ID0gMC40O1xuZnVuY3Rpb24gcmVuZGVySGV4ZXMobWFwLCBoZXhhZ29ucywgdGhyZXNob2xkLCBtYXhWYWx1ZSkge1xuICBcbiAgICAvLyBUcmFuc2Zvcm0gdGhlIGN1cnJlbnQgaGV4YWdvbiBtYXAgaW50byBhIEdlb0pTT04gb2JqZWN0XG4gICAgY29uc3QgZ2VvanNvbiA9IGdlb2pzb24yaDMuaDNTZXRUb0ZlYXR1cmVDb2xsZWN0aW9uKFxuICAgICAgT2JqZWN0LmtleXMoaGV4YWdvbnMpLmZpbHRlcihoZXggPT4gaGV4YWdvbnNbaGV4XSA+IHRocmVzaG9sZCksXG4gICAgICBoZXggPT4gKHt2YWx1ZTogaGV4YWdvbnNbaGV4XX0pXG4gICAgKTtcbiAgICBcbiAgICBjb25zdCBzb3VyY2VJZCA9ICdoMy1oZXhlcyc7XG4gICAgY29uc3QgbGF5ZXJJZCA9IGAke3NvdXJjZUlkfS1sYXllcmA7XG4gICAgbGV0IHNvdXJjZSA9IG1hcC5nZXRTb3VyY2Uoc291cmNlSWQpO1xuICAgIFxuICAgIC8vIEFkZCB0aGUgc291cmNlIGFuZCBsYXllciBpZiB3ZSBoYXZlbid0IGNyZWF0ZWQgdGhlbSB5ZXRcbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgbWFwLmFkZFNvdXJjZShzb3VyY2VJZCwge1xuICAgICAgICB0eXBlOiAnZ2VvanNvbicsXG4gICAgICAgIGRhdGE6IGdlb2pzb25cbiAgICAgIH0pO1xuICAgICAgbWFwLmFkZExheWVyKHtcbiAgICAgICAgaWQ6IGxheWVySWQsXG4gICAgICAgIHNvdXJjZTogc291cmNlSWQsXG4gICAgICAgIHR5cGU6ICdmaWxsJyxcbiAgICAgICAgaW50ZXJhY3RpdmU6IGZhbHNlLFxuICAgICAgICBwYWludDoge1xuICAgICAgICAgICdmaWxsLW91dGxpbmUtY29sb3InOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgc291cmNlID0gbWFwLmdldFNvdXJjZShzb3VyY2VJZCk7XG4gICAgfVxuICBcbiAgICAvLyBVcGRhdGUgdGhlIGdlb2pzb24gZGF0YVxuICAgIHNvdXJjZS5zZXREYXRhKGdlb2pzb24pO1xuICAgIFxuICAgIC8vIFVwZGF0ZSB0aGUgbGF5ZXIgcGFpbnQgcHJvcGVydGllcywgdXNpbmcgdGhlIGN1cnJlbnQgY29uZmlnIHZhbHVlc1xuICAgIG1hcC5zZXRQYWludFByb3BlcnR5KGxheWVySWQsICdmaWxsLWNvbG9yJywge1xuICAgICAgcHJvcGVydHk6ICd2YWx1ZScsXG4gICAgICBzdG9wczogW1xuICAgICAgICBbMTAsIGNvbG9yU2NhbGVbMF1dLFxuICAgICAgICBbMTAwLCBjb2xvclNjYWxlWzFdXSxcbiAgICAgICAgWzEwMDAsIGNvbG9yU2NhbGVbMl1dXG4gICAgICBdXG4gICAgfSk7XG4gICAgXG4gICAgbWFwLnNldFBhaW50UHJvcGVydHkobGF5ZXJJZCwgJ2ZpbGwtb3BhY2l0eScsIGZpbGxPcGFjaXR5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbmRlckFyZWFzKG1hcCwgaGV4YWdvbnMsIHRocmVzaG9sZCkge1xuICBcbiAgICAvLyBUcmFuc2Zvcm0gdGhlIGN1cnJlbnQgaGV4YWdvbiBtYXAgaW50byBhIEdlb0pTT04gb2JqZWN0XG4gICAgY29uc3QgZ2VvanNvbiA9IGdlb2pzb24yaDMuaDNTZXRUb0ZlYXR1cmUoXG4gICAgICBPYmplY3Qua2V5cyhoZXhhZ29ucykuZmlsdGVyKGhleCA9PiBoZXhhZ29uc1toZXhdID4gdGhyZXNob2xkKVxuICAgICk7XG4gICAgXG4gICAgY29uc3Qgc291cmNlSWQgPSAnaDMtaGV4LWFyZWFzJztcbiAgICBjb25zdCBsYXllcklkID0gYCR7c291cmNlSWR9LWxheWVyYDtcbiAgICBsZXQgc291cmNlID0gbWFwLmdldFNvdXJjZShzb3VyY2VJZCk7XG4gICAgXG4gICAgLy8gQWRkIHRoZSBzb3VyY2UgYW5kIGxheWVyIGlmIHdlIGhhdmVuJ3QgY3JlYXRlZCB0aGVtIHlldFxuICAgIGlmICghc291cmNlKSB7XG4gICAgICBtYXAuYWRkU291cmNlKHNvdXJjZUlkLCB7XG4gICAgICAgIHR5cGU6ICdnZW9qc29uJyxcbiAgICAgICAgZGF0YTogZ2VvanNvblxuICAgICAgfSk7XG4gICAgICBtYXAuYWRkTGF5ZXIoe1xuICAgICAgICBpZDogbGF5ZXJJZCxcbiAgICAgICAgc291cmNlOiBzb3VyY2VJZCxcbiAgICAgICAgdHlwZTogJ2xpbmUnLFxuICAgICAgICBpbnRlcmFjdGl2ZTogZmFsc2UsXG4gICAgICAgIHBhaW50OiB7XG4gICAgICAgICAgJ2xpbmUtd2lkdGgnOiAzLFxuICAgICAgICAgICdsaW5lLWNvbG9yJzogY29sb3JTY2FsZVsyXSxcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBzb3VyY2UgPSBtYXAuZ2V0U291cmNlKHNvdXJjZUlkKTtcbiAgICB9XG4gIFxuICAgIC8vIFVwZGF0ZSB0aGUgZ2VvanNvbiBkYXRhXG4gICAgc291cmNlLnNldERhdGEoZ2VvanNvbik7XG4gfVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0IHsgYW5ub3RhdGlvbiB9IGZyb20gJ2QzLXN2Zy1hbm5vdGF0aW9uJ1xuaW1wb3J0ICogYXMgZDNBbm5vdGF0aW9uIGZyb20gJ2QzLXN2Zy1hbm5vdGF0aW9uJ1xuXG5cbmZ1bmN0aW9uIGRyYXdYQXhpcyhzdmcsIHgsIGhlaWdodCl7XG4gICAgc3ZnLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKCdpZCcsICd4QXhpc0xpbmVDaGFydCcpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4KS50aWNrU2l6ZU91dGVyKDApKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2NhbGVYKGRhdGVzLCB3aWR0aCl7XG4gICAgcmV0dXJuIGQzLnNjYWxlVGltZSgpXG4gICAgICAgIC5kb21haW4oZDMuZXh0ZW50KGRhdGVzKSlcbiAgICAgICAgLnJhbmdlKFswLCB3aWR0aF0pXG59XG5cbmZ1bmN0aW9uIGRyYXdZQXhpcyhzdmcsIHkpe1xuICAgIHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKCdpZCcsICd5QXhpc0xpbmVDaGFydCcpXG4gICAgICAgIC5jYWxsKGQzLmF4aXNMZWZ0KCkuc2NhbGUoeSkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2FsZVkobWluLCBtYXgsIGhlaWdodCl7XG4gICAgcmV0dXJuICBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgIC5kb21haW4oW21pbiwgbWF4XSlcbiAgICAgICAgLnJhbmdlKFsgaGVpZ2h0LCAwIF0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2l0aW9uWUF4aXMoeSwgZGVsYXk9MjAwMCwgaWQ9J3lBeGlzTGluZUNoYXJ0Jyl7XG4gICAgZDMuc2VsZWN0KCcjJyArIGlkKVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kZWxheShkZWxheSlcbiAgICAgICAgLmNhbGwoZDMuYXhpc0xlZnQoeSkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzRGF0YShkYXRhMSwgZGF0YTIpe1xuICAgIGRhdGExID0gZGF0YTEubWFwKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHtkYXRlOmQzLnRpbWVQYXJzZShcIiVZLSVtLSVkXCIpKGQuRGF0ZSksIHZhbHVlOitkLk5vbWJyZXN9fSlcblxuICAgIGRhdGEyID0gZGF0YTIubWFwKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHtkYXRlOmQzLnRpbWVQYXJzZShcIiVZLSVtLSVkXCIpKGQuRGF0ZSksIHR5cGU6IGQuVHlwZXMsIHZhbHVlOitkLk5vbWJyZXN9fSlcbiAgICBjb25zdCBvdGhlciA9IGRhdGEyLmZpbHRlcihmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGUgPT09ICdTQU5TX0NBTUlPTid9KVxuICAgIGNvbnN0IGNhbWlvbiA9IGRhdGEyLmZpbHRlcihmdW5jdGlvbihkKSB7cmV0dXJuIGQudHlwZSA9PT0gJ0NBTUlPTid9KVxuXG4gICAgLy8gZGF0YTMgPSBkYXRhMy5tYXAoZnVuY3Rpb24oZCkgeyByZXR1cm4ge2RhdGU6ZDMudGltZVBhcnNlKFwiJVktJW0tJWRcIikoZC5EYXRlKSwgdmFsdWU6K2QuTm9tYnJlc319KVxuICAgIHJldHVybiBbZGF0YTEsIG90aGVyLCBjYW1pb25dXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmF3TGluZUNoYXJ0QXhpcyhnLCB4LCB5LCB3aWR0aCwgaGVpZ2h0KXtcbiAgICBkcmF3WEF4aXMoZyx4LCBoZWlnaHQpXG4gICAgZHJhd1lBeGlzKGcsIHkpXG59XG5cbi8qKlxuICogUG9zaXRpb25zIHRoZSB4IGF4aXMgbGFiZWwgYW5kIHkgYXhpcyBsYWJlbC5cbiAqXG4gKiBAcGFyYW0geyp9IGcgVGhlIGQzIFNlbGVjdGlvbiBvZiB0aGUgZ3JhcGgncyBnIFNWRyBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gd2lkdGggVGhlIHdpZHRoIG9mIHRoZSBncmFwaFxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBUaGUgaGVpZ2h0IG9mIHRoZSBncmFwaFxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9zaXRpb25MYWJlbHMgKGcsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAvLyBUT0RPIDogUG9zaXRpb24gYXhpcyBsYWJlbHNcbiAgICB2YXIgbGFiZWxEYXRlID0gZy5zZWxlY3RBbGwoJy54LmF4aXMtdGV4dCcpXG4gICAgdmFyIGxhYmVsQWNjaWRlbnQgPSBnLnNlbGVjdEFsbCgnLnkuYXhpcy10ZXh0JylcblxuICAgIGxhYmVsRGF0ZS5hdHRyKCd4Jywgd2lkdGggLyAyKVxuICAgIGxhYmVsRGF0ZS5hdHRyKCd5JywgaGVpZ2h0ICsgNDApXG5cbiAgICBsYWJlbEFjY2lkZW50LmF0dHIoJ3gnLCAtNDApXG4gICAgbGFiZWxBY2NpZGVudC5hdHRyKCd5JywgaGVpZ2h0IC8gMilcbn1cblxuLyoqXG4gKiBEcmF3cyB0aGUgY2lyY2xlcyBvbiB0aGUgZ3JhcGguXG4gKlxuICogQHBhcmFtIGdcbiAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIFRoZSBkYXRhIHRvIGJpbmQgdG9cbiAqIEBwYXJhbSB7Kn0gclNjYWxlIFRoZSBzY2FsZSBmb3IgdGhlIGNpcmNsZXMnIHJhZGl1c1xuICogQHBhcmFtIHsqfSBjb2xvclNjYWxlIFRoZSBzY2FsZSBmb3IgdGhlIGNpcmNsZXMnIGNvbG9yXG4gKiBAcGFyYW0gY29sb3JcbiAqIEBwYXJhbSB4U2NhbGVcbiAqIEBwYXJhbSB5U2NhbGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRyYXdMaW5lIChnLCBkYXRhLCBjb2xvciwgeFNjYWxlLCB5U2NhbGUpIHtcbiAgICBnLmFwcGVuZCgncGF0aCcpXG4gICAgICAgIC5kYXR1bShkYXRhKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnbGluZVBhdGgnKVxuICAgICAgICAuYXR0cignZmlsbCcsICdub25lJylcbiAgICAgICAgLmF0dHIoJ3N0cm9rZScsIGNvbG9yKVxuICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgMS41KVxuICAgICAgICAuYXR0cignZCcsIGQzLmxpbmUoKVxuICAgICAgICAgICAgLngoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIHhTY2FsZShkLmRhdGUpIH0pXG4gICAgICAgICAgICAueShmdW5jdGlvbiAoZCkgeyByZXR1cm4geVNjYWxlKGQubm9tYnJlKSB9KVxuICAgICAgICApXG59XG5cbi8qKlxuICogQHBhcmFtIHhTY2FsZVxuICogQHBhcmFtIHlTY2FsZVxuICogQHBhcmFtIG1hcmdpblxuICogQHBhcmFtIGdyYXBoU2l6ZVxuICogQHBhcmFtIHZpeiA6IHN0cmluZyBjYW4gYmUgJ2Fubm90YXRpb24xJyBvciAnYW5ub3RhdGlvbjInXG4gKi9cbmZ1bmN0aW9uIGdldEFubm90YXRpb24gKHhTY2FsZSwgeVNjYWxlLCBtYXJnaW4sIGdyYXBoU2l6ZSwgdml6KSB7XG4gICAgbGV0IGFubm90YXRpb24gPSBbXVxuICAgIHN3aXRjaCAodml6KSB7XG4gICAgICAgIGNhc2UgJ2Fubm90YXRpb24xJzpcbiAgICAgICAgICAgIGFubm90YXRpb24gPSBbe1xuICAgICAgICAgICAgICAgIG5vdGU6IHsgbGFiZWw6ICdWaXNpb24gWsOpcm8nIH0sXG4gICAgICAgICAgICAgICAgc3ViamVjdDoge1xuICAgICAgICAgICAgICAgICAgICB5MTogbWFyZ2luLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgeTI6IHlTY2FsZSgwKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeTogbWFyZ2luLnRvcCxcbiAgICAgICAgICAgICAgICBkYXRhOiB7eDonMjAxNi0wOS0wMSd9IC8vIHBvc2l0aW9uIHRoZSB4IGJhc2VkIG9uIGFuIHggc2NhbGVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBub3RlOiB7IGxhYmVsOiAnRMOpYnV0IGNvdXZyZS1mZXUnIH0sXG4gICAgICAgICAgICAgICAgICAgIHN1YmplY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxOiBtYXJnaW4udG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTI6IHlTY2FsZSgwKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB5OiBtYXJnaW4udG9wLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7eDonMjAyMC0wMy0xNCd9XG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2Fubm90YXRpb24yJzpcbiAgICAgICAgICAgIGFubm90YXRpb24gPSBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBub3RlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1RlbmRhbmNlIMOgIGxhIGhhdXNzZSdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdG9yOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6ICdhcnJvdycgLy8gQ2FuIGJlIG5vbmUsIG9yIGFycm93IG9yIGRvdFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGdyYXBoU2l6ZS5oZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB4U2NhbGUobmV3IERhdGUoJzIwMjAtMDMtMTQnKSkgLSB4U2NhbGUobmV3IERhdGUoJzIwMTYtMDEtMDEnKSlcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogZDNBbm5vdGF0aW9uLmFubm90YXRpb25DYWxsb3V0UmVjdCxcbiAgICAgICAgICAgICAgICAgICAgeDogeFNjYWxlKG5ldyBEYXRlKCcyMDE2LTAxLTAxJykpLFxuICAgICAgICAgICAgICAgICAgICB5OiBtYXJnaW4udG9wLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlOiBbJ2Nvbm5lY3RvciddIC8vIGRvZXNuJ3QgZHJhdyB0aGUgY29ubmVjdG9yXG5cbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgcmV0dXJuIGFubm90YXRpb25cbn1cblxuLyoqXG4gKiBEcmF3IHZlcnRpY2FsIGxpbmUgdG8gaW5kaWNhdGUgYW4gZXZlbnQgaW4gdGltZVxuICpcbiAqIEBwYXJhbSBkYXRlXG4gKiBAcGFyYW0gdGV4dFxuICogQHBhcmFtIGdcbiAqIEBwYXJhbSB4U2NhbGVcbiAqIEBwYXJhbSB5U2NhbGVcbiAqIEBwYXJhbSBtYXJnaW5cbiAqIEBwYXJhbSBoZWlnaHRcbiAqIEBwYXJhbSBhbm5vdGF0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZHJhd0Fubm90YXRpb25zVml6IChnLCB4U2NhbGUsIHlTY2FsZSwgYW5ub3RhdGlvbnMpIHtcbiAgICAvKiBDb2RlIGJlbG93IHJlbGV2YW50IGZvciBhbm5vdGF0aW9ucyAqL1xuICAgIGNvbnN0IHR5cGUgPSBkM0Fubm90YXRpb24uYW5ub3RhdGlvbkN1c3RvbVR5cGUoXG4gICAgICAgIGQzQW5ub3RhdGlvbi5hbm5vdGF0aW9uWFlUaHJlc2hvbGQsXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5vdGU6IHtcbiAgICAgICAgICAgICAgICBsaW5lVHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uOiAndG9wJyxcbiAgICAgICAgICAgICAgICBhbGlnbjogJ21pZGRsZSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIClcbiAgICBjb25zdCBtYWtlQW5ub3RhdGlvbnMgPSBkM0Fubm90YXRpb24uYW5ub3RhdGlvbigpXG4gICAgICAgIC50eXBlKHR5cGUpXG4gICAgICAgIC8vIEdpdmVzIHlvdSBhY2Nlc3MgdG8gYW55IGRhdGEgb2JqZWN0cyBpbiB0aGUgYW5ub3RhdGlvbnMgYXJyYXlcbiAgICAgICAgLmFjY2Vzc29ycyh7XG4gICAgICAgICAgICB4OiBmdW5jdGlvbiAoZCkgeyByZXR1cm4geFNjYWxlKG5ldyBEYXRlKGQueCkpIH0sXG4gICAgICAgICAgICB5OiBmdW5jdGlvbiAoZCkgeyByZXR1cm4geVNjYWxlKGQueSkgfVxuICAgICAgICB9KVxuICAgICAgICAuYW5ub3RhdGlvbnMoYW5ub3RhdGlvbnMpXG4gICAgICAgIC50ZXh0V3JhcCgzMClcblxuICAgIGNvbnN0IGFubm90YXRpb24gPSBnLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdhbm5vdGF0aW9uLWdyb3VwJylcbiAgICAgICAgLmNhbGwobWFrZUFubm90YXRpb25zKVxuXG4gICAgcmV0dXJuIGFubm90YXRpb25cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRBbm5vdGF0aW9uKGcsIHhTY2FsZSwgeVNjYWxlMSwgeVNjYWxlMiwgY29uZmlnKXtcblxuICAgIGNvbnN0IGFubm90YXRpb24xID0gZ2V0QW5ub3RhdGlvbih4U2NhbGUsIHlTY2FsZTEsIGNvbmZpZy5tYXJnaW4sIGNvbmZpZywgJ2Fubm90YXRpb24xJylcbiAgICBjb25zdCBhbm5vdGF0aW9uMiA9IGdldEFubm90YXRpb24oeFNjYWxlLCB5U2NhbGUyLCBjb25maWcubWFyZ2luLCBjb25maWcsICdhbm5vdGF0aW9uMicpXG4gICAgY29uc3QgYTEgPSBkcmF3QW5ub3RhdGlvbnNWaXooZywgeFNjYWxlLCB5U2NhbGUxLCBhbm5vdGF0aW9uMSlcbiAgICBjb25zdCBhMiA9IGRyYXdBbm5vdGF0aW9uc1ZpeihnLCB4U2NhbGUsIHlTY2FsZTIsIGFubm90YXRpb24yKVxuICAgIGExLnN0eWxlKCdvcGFjaXR5JywgMClcbiAgICBhMi5zdHlsZSgnb3BhY2l0eScsIDApXG4gICAgcmV0dXJuIFthMSwgYTJdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0TGluZShkYXRhLCB4LCB5LCBzdmcsIGNvbG9yKSB7XG4gICAgLy8gVXBkYXRhIHRoZSBsaW5lXG4gICAgY29uc3QgbGluZSA9IHN2Zy5hcHBlbmQoJ2cnKVxuICAgICAgICAuc2VsZWN0QWxsKFwiLmxpbmVzXCIpXG4gICAgICAgIC5kYXRhKFtkYXRhXSlcbiAgICAgICAgLmpvaW4oXCJwYXRoXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsaW5lc1wiKVxuICAgICAgICAuYXR0cihcImRcIixkMy5saW5lKClcbiAgICAgICAgICAgICAgICAueChmdW5jdGlvbiAoZCkgeyByZXR1cm4geChkLmRhdGUpfSlcbiAgICAgICAgICAgICAgICAueShmdW5jdGlvbiAoZCkgeyByZXR1cm4geShkLnZhbHVlKX0pXG4gICAgICAgIClcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBjb2xvcilcbiAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMi41KVxuICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDApXG5cbiAgICByZXR1cm4gbGluZVxufVxuXG4vKipcbiAqIGRyYXcgYXhpcywgaW5pdCBjaGFydCB3aXRoIHRyYW5zaXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0ZXAxTGluZUNoYXJ0KGxpbmUxLCBhbm5vdGF0aW9uMSl7XG4gICAgY29uc29sZS5sb2coJ2RyYXdpbmcgYWxsIHZlaGljdWxlJylcbiAgICBsaW5lMVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDApXG5cbiAgICBhbm5vdGF0aW9uMS5zdHlsZSgnb3BhY2l0eScsIDAgKVxuXG5cbiAgICAvLyBzaG93IGdyYXBoZSBvcGFjaXR5IDFcbiAgICAvLyBleGl0IGRhdGEgdHlwZVxuICAgIC8vIGFubm90YXRpb24gMSBvcGFjaXR5IDBcbn1cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBzdGVwMkxpbmVDaGFydChsaW5lMSwgbGluZTIsIGxpbmUzLCBhbm5vdGF0aW9uMSl7XG4gICAgbGluZTIudHJhbnNpdGlvbigpLnN0eWxlKCdvcGFjaXR5JywgMClcbiAgICBsaW5lMy50cmFuc2l0aW9uKCkuc3R5bGUoJ29wYWNpdHknLCAwKVxuXG4gICAgbGluZTFcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZGVsYXkoMjAwKVxuICAgICAgICAuc3R5bGUoJ29wYWNpdHknLDEpXG5cbiAgICBhbm5vdGF0aW9uMS5zdHlsZSgnb3BhY2l0eScsIDEpXG4gICAgLy9hZGQgYW5ub3RhdGlvblxuXG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHN0ZXAzTGluZUNoYXJ0KGxpbmUxLCBsaW5lMiwgbGluZTMsIGFubm90YXRpb24xLCBhbm5vdGF0aW9uMiwgbGluZTQsIHkpe1xuICAgIHRyYW5zaXRpb25ZQXhpcyh5LCAwKVxuICAgIGxpbmU0LnRyYW5zaXRpb24oKS5zdHlsZSgnb3BhY2l0eScsMClcbiAgICBhbm5vdGF0aW9uMi50cmFuc2l0aW9uKCkuc3R5bGUoJ29wYWNpdHknLCAwKVxuXG4gICAgbGluZTEudHJhbnNpdGlvbigpLmRlbGF5KDUwMCkuc3R5bGUoJ29wYWNpdHknLCAwKVxuICAgIGFubm90YXRpb24xLnN0eWxlKCdvcGFjaXR5JywgMClcblxuICAgIGxpbmUyLnRyYW5zaXRpb24oKS5kZWxheSgxMDAwKS5zdHlsZSgnb3BhY2l0eScsIDEpXG4gICAgbGluZTMudHJhbnNpdGlvbigpLmRlbGF5KDEwMDApLnN0eWxlKCdvcGFjaXR5JywgMSlcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gc3RlcDRMaW5lQ2hhcnQobGluZTIsIGxpbmUzLCB5LCBsaW5lNCwgYW5ub3RhdGlvbjIpe1xuICAgIGxpbmUyLnRyYW5zaXRpb24oKS5kZWxheSgxMDAwKS5zdHlsZSgnb3BhY2l0eScsIDApXG4gICAgbGluZTMudHJhbnNpdGlvbigpLmRlbGF5KDEwMDApLnN0eWxlKCdvcGFjaXR5JywgMClcblxuICAgIHRyYW5zaXRpb25ZQXhpcyh5LCAyMDAwKVxuXG5cbiAgICBsaW5lNC50cmFuc2l0aW9uKCkuZGVsYXkoMzAwMCkuc3R5bGUoJ29wYWNpdHknLDEpXG4gICAgYW5ub3RhdGlvbjIudHJhbnNpdGlvbigpLmRlbGF5KDMwMDApLnN0eWxlKCdvcGFjaXR5JywgMSlcblxufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnXG5pbXBvcnQgZDNUaXAgZnJvbSAnZDMtdGlwJ1xuaW1wb3J0IHsgc2Fua2V5IGFzIFNhbmtleSB9IGZyb20gJ2QzLXNhbmtleSdcbmltcG9ydCB7IHNhbmtleUxpbmtIb3Jpem9udGFsIH0gZnJvbSAnZDMtc2Fua2V5J1xuXG5jb25zdCBvdGhlckNvbG9yID0gJyNDQ0MnXG5sZXQgc2VsZWN0aW9uQ29sb3IgPSAnIzk0MGQ0NSdcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVQYXJhbGxlU2V0KGRhdGFQYXRoLCBjb2xvciA9ICcjOTQwZDQ1Jykge1xuICBzZWxlY3Rpb25Db2xvciA9IGNvbG9yXG4gIHJldHVybiBhd2FpdCBkMy5jc3YoZGF0YVBhdGgpLnRoZW4oZnVuY3Rpb24gKGRhdGEpe1xuXG4gICAgZGF0YSA9IGRhdGEuZmlsdGVyKGQgPT4gZC5HcmF2aXRlID09PSAnR3JhdmUgb3UgTW9ydGVsJylcblxuICAgIHJldHVybiBkYXRhXG4gIH0pXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBEcmF3UGFyYWxsZWxlU2V0KGcsIGhlaWdodCwgd2lkdGgsIG1hcmdpbiwgZGF0YSkge1xuICBjb25zb2xlLmxvZyhcImRyYXdcIik7XG5cbiAgY29uc3QgZ3JhcGhTaXplID0ge1xuICAgIHdpZHRoOiB3aWR0aCAtIG1hcmdpbi5yaWdodCAtIG1hcmdpbi5sZWZ0LFxuICAgIGhlaWdodDogaGVpZ2h0IC0gbWFyZ2luLmJvdHRvbSAtIG1hcmdpbi50b3BcbiAgfVxuXG4gIGNvbnN0IHRpcCA9IGQzVGlwKCkuYXR0cignY2xhc3MnLCAnZDMtdGlwJykuaHRtbChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZ2V0Q29udGVudHMoZCkgfSlcbiAgZy5jYWxsKHRpcClcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGFbMF0pXG4gIGtleXMucG9wKClcbiAgY29uc3QgZ3JhcGggPSBDcmVhdGVHcmFwaE5vZGVBbmRMaW5rKGtleXMsIGRhdGEpXG5cbiAgY29uc3Qgc2Fua2V5ID0gU2Fua2V5KClcbiAgICAgIC5ub2RlU29ydChudWxsKVxuICAgICAgLmxpbmtTb3J0KG51bGwpXG4gICAgICAubm9kZVdpZHRoKDIwKVxuICAgICAgLm5vZGVQYWRkaW5nKDIwKVxuICAgICAgLmV4dGVudChbWzAsIDVdLCBbZ3JhcGhTaXplLndpZHRoLCBncmFwaFNpemUuaGVpZ2h0XV0pXG5cbiAgICBjb25zdCB7IG5vZGVzLCBsaW5rcyB9ID0gc2Fua2V5KHtcbiAgICAgIG5vZGVzOiBncmFwaC5ub2Rlcy5tYXAoZCA9PiBPYmplY3QuYXNzaWduKHt9LCBkKSksXG4gICAgICBsaW5rczogZ3JhcGgubGlua3MubWFwKGQgPT4gT2JqZWN0LmFzc2lnbih7fSwgZCkpXG4gICAgfSlcblxuICAgIENyZWF0ZVNWR05vZGVzKGcsIGRhdGEsIG5vZGVzLCB0aXAsIGdyYXBoU2l6ZS5oZWlnaHQpXG4gICAgQ3JlYXRlU1ZHTGluZXMoZywgbGlua3MsIG90aGVyQ29sb3IsIHRpcClcblxuICAgIENyZWF0ZVNWR1RleHRJbmZvKGcsIGdyYXBoU2l6ZS53aWR0aClcblxuICAgIHNldEV2ZW50SGFuZGxlcihnLCBzZWxlY3Rpb25Db2xvciwgb3RoZXJDb2xvcilcblxuICByZXR1cm4gZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0Tm9kZShnLCBpbmRleCwgY29sb3IpIHtcbiAgc2VsZWN0aW9uQ29sb3IgPSBjb2xvclxuICB2YXIgbm9kZXMgPSBnLnNlbGVjdEFsbCgnLmdyYXBoLW5vZGUnKS5kYXRhKClcbiAgLy9jb25zb2xlLmxvZyhcIm5vZGVzIDogXCIsIG5vZGVzKTtcbiAgdmFyIGRhdGEgPSBpbmRleCA+PSAwID8gbm9kZXNbaW5kZXhdIDogbnVsbFxuICBvbkNsaWNrRXZlbnQoZywgZGF0YSwgc2VsZWN0aW9uQ29sb3IsIG90aGVyQ29sb3IpXG59XG5cbi8qKlxuICogQHBhcmFtIGtleXNcbiAqIEBwYXJhbSBkYXRhXG4gKi9cbmZ1bmN0aW9uIENyZWF0ZUdyYXBoTm9kZUFuZExpbmsgKGtleXMsIGRhdGEpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgY29uc3Qgbm9kZXMgPSBbXVxuICBjb25zdCBub2RlQnlLZXkgPSBuZXcgTWFwKClcbiAgY29uc3QgaW5kZXhCeUtleSA9IG5ldyBNYXAoKVxuICBjb25zdCBsaW5rcyA9IFtdXG5cbiAgZm9yIChjb25zdCBrIG9mIGtleXMpIHtcbiAgICBmb3IgKGNvbnN0IGQgb2YgZGF0YSkge1xuICAgICAgY29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkoW2ssIGRba11dKVxuICAgICAgaWYgKG5vZGVCeUtleS5oYXMoa2V5KSkgY29udGludWVcbiAgICAgIGNvbnN0IG5vZGUgPSB7IG5hbWU6IGRba10gfVxuICAgICAgbm9kZXMucHVzaChub2RlKVxuICAgICAgbm9kZUJ5S2V5LnNldChrZXksIG5vZGUpXG4gICAgICBpbmRleEJ5S2V5LnNldChrZXksICsraW5kZXgpXG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgYSA9IGtleXNbaSAtIDFdXG4gICAgY29uc3QgYiA9IGtleXNbaV1cbiAgICBjb25zdCBwcmVmaXggPSBrZXlzLnNsaWNlKDAsIGkgKyAxKVxuICAgIGNvbnN0IGxpbmtCeUtleSA9IG5ldyBNYXAoKVxuICAgIGZvciAoY29uc3QgZCBvZiBkYXRhKSB7XG4gICAgICBjb25zdCBuYW1lcyA9IHByZWZpeC5tYXAoayA9PiBkW2tdKVxuICAgICAgY29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkobmFtZXMpXG4gICAgICBjb25zdCB2YWx1ZSA9IHBhcnNlSW50KGQuY291bnQpIHx8IDFcbiAgICAgIGxldCBsaW5rID0gbGlua0J5S2V5LmdldChrZXkpXG4gICAgICBpZiAobGluaykgeyBsaW5rLnZhbHVlICs9IHZhbHVlOyBjb250aW51ZSB9XG4gICAgICBsaW5rID0ge1xuICAgICAgICBzb3VyY2U6IGluZGV4QnlLZXkuZ2V0KEpTT04uc3RyaW5naWZ5KFthLCBkW2FdXSkpLFxuICAgICAgICB0YXJnZXQ6IGluZGV4QnlLZXkuZ2V0KEpTT04uc3RyaW5naWZ5KFtiLCBkW2JdXSkpLFxuICAgICAgICBuYW1lcyxcbiAgICAgICAgdmFsdWVcbiAgICAgIH1cbiAgICAgIGxpbmtzLnB1c2gobGluaylcbiAgICAgIGxpbmtCeUtleS5zZXQoa2V5LCBsaW5rKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IG5vZGVzLCBsaW5rcyB9XG59XG5cbi8qKlxuICogQHBhcmFtIGdcbiAqIEBwYXJhbSBkYXRhXG4gKiBAcGFyYW0gbm9kZXNcbiAqIEBwYXJhbSB0aXBcbiAqIEBwYXJhbSBoZWlnaHRcbiAqL1xuZnVuY3Rpb24gQ3JlYXRlU1ZHTm9kZXMgKGcsIGRhdGEsIG5vZGVzLCB0aXAsIGhlaWdodCkge1xuICBjb25zdCBjb3VudCA9IGQzLnN1bShkYXRhLCBkID0+IGQuY291bnQpXG4gIHZhciB5ID0gaGVpZ2h0XG4gIGNvbnNvbGUubG9nKCdjb3VudCA6ICcsIGNvdW50KVxuICBjb25zb2xlLmxvZygnaGVpZ2h0IDogJywgaGVpZ2h0KVxuICBnLnNlbGVjdEFsbCgnLmdyYXBoLW5vZGUnKVxuICAgIC5kYXRhKG5vZGVzKVxuICAgIC5lbnRlcigpXG4gICAgLmFwcGVuZCgnZycpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ2dyYXBoLW5vZGUnKVxuICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgIC5hdHRyKCd4JywgZCA9PiBkLngwKVxuICAgIC5hdHRyKCd5JywgZCA9PiBkLnkwKVxuICAgIC5hdHRyKCdoZWlnaHQnLCBkID0+IGQueTEgLSBkLnkwKVxuICAgIC5hdHRyKCd3aWR0aCcsIGQgPT4gZC54MSAtIGQueDApXG4gICAgLmF0dHIoJ2ZpbGwnLCAnYmxhY2snKVxuICAgIC5vbignbW91c2VvdmVyJywgdGlwLnNob3cpXG4gICAgLm9uKCdtb3VzZW91dCcsIHRpcC5oaWRlKVxufVxuXG4vKipcbiAqIEBwYXJhbSBnXG4gKiBAcGFyYW0gbGlua3NcbiAqIEBwYXJhbSBjb2xvclxuICovXG5mdW5jdGlvbiBDcmVhdGVTVkdMaW5lcyAoZywgbGlua3MsIGNvbG9yLCB0aXApIHtcbiAgZy5zZWxlY3RBbGwoJy5ncmFwaC1saW5lJylcbiAgICAuZGF0YShsaW5rcylcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoJ2cnKVxuICAgIC5hdHRyKCdmaWxsJywgJ25vbmUnKVxuICAgIC5hdHRyKCdjbGFzcycsICdncmFwaC1saW5lJylcbiAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAuYXR0cignZCcsIHNhbmtleUxpbmtIb3Jpem9udGFsKCkpXG4gICAgLmF0dHIoJ3N0cm9rZScsIGQgPT4gY29sb3IpXG4gICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsIGQgPT4gZC53aWR0aClcbiAgICAuc3R5bGUoJ21peC1ibGVuZC1tb2RlJywgJ211bHRpcGx5JylcbiAgICAub24oJ21vdXNlb3ZlcicsIHRpcC5zaG93KVxuICAgIC5vbignbW91c2VvdXQnLCB0aXAuaGlkZSlcbn1cblxuLyoqXG4gKiBAcGFyYW0gZ1xuICogQHBhcmFtIHdpZHRoXG4gKi9cbmZ1bmN0aW9uIENyZWF0ZVNWR1RleHRJbmZvIChnLCB3aWR0aCkge1xuICBnLnNlbGVjdEFsbCgnLmluZm8nKVxuICAgIC5yZW1vdmUoKVxuXG4gIGcuc2VsZWN0QWxsKCcuZ3JhcGgtbm9kZScpXG4gICAgLnN0eWxlKCdmb250JywgJzIwcHggc2Fucy1zZXJpZiBib2xkZXInKVxuICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgIC5hdHRyKCdjbGFzcycsICdpbmZvJylcbiAgICAuYXR0cigneCcsIGQgPT4gZC54MCA8IHdpZHRoIC8gMiA/IGQueDEgKyA2IDogZC54MCAtIDYpXG4gICAgLmF0dHIoJ3knLCBkID0+IChkLnkxICsgZC55MCkgLyAyKVxuICAgIC5hdHRyKCdkeScsICcwLjM1ZW0nKVxuICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsIGQgPT4gZC54MCA8IHdpZHRoIC8gMiA/ICdzdGFydCcgOiAnZW5kJylcbiAgICAudGV4dChkID0+IGQubmFtZSlcbiAgICAuYXBwZW5kKCd0c3BhbicpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ2luZm8nKVxuICAgIC5hdHRyKCdmaWxsLW9wYWNpdHknLCAwLjcpXG59XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgY29udGVudHMgb2YgdGhlIHRvb2x0aXAuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGQgVGhlIGRhdGEgYXNzb2NpYXRlZCB0byB0aGUgaG92ZXJlZCBlbGVtZW50XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgdG9vbHRpcCBjb250ZW50c1xuICovXG5mdW5jdGlvbiBnZXRDb250ZW50cyAoZCkge1xuICB2YXIgZGF0YSA9IGQzLnNlbGVjdChkLnRhcmdldCkuZGF0YSgpXG4gIHJldHVybiBcIjxzcGFuIGlkPSd0b29sdGlwLXRpdGxlJz5cIiArIGRhdGFbMF0udmFsdWUgKyAnPC9zcGFuPidcbn1cblxuLyoqXG4gKiBTZXRzIHVwIGFuIGV2ZW50IGhhbmRsZXJcbiAqXG4gKiBAcGFyYW0gZ1xuICogQHBhcmFtIGNvbG9yU2NhbGVcbiAqIEBwYXJhbSBvdGhlckNvbG9yXG4gKi9cbmZ1bmN0aW9uIHNldEV2ZW50SGFuZGxlciAoZywgc2VsZWN0aW9uQ29sb3IsIG90aGVyQ29sb3IpIHtcbiAgLy8gVE9ETyA6IFNlbGVjdCB0aGUgc3F1YXJlcyBhbmQgc2V0IHRoZWlyIGV2ZW50IGhhbmRsZXJzXG4gIHZhciBub2RlcyA9IGcuc2VsZWN0QWxsKCcuZ3JhcGgtbm9kZScpXG5cbiAgY29uc29sZS5sb2coJ3ZhbHVlcyA6ICcsIG5vZGVzKVxuXG4gIG5vZGVzLm9uKCdjbGljaycsIGZ1bmN0aW9uIChkKSB7XG4gICAgdmFyIGRhdGEgPSBkMy5zZWxlY3QoZC50YXJnZXQpLmRhdGEoKTtcbiAgICBvbkNsaWNrRXZlbnQoZywgZGF0YVswXSwgc2VsZWN0aW9uQ29sb3IsIG90aGVyQ29sb3IpXG4gIH0pXG59XG5cbi8qKlxuICogQHBhcmFtIGdcbiAqIEBwYXJhbSBkYXRhXG4gKiBAcGFyYW0gY29sb3JTY2FsZVxuICogQHBhcmFtIG90aGVyQ29sb3JcbiAqL1xuZnVuY3Rpb24gb25DbGlja0V2ZW50IChnLCBkYXRhLCBzZWxlY3Rpb25Db2xvciwgb3RoZXJDb2xvcikge1xuICB2YXIga2V5cyA9IFtdXG5cbiAgaWYgKGRhdGEgIT0gbnVsbCkge1xuICAgIEFkZFNvdXJjZUxpbmtzS2V5cyhrZXlzLCBkYXRhLnNvdXJjZUxpbmtzKVxuICAgIEFkZFRhcmdldExpbmtzS2V5cyhrZXlzLCBkYXRhLnRhcmdldExpbmtzKVxuICB9XG5cbiAgZy5zZWxlY3RBbGwoJy5ncmFwaC1saW5lJylcbiAgICAuc2VsZWN0KCdwYXRoJylcbiAgICAuYXR0cignc3Ryb2tlJywgZCA9PiBrZXlzLmluY2x1ZGVzKGQuaW5kZXgpID8gc2VsZWN0aW9uQ29sb3IgOiBvdGhlckNvbG9yKVxufVxuXG4vKipcbiAqIEBwYXJhbSBrZXlzXG4gKiBAcGFyYW0gc291cmNlc1xuICovXG5mdW5jdGlvbiBBZGRTb3VyY2VMaW5rc0tleXMgKGtleXMsIHNvdXJjZXMpIHtcbiAgY29uc29sZS5sb2coJ3NvdXJjZXMnLCBzb3VyY2VzKVxuICBzb3VyY2VzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgaWYgKCFrZXlzLmluY2x1ZGVzKGVsZW1lbnQuaW5kZXgpKSB7IGtleXMucHVzaChlbGVtZW50LmluZGV4KSB9XG4gICAgQWRkU291cmNlTGlua3NLZXlzKGtleXMsIGVsZW1lbnQudGFyZ2V0LnNvdXJjZUxpbmtzKVxuICB9KVxufVxuXG4vKipcbiAqIEBwYXJhbSBrZXlzXG4gKiBAcGFyYW0gdGFyZ2V0c1xuICovXG5mdW5jdGlvbiBBZGRUYXJnZXRMaW5rc0tleXMgKGtleXMsIHRhcmdldHMpIHtcbiAgY29uc29sZS5sb2coJ3RhcmdldHMnLCB0YXJnZXRzKVxuICB0YXJnZXRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgaWYgKCFrZXlzLmluY2x1ZGVzKGVsZW1lbnQuaW5kZXgpKSB7IGtleXMucHVzaChlbGVtZW50LmluZGV4KSB9XG4gICAgQWRkVGFyZ2V0TGlua3NLZXlzKGtleXMsIGVsZW1lbnQuc291cmNlLnRhcmdldExpbmtzKVxuICB9KVxufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuXG5cbi8vIHRlbXBsYXRlIGJhc2VkIG9uIDogaHR0cHM6Ly9kMy1ncmFwaC1nYWxsZXJ5LmNvbS9ncmFwaC9iYXJwbG90X2dyb3VwZWRfYmFzaWNXaWRlLmh0bWxcblxuLyoqXG4gKiBjcmVhdGUgYW5kIHJldHVybiB4IGF4aXMuXG4gKiBAcGFyYW0gZ1xuICogQHBhcmFtIGhlaWdodFxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGFwcGVuZFhBeGlzKGcsaGVpZ2h0KXtcbiAgICBnLmFwcGVuZChcImdcIilcbiAgICAgICAgLmF0dHIoJ2lkJywgJ3hBeGlzQmFyJylcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIGhlaWdodCArIFwiKVwiKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbmQgcmV0dXJuIHkgYXhpc1xuICogQHBhcmFtIGdcbiAqIEByZXR1cm5zIHsqfVxuICovXG5mdW5jdGlvbiBhcHBlbmRZQXhpcyhnKXtcbiAgICBnLmFwcGVuZChcImdcIilcbiAgICAgICAgLmF0dHIoJ2lkJywgJ3lBeGlzQmFyJylcbn1cblxuZnVuY3Rpb24gZHJhd1hBeGlzKHdpZHRoLCBoZWlnaHQpe1xuICAgIGNvbnN0IHggPSBkMy5zY2FsZUJhbmQoKVxuICAgICAgICAuZG9tYWluKFsnQ0FNSU9OJywgJ1NBTlNfQ0FNSU9OJ10pXG4gICAgICAgIC5yYW5nZShbMCwgd2lkdGhdKVxuICAgICAgICAucGFkZGluZyhbMC4yXSlcbiAgICBkMy5zZWxlY3QoJyN4QXhpc0JhcicpLmNhbGwoZDMuYXhpc0JvdHRvbSh4KS50aWNrU2l6ZSgwKSlcbn1cblxuZnVuY3Rpb24gdXBkYXRlWUF4aXMobWluLCBtYXgsIGhlaWdodCl7XG4gICAgY29uc3QgeSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgICAgLmRvbWFpbihbbWluLCBtYXhdKVxuICAgICAgICAucmFuZ2UoWyBoZWlnaHQsIDAgXSlcblxuICAgIC8vIGQzLnNlbGVjdCgnI3lBeGlzQmFyJylcbiAgICAvLyAgICAgLnRyYW5zaXRpb24oKVxuICAgIC8vICAgICAuY2FsbChkMy5heGlzTGVmdCh5KS50aWNrVmFsdWVzKFtdKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRCYXJDaGFydChnLCBkYXRhLCBjb25maWcsIGNvbG9yU2NhbGUpe1xuICAgIGFwcGVuZFhBeGlzKGcsIGNvbmZpZy5oZWlnaHQpXG4gICAgYXBwZW5kWUF4aXMoZylcbiAgICBkcmF3WEF4aXMoY29uZmlnLndpZHRoKVxuICAgIGcuYXBwZW5kKCdnJykuYXR0cignaWQnLCAncmVjdDEnKVxuICAgIGcuYXBwZW5kKCdnJykuYXR0cignaWQnLCAncmVjdDInKVxuICAgIGluaXRCYXJBbGwoZywgZGF0YSwgY29uZmlnLCBjb2xvclNjYWxlKVxuICAgIGluaXRCYXJHcmF2ZU1vcnRlbChnLCBkYXRhLCBjb25maWcsIGNvbG9yU2NhbGUpXG5cbn1cblxuXG5mdW5jdGlvbiBpbml0QmFyQWxsKGcsIGRhdGEsIGNvbmZpZywgY29sb3JTY2FsZSl7XG4gICAgY29uc3Qgc3ViZ3JvdXBzID0gZGF0YS5jb2x1bW5zLnNsaWNlKDEpXG5cbiAgICB2YXIgeSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgICAgLmRvbWFpbihbMCwgMTAwXSlcbiAgICAgICAgLnJhbmdlKFsgMCwgLWNvbmZpZy5oZWlnaHRdKTtcblxuXG4gICAgdmFyIHggPSBkMy5zY2FsZUJhbmQoKVxuICAgICAgICAuZG9tYWluKFsnQ0FNSU9OJywgJ1NBTlNfQ0FNSU9OJ10pXG4gICAgICAgIC5yYW5nZShbMCwgY29uZmlnLndpZHRoXSlcbiAgICAgICAgLnBhZGRpbmcoWzAuMl0pXG5cbiAgICB2YXIgc3RhY2tlZERhdGEgPSBkMy5zdGFjaygpXG4gICAgICAgIC5rZXlzKHN1Ymdyb3VwcylcbiAgICAgICAgKGRhdGEpXG5cbiAgICBkMy5zZWxlY3QoJyNyZWN0MScpXG4gICAgICAgIC5zZWxlY3RBbGwoXCJnXCIpXG4gICAgICAgIC8vIEVudGVyIGluIHRoZSBzdGFjayBkYXRhID0gbG9vcCBrZXkgcGVyIGtleSA9IGdyb3VwIHBlciBncm91cFxuICAgICAgICAuZGF0YShzdGFja2VkRGF0YSlcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgY29uZmlnLmhlaWdodCArIFwiKVwiKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY29sb3JTY2FsZShkLmtleSk7IH0pXG4gICAgICAgIC5zZWxlY3RBbGwoXCJyZWN0XCIpXG4gICAgICAgIC8vIGVudGVyIGEgc2Vjb25kIHRpbWUgPSBsb29wIHN1Ymdyb3VwIHBlciBzdWJncm91cCB0byBhZGQgYWxsIHJlY3RhbmdsZXNcbiAgICAgICAgLmRhdGEoZnVuY3Rpb24oZCkgeyByZXR1cm4gZH0pXG4gICAgICAgIC5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHgoZC5kYXRhLlRZUEVfVkVISUNVTEUpOyB9KVxuICAgICAgICAuYXR0cihcIndpZHRoXCIseC5iYW5kd2lkdGgoKSlcbiAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMC45KVxuXG5cblxufVxuXG5mdW5jdGlvbiBpbml0QmFyR3JhdmVNb3J0ZWwoZywgZGF0YSwgY29uZmlnLCBjb2xvclNjYWxlKXtcbiAgICBjb25zdCBzdWJncm91cHMgPSBkYXRhLmNvbHVtbnMuc2xpY2UoMilcblxuICAgIHZhciB5ID0gZDMuc2NhbGVMaW5lYXIoKVxuICAgICAgICAuZG9tYWluKFswLCAxXSlcbiAgICAgICAgLnJhbmdlKFtjb25maWcuaGVpZ2h0LCAwXSk7XG5cblxuICAgIHZhciB4ID0gZDMuc2NhbGVCYW5kKClcbiAgICAgICAgLmRvbWFpbihbJ0NBTUlPTicsICdTQU5TX0NBTUlPTiddKVxuICAgICAgICAucmFuZ2UoWzAsIGNvbmZpZy53aWR0aF0pXG4gICAgICAgIC5wYWRkaW5nKFswLjJdKVxuXG4gICAgdmFyIHN0YWNrZWREYXRhID0gZDMuc3RhY2soKVxuICAgICAgICAua2V5cyhzdWJncm91cHMpXG4gICAgICAgIChkYXRhKVxuXG4gICAgY29uc3QgcmVjdCA9IGQzLnNlbGVjdCgnI3JlY3QyJylcbiAgICAgICAgLnNlbGVjdEFsbChcImdcIilcbiAgICAgICAgLy8gRW50ZXIgaW4gdGhlIHN0YWNrIGRhdGEgPSBsb29wIGtleSBwZXIga2V5ID0gZ3JvdXAgcGVyIGdyb3VwXG4gICAgICAgIC5kYXRhKHN0YWNrZWREYXRhKVxuICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjb2xvclNjYWxlKGQua2V5KTsgfSlcbiAgICAgICAgLnNlbGVjdEFsbChcInJlY3RcIilcbiAgICAgICAgLy8gZW50ZXIgYSBzZWNvbmQgdGltZSA9IGxvb3Agc3ViZ3JvdXAgcGVyIHN1Ymdyb3VwIHRvIGFkZCBhbGwgcmVjdGFuZ2xlc1xuICAgICAgICAuZGF0YShmdW5jdGlvbihkKSB7IHJldHVybiBkfSlcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4geChkLmRhdGEuVFlQRV9WRUhJQ1VMRSk7IH0pXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIix4LmJhbmR3aWR0aCgpKVxuICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAwLjkpXG59XG5cblxuZnVuY3Rpb24gc2hvd0JhckNoYXJ0QWxsKGcsIGRhdGEsIGNvbmZpZywgY29sb3JTY2FsZSl7XG4gICAgY29uc3Qgc3ViZ3JvdXBzID0gZGF0YS5jb2x1bW5zLnNsaWNlKDEpXG5cbiAgICB2YXIgeSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgICAgLmRvbWFpbihbMCwgMTAwXSlcbiAgICAgICAgLnJhbmdlKFsgMCwgLWNvbmZpZy5oZWlnaHRdKTtcblxuICAgIHZhciB4ID0gZDMuc2NhbGVCYW5kKClcbiAgICAgICAgLmRvbWFpbihbJ0NBTUlPTicsICdTQU5TX0NBTUlPTiddKVxuICAgICAgICAucmFuZ2UoWzAsIGNvbmZpZy53aWR0aF0pXG4gICAgICAgIC5wYWRkaW5nKFswLjJdKVxuXG4gICAgdmFyIHN0YWNrZWREYXRhID0gZDMuc3RhY2soKVxuICAgICAgICAua2V5cyhzdWJncm91cHMpXG4gICAgICAgIChkYXRhKVxuXG4gICAgZDMuc2VsZWN0KCcjcmVjdDEnKVxuICAgICAgICAuc2VsZWN0QWxsKCdyZWN0JylcbiAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHgoZC5kYXRhLlRZUEVfVkVISUNVTEUpOyB9KVxuICAgICAgICAuYXR0cihcIndpZHRoXCIseC5iYW5kd2lkdGgoKSlcbiAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMSlcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZGVsYXkoMClcbiAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHkoZFsxXSkgfSlcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkge3JldHVybiB5KGRbMF0pIC0geShkWzFdKX0pXG5cblxufVxuXG5mdW5jdGlvbiBoaWRlQmFyQ2hhcnRBbGwoZywgZGF0YSwgY29uZmlnLCBjb2xvclNjYWxlKXtcbiAgICBjb25zdCBzdWJncm91cHMgPSBkYXRhLmNvbHVtbnMuc2xpY2UoMSlcblxuICAgIHZhciB5ID0gZDMuc2NhbGVMaW5lYXIoKVxuICAgICAgICAuZG9tYWluKFswLCAxMDBdKVxuICAgICAgICAucmFuZ2UoWyAwLCAtY29uZmlnLmhlaWdodF0pO1xuXG5cbiAgICB2YXIgeCA9IGQzLnNjYWxlQmFuZCgpXG4gICAgICAgIC5kb21haW4oWydDQU1JT04nLCAnU0FOU19DQU1JT04nXSlcbiAgICAgICAgLnJhbmdlKFswLCBjb25maWcud2lkdGhdKVxuICAgICAgICAucGFkZGluZyhbMC4yXSlcblxuICAgIHZhciBzdGFja2VkRGF0YSA9IGQzLnN0YWNrKClcbiAgICAgICAgLmtleXMoc3ViZ3JvdXBzKVxuICAgICAgICAoZGF0YSlcblxuICAgIGQzLnNlbGVjdCgnI3JlY3QxJylcbiAgICAgICAgLnNlbGVjdEFsbCgncmVjdCcpXG4gICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB4KGQuZGF0YS5UWVBFX1ZFSElDVUxFKTsgfSlcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLHguYmFuZHdpZHRoKCkpXG4gICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDApXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmRlbGF5KDUwMClcbiAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIDAgfSlcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkge3JldHVybiAwfSlcbn1cblxuZnVuY3Rpb24gc2hvd0dyYXZlTW9ydGVsKGcsIGRhdGEsIGNvbmZpZywgY29sb3JTY2FsZSl7XG4gICAgY29uc3Qgc3ViZ3JvdXBzID0gZGF0YS5jb2x1bW5zLnNsaWNlKDIpXG5cbiAgICB2YXIgeSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgICAgLmRvbWFpbihbMCwgMV0pXG4gICAgICAgIC5yYW5nZShbY29uZmlnLmhlaWdodCwgMF0pO1xuXG5cbiAgICB2YXIgeCA9IGQzLnNjYWxlQmFuZCgpXG4gICAgICAgIC5kb21haW4oWydDQU1JT04nLCAnU0FOU19DQU1JT04nXSlcbiAgICAgICAgLnJhbmdlKFswLCBjb25maWcud2lkdGhdKVxuICAgICAgICAucGFkZGluZyhbMC4yXSlcblxuICAgIHZhciBzdGFja2VkRGF0YSA9IGQzLnN0YWNrKClcbiAgICAgICAgLmtleXMoc3ViZ3JvdXBzKVxuICAgICAgICAoZGF0YSlcblxuICAgIGNvbnN0IHJlY3QgPSBkMy5zZWxlY3QoJyNyZWN0MicpXG4gICAgICAgIC5zZWxlY3RBbGwoJ3JlY3QnKVxuICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4geChkLmRhdGEuVFlQRV9WRUhJQ1VMRSk7IH0pXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIix4LmJhbmR3aWR0aCgpKVxuICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAxKVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kZWxheSgwKVxuICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4geShkWzFdKSB9KVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBmdW5jdGlvbihkKSB7cmV0dXJuIHkoZFswXSkgLSB5KGRbMV0pfSlcblxufVxuXG5mdW5jdGlvbiBoaWRlR3JhdmVNb3J0ZWwoZywgZGF0YSwgY29uZmlnLCBjb2xvclNjYWxlKXtcbiAgICBjb25zdCBzdWJncm91cHMgPSBkYXRhLmNvbHVtbnMuc2xpY2UoMilcblxuICAgIHZhciB5ID0gZDMuc2NhbGVMaW5lYXIoKVxuICAgICAgICAuZG9tYWluKFswLCAxXSlcbiAgICAgICAgLnJhbmdlKFtjb25maWcuaGVpZ2h0LCAwXSk7XG5cblxuICAgIHZhciB4ID0gZDMuc2NhbGVCYW5kKClcbiAgICAgICAgLmRvbWFpbihbJ0NBTUlPTicsICdTQU5TX0NBTUlPTiddKVxuICAgICAgICAucmFuZ2UoWzAsIGNvbmZpZy53aWR0aF0pXG4gICAgICAgIC5wYWRkaW5nKFswLjJdKVxuXG4gICAgdmFyIHN0YWNrZWREYXRhID0gZDMuc3RhY2soKVxuICAgICAgICAua2V5cyhzdWJncm91cHMpXG4gICAgICAgIChkYXRhKVxuXG4gICAgZDMuc2VsZWN0KCcjcmVjdDInKVxuICAgICAgICAuc2VsZWN0QWxsKCdyZWN0JylcbiAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHgoZC5kYXRhLlRZUEVfVkVISUNVTEUpOyB9KVxuICAgICAgICAuYXR0cihcIndpZHRoXCIseC5iYW5kd2lkdGgoKSlcbiAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMClcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZGVsYXkoNTAwKVxuICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gMCB9KVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBmdW5jdGlvbihkKSB7cmV0dXJuIDB9KVxuXG5cblxuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGVwMUJhckNoYXJ0KGcsIGRhdGEsIGNvbmZpZywgY29sb3Ipe1xuICAgIGhpZGVHcmF2ZU1vcnRlbChnLCBkYXRhLCBjb25maWcsIGNvbG9yKVxuICAgIHNob3dCYXJDaGFydEFsbChnLCBkYXRhLCBjb25maWcsIGNvbG9yKVxuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGVwMkJhckNoYXJ0KGcsIGRhdGEsIGNvbmZpZywgY29sb3Ipe1xuICAgIGhpZGVCYXJDaGFydEFsbChnLCBkYXRhLCBjb25maWcsIGNvbG9yKVxuICAgIHNob3dHcmF2ZU1vcnRlbChnLCBkYXRhLCBjb25maWcsIGNvbG9yKVxufVxuXG4iLCIvKipcbiAqIHZpei5qc1xuICogPT09PT09PVxuICogRmlsZSB1c2VkIHRvIGRlZmluZSB0aGUgdmlzdWFsaXphdGlvbiBzZWN0aW9uLlxuICovXG5cbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmltcG9ydCAqIGFzIG1hcCBmcm9tIFwiLi9tYXAuanNcIjtcbmltcG9ydCB7XG4gIGdldFNjYWxlWCxcbiAgZ2V0U2NhbGVZLFxuICBkcmF3TGluZUNoYXJ0QXhpcyxcbiAgcHJvY2Vzc0RhdGEsXG4gIHN0ZXAxTGluZUNoYXJ0LFxuICBpbml0TGluZSwgc3RlcDJMaW5lQ2hhcnQsIHN0ZXAzTGluZUNoYXJ0LCBzdGVwNExpbmVDaGFydCwgaW5pdEFubm90YXRpb25cbn0gZnJvbSBcIi4vbGluZWNoYXJ0XCI7XG5pbXBvcnQge0RyYXdQYXJhbGxlbGVTZXQsIGluaXRpYWxpemVQYXJhbGxlU2V0LCBzZWxlY3ROb2RlfSBmcm9tIFwiLi9wYXJhbGxlbGVTZXRDaGFydFwiXG5pbXBvcnQge2luaXRCYXJDaGFydCwgc3RlcDFCYXJDaGFydCwgc3RlcDJCYXJDaGFydH0gZnJvbSBcIi4vYmFyQ2hhcnRcIjtcblxuXG5jb25zdCBjb25maWcgPSB7XG4gIHdpZHRoOiAxMDAwLFxuICBoZWlnaHQ6IDUwMCxcbiAgbWFyZ2luOiB7XG4gICAgdG9wOiAxMDAsXG4gICAgcmlnaHQ6IDEwMCxcbiAgICBib3R0b206IDEwMCxcbiAgICBsZWZ0OiAxMDBcbiAgfVxufVxuY29uc3QgZnVsbFdpZHRoID0gY29uZmlnLm1hcmdpbi5sZWZ0ICsgY29uZmlnLndpZHRoICsgY29uZmlnLm1hcmdpbi5yaWdodDtcbmNvbnN0IGZ1bGxIZWlnaHQgPSBjb25maWcubWFyZ2luLnRvcCArIGNvbmZpZy5oZWlnaHQgKyBjb25maWcubWFyZ2luLmJvdHRvbTtcblxuY29uc3QgdmlzQ29udGFpbmVyMSA9IGQzLnNlbGVjdCgnI3Zpel9saW5lX2NoYXJ0Jyk7XG5jb25zdCBzdmcxID0gdmlzQ29udGFpbmVyMS5hcHBlbmQoJ3N2ZycpXG4gIC5hdHRyKCd2aWV3Qm94JywgYDAgMCAke2Z1bGxXaWR0aH0gJHtmdWxsSGVpZ2h0fWApXG4gIC5hdHRyKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgJ3hNaWRZTWlkJyk7XG5jb25zdCBnMSA9IHN2ZzEuYXBwZW5kKCdnJylcbiAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHtjb25maWcubWFyZ2luLmxlZnR9LCAke2NvbmZpZy5tYXJnaW4udG9wfSlgKTtcblxuXG5jb25zdCB2aXNDb250YWluZXIzID0gZDMuc2VsZWN0KCcjdml6X2Jhcl9jaGFydCcpO1xuY29uc3Qgc3ZnMyA9IHZpc0NvbnRhaW5lcjMuYXBwZW5kKCdzdmcnKVxuICAgIC5hdHRyKCd2aWV3Qm94JywgYDAgMCAke2Z1bGxXaWR0aH0gJHtmdWxsSGVpZ2h0fWApXG4gICAgLmF0dHIoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pZFlNaWQnKTtcbmNvbnN0IGczID0gc3ZnMy5hcHBlbmQoJ2cnKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7Y29uZmlnLm1hcmdpbi5sZWZ0fSwgJHtjb25maWcubWFyZ2luLnRvcH0pYCk7XG5cblxuY29uc3QgdmlzQ29udGFpbmVyMiA9IGQzLnNlbGVjdCgnI3BzZXQxJyk7XG5jb25zdCBzdmcyID0gdmlzQ29udGFpbmVyMi5hcHBlbmQoJ3N2ZycpXG4gICAgLmF0dHIoJ3ZpZXdCb3gnLCBgMCAwICR7MjQwMH0gJHsxNDAwfWApXG4gICAgLmF0dHIoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pZFlNaWQnKTtcbmNvbnN0IGcyID0gc3ZnMi5hcHBlbmQoJ2cnKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7Y29uZmlnLm1hcmdpbi5sZWZ0fSwgJHtjb25maWcubWFyZ2luLnRvcH0pYCk7XG5cbi8vIGNvbnN0IHZpc0NvbnRhaW5lcjQgPSBkMy5zZWxlY3QoJyNwc2V0MicpO1xuLy8gY29uc3Qgc3ZnNCA9IHZpc0NvbnRhaW5lcjQuYXBwZW5kKCdzdmcnKVxuLy8gICAgIC5hdHRyKCd2aWV3Qm94JywgYDAgMCAkezI0MDB9ICR7MTQwMH1gKVxuLy8gICAgIC5hdHRyKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgJ3hNaWRZTWlkJyk7XG4vLyBjb25zdCBnNCA9IHN2ZzQuYXBwZW5kKCdnJylcbi8vICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke2NvbmZpZy5tYXJnaW4ubGVmdH0sICR7Y29uZmlnLm1hcmdpbi50b3B9KWApO1xuXG5jb25zdCB2aXNDb250YWluZXI1ID0gZDMuc2VsZWN0KCcjcHNldDMnKTtcbmNvbnN0IHN2ZzUgPSB2aXNDb250YWluZXI1LmFwcGVuZCgnc3ZnJylcbiAgICAuYXR0cigndmlld0JveCcsIGAwIDAgJHsyNDAwfSAkezE0MDB9YClcbiAgICAuYXR0cigncHJlc2VydmVBc3BlY3RSYXRpbycsICd4TWlkWU1pZCcpO1xuY29uc3QgZzUgPSBzdmc1LmFwcGVuZCgnZycpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHtjb25maWcubWFyZ2luLmxlZnR9LCAke2NvbmZpZy5tYXJnaW4udG9wfSlgKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gIGxldCBwc2V0MSA9IGF3YWl0IGluaXRpYWxpemVQYXJhbGxlU2V0KCcuL2RhdGEvcHNldF9lbnZfcm91dGVfdml0LmNzdicsICcjMmM0YWFkJyk7XG4gIERyYXdQYXJhbGxlbGVTZXQoZzIsIDEwMDAsIDIwMDAsIGNvbmZpZy5tYXJnaW4sIHBzZXQxKTtcbiAgLy8gbGV0IHBzZXQyID0gYXdhaXQgaW5pdGlhbGl6ZVBhcmFsbGVTZXQoJy4vZGF0YS9wc2V0X2NvbmZfYXNwZWN0LmNzdicsICcjODVhYjc3Jyk7XG4gIC8vIERyYXdQYXJhbGxlbGVTZXQoZzQsIDEwMDAsIDIwMDAsIGNvbmZpZy5tYXJnaW4sIHBzZXQyKTtcbiAgbGV0IHBzZXQzID0gYXdhaXQgaW5pdGlhbGl6ZVBhcmFsbGVTZXQoJy4vZGF0YS9wc2V0X2NvbmRfZXh0LmNzdicsICcjZjY4YzFjJyk7XG4gIERyYXdQYXJhbGxlbGVTZXQoZzUsIDEwMDAsIDIwMDAsIGNvbmZpZy5tYXJnaW4sIHBzZXQzKTtcblxuICBjb25zdCBwc2V0MUNvbG9yID0gJyMyYzRhYWQnXG4gIGNvbnN0IHBzZXQzQ29sb3IgPSAnI2Y2OGMxYydcblxuXG4gIGxldCBsaW5lY2hhcnREYXRhQWxsID0gYXdhaXQgZDMuY3N2KCcuL2RhdGEvcm9sbGluZzdfdml6MV9hbGxfdmVoaWN1bGVfZGF0ZS5jc3YnKTtcbiAgbGV0IGxpbmVjaGFydERhdGFUeXBlID0gYXdhaXQgZDMuY3N2KCcuL2RhdGEvcm9sbGluZzdfdml6Ml9hY2NfYnlfdHlwZV9kYXRlLmNzdicpO1xuICBsZXQgYmFyY2hhcnREYXRhID0gYXdhaXQgZDMuY3N2KCcuL2RhdGEvc3RhY2tiYXJfcG91cmNlbnRhZ2UuY3N2JylcbiAgLy8gYmFyY2hhcnREYXRhID0gYmFyY2hhcnREYXRhLm1hcChmdW5jdGlvbiAoZCkgeyByZXR1cm4ge2tleTpkLlR5cGUsIGdyb3VwOmQuR3Jhdml0ZSwgdmFsdWU6K2QuY291bnQsIHBvdXJjZW50YWdlOitkLnBvdXJjZW50YWdlfX0pXG5cbiAgdmFyIGNvbG9yU2NhbGVCYXIgPSBkMy5zY2FsZU9yZGluYWwoKVxuICAgICAgLmRvbWFpbihbJ0xFR0VSX01BVEVSSUVMJywgJ0dSQVZFJywnTU9SVEVMJ10pXG4gICAgICAucmFuZ2UoWycjZmZiOGI4JywnI2ZmNDY0NicsJyM5ZjAwMDAnXSlcblxuICBpbml0QmFyQ2hhcnQoZzMsIGJhcmNoYXJ0RGF0YSwgY29uZmlnLCBjb2xvclNjYWxlQmFyKVxuXG4gIG1hcC5idWlsZE1hcCgnbWFwJyk7XG5cbiAgLy8gTGluZSBDaGFydFxuICBsZXQgZGF0YUFsbCwgZGF0YU90aGVyLCBkYXRhQ2FtaW9uXG4gIFtkYXRhQWxsLCBkYXRhT3RoZXIsIGRhdGFDYW1pb25dID0gcHJvY2Vzc0RhdGEobGluZWNoYXJ0RGF0YUFsbCwgbGluZWNoYXJ0RGF0YVR5cGUpXG4gIGNvbnN0IG1pblkgPSAwXG4gIGxldCBbbWF4U2NhbGVZMSwgbWF4U2NhbGVZMl0gPSBbZDMubWF4KGRhdGFBbGwsIGQ9PmQudmFsdWUpLCBkMy5tYXgoZGF0YUNhbWlvbiwgZD0+ZC52YWx1ZSldXG4gIGNvbnN0IGRhdGVzID0gQXJyYXkuZnJvbShuZXcgU2V0KGRhdGFBbGwubWFwKGQgPT4gZC5kYXRlKSkpXG4gIGxldCBbc2NhbGVYLCBzY2FsZVkxLCBzY2FsZVkyXSA9IFtnZXRTY2FsZVgoZGF0ZXMsIGNvbmZpZy53aWR0aCksXG4gICAgZ2V0U2NhbGVZKG1pblksIG1heFNjYWxlWTEsIGNvbmZpZy5oZWlnaHQpLFxuICAgIGdldFNjYWxlWShtaW5ZLCBtYXhTY2FsZVkyLCBjb25maWcuaGVpZ2h0KV1cblxuICAvLyBJbml0IExpbmUgY2hhcnRcbiAgZHJhd0xpbmVDaGFydEF4aXMoZzEsIHNjYWxlWCwgc2NhbGVZMSwgY29uZmlnLndpZHRoLCBjb25maWcuaGVpZ2h0KVxuICBjb25zdCBsaW5lQWxsID0gaW5pdExpbmUoZGF0YUFsbCwgc2NhbGVYLCBzY2FsZVkxLCBnMSwgXCIjMDAwMDAwXCIpXG4gIGNvbnN0IGxpbmVPdGhlciA9IGluaXRMaW5lKGRhdGFPdGhlciwgc2NhbGVYLCBzY2FsZVkxLCBnMSwgXCIjNjU2NTY1XCIpXG4gIGNvbnN0IGxpbmVDYW1pb24gPSBpbml0TGluZShkYXRhQ2FtaW9uLCBzY2FsZVgsIHNjYWxlWTEsIGcxLCBcIiM4ZDA3MmJcIilcbiAgY29uc3QgbGluZUNhbWlvblpvb20gPSBpbml0TGluZShkYXRhQ2FtaW9uLCBzY2FsZVgsIHNjYWxlWTIsIGcxLCBcIiM4ZDA3MmJcIilcblxuICAvLyBJbml0IGFubm90YXRpb25zIGZvciBsaW5lIGNoYXJ0XG4gIGxldCBbYW5ub3RhdGlvbjEsIGFubm90YXRpb24yXSA9IGluaXRBbm5vdGF0aW9uKGcxLCBzY2FsZVgsIHNjYWxlWTEsIHNjYWxlWTIsIGNvbmZpZylcblxuXG5cbiAgcmV0dXJuIFtcbiAgW1xuICAgICgpID0+IHt9LFxuICAgICgpID0+IHt9XG4gIF0sXG4gICAgW1xuICAgICAgKCkgPT4ge3N0ZXAxQmFyQ2hhcnQoZzMsIGJhcmNoYXJ0RGF0YSwgY29uZmlnLCBjb2xvclNjYWxlQmFyKX1cbiAgICAgICxcbiAgICAgICgpID0+IHtzdGVwMkJhckNoYXJ0KGczLCBiYXJjaGFydERhdGEsIGNvbmZpZywgY29sb3JTY2FsZUJhcil9XG4gICAgXSxcbiAgICBbXG4gICAgICAoKSA9PiB7c3RlcDFMaW5lQ2hhcnQobGluZUFsbCwgYW5ub3RhdGlvbjEpfSxcbiAgICAgICgpID0+IHtzdGVwMkxpbmVDaGFydChsaW5lQWxsLCBsaW5lT3RoZXIsIGxpbmVDYW1pb24sIGFubm90YXRpb24xKX0sXG4gICAgICAoKSA9PiB7c3RlcDNMaW5lQ2hhcnQobGluZUFsbCwgbGluZU90aGVyLCBsaW5lQ2FtaW9uLCBhbm5vdGF0aW9uMSwgYW5ub3RhdGlvbjIsIGxpbmVDYW1pb25ab29tLCBzY2FsZVkxKX0sXG4gICAgICAoKSA9PiB7c3RlcDRMaW5lQ2hhcnQobGluZU90aGVyLCBsaW5lQ2FtaW9uLCBzY2FsZVkyLCBsaW5lQ2FtaW9uWm9vbSxhbm5vdGF0aW9uMil9XG4gIF0sXG4gICAgW1xuICAgICAgKCkgPT4ge3NlbGVjdE5vZGUoZzIsIC0xLCBwc2V0MUNvbG9yKX0sXG4gICAgICAoKSA9PiB7c2VsZWN0Tm9kZShnMiwgMiwgcHNldDFDb2xvcil9LFxuICAgICAgKCkgPT4ge3NlbGVjdE5vZGUoZzIsIDMsIHBzZXQxQ29sb3IpfSxcbiAgICAgICgpID0+IHtzZWxlY3ROb2RlKGcyLCAzLCBwc2V0MUNvbG9yKX1cbiAgICBdLFxuICAgIFtcbiAgICAgICgpID0+IHtcbiAgICAgICAgICBzZWxlY3ROb2RlKGc1LCA0LHBzZXQzQ29sb3IpfSxcbiAgICAgICgpID0+IHtzZWxlY3ROb2RlKGc1LCAxLCBwc2V0M0NvbG9yKX1cbiAgICBdXG4gIF1cbn1cblxuIiwiLyoqXG4gKiBzY3JvbGxlci5qc1xuICogPT09PT09PT09PT1cbiAqIERlZmluZXMgdGhlIGxvZ2ljIHVzZWQgYnkgdGhlIHNjcm9sbGVyLiBUaGlzIHNjcmlwdCBkb2VzIG5vdCBuZWVkIGV4dGVybmFsIGRlcGVuZGVuY2llcyBhbmQgdXNlcyBuYXRpdmUgZnVuY3Rpb25zXG4gKiBvZiB0aGUgYnJvd3Nlci5cbiAqXG4gKiAvIVxcIFBMRUFTRSwgRE8gTk9UIE1PRElGWSBUSElTIEZJTEUuXG4gKlxuICogQGF1dGhvciBBbnRvaW5lIELDqWxhbmQgPGFiZWxhbmRAbGVkZXZvaXIuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZWZpbmVzIGEgc3RlcCBhc3NvY2lhdGVkIHdpdGggYSBzcGVjaWZpYyB2aXN1YWxpemF0aW9uLiBBIHN0ZXAgaXMgYWN0aXZhdGVkIG9yIGRlYWN0aXZhdGVkIGJhc2VkIG9uIHRoZSBzY3JvbGxcbiAqIHBvc2l0aW9uLiBUaGlzIGNsYXNzIGlzIHVzZWQgYnkgdGhlIHNjcm9sbGVyIGZ1bmN0aW9uLlxuICovXG5jbGFzcyBTY3JvbGxlclN0ZXAge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgU2Nyb2xsZXJTdGVwLlxuICAgKlxuICAgKiBAcGFyYW0gZWwgICAgICAgICAgVGhlIG5hdGl2ZSBlbGVtZW50IHRoYXQgcmVwcmVzZW50cyB0aGUgc3RlcCBpbiB0aGUgSFRNTCBkb2N1bWVudC5cbiAgICogQHBhcmFtIGluZGV4ICAgICAgIFRoZSBpbmRleCBvZiB0aGUgc3RlcC5cbiAgICogQHBhcmFtIGNhbGxiYWNrICAgIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIHN0ZXAgaXMgYWN0aXZhdGUuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbCwgaW5kZXgsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5lbCA9IGVsO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5faXNBY3RpdmF0ZSA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFjdGl2YXRlcyB0aGUgY3VycmVudCBzdGVwLlxuICAgKlxuICAgKiBAcGFyYW0gc2Nyb2xsRGlyZWN0aW9uICAgVGhlIGN1cnJlbnQgc2Nyb2xsIGRpcmVjdGlvbi5cbiAgICovXG4gIGFjdGl2YXRlKHNjcm9sbERpcmVjdGlvbikge1xuICAgIGlmICh0aGlzLl9pc0FjdGl2YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2lzQWN0aXZhdGUgPSB0cnVlO1xuICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgdGhpcy5jYWxsYmFjayhzY3JvbGxEaXJlY3Rpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlYWN0aXZhdGVzIHRoZSBjdXJyZW50IHN0ZXAuXG4gICAqL1xuICBkZWFjdGl2YXRlKCkge1xuICAgIGlmICghdGhpcy5faXNBY3RpdmF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9pc0FjdGl2YXRlID0gZmFsc2U7XG4gICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmluZXMgdGhlIHNjcm9sbCBkaXJlY3Rpb25zLlxuICpcbiAqIEB0eXBlIHt7dXA6IHN0cmluZywgZG93bjogc3RyaW5nfX1cbiAqL1xuZXhwb3J0IGNvbnN0IHNjcm9sbERpcmVjdGlvbnMgPSB7XG4gIHVwOiAndXAnLFxuICBkb3duOiAnZG93bidcbn07XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgc2Nyb2xsZXIgdG8gdXNlIHdpdGggdGhlIExlIERldm9pcidzIHNjcm9sbHl0ZWxsaW5nIGFydGljbGVzLiBQbGVhc2Ugc2VlIFwiUkVBRE1FLm1kXCJcbiAqIHRvIGtub3cgaG93IHRvIHVzZSBpdC5cbiAqXG4gKiAvIVxcIEJlIHN1cmUgdG8gdXNlIHRoZSBnb29kIENTUyBjbGFzcyBuYW1lcyBpbiB5b3VyIEhUTUwgZmlsZSBiZWZvcmUgdG8gdXNlIHRoZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gY2FsbGJhY2tzICAgQSBtdWx0aS1kaW1lbnNpb25hbCBhcnJheSBvZiBjYWxsYmFja3MgdG8gdXNlIHdpdGggZWFjaCBzdGVwLlxuICogQHJldHVybnMgeyp9ICAgICAgIFRoZSBpbnN0YW5jZSBvZiB0aGUgc2Nyb2xsZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxlcihjYWxsYmFja3MpIHtcbiAgbGV0IF9vZmZzZXRUb3AgPSAwO1xuICBsZXQgX29mZnNldEJvdHRvbSA9IDA7XG5cbiAgbGV0IGlubmVySGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICBsZXQgaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuICBsZXQgbGFzdFNjcm9sbCA9IDA7XG4gIGxldCBzdGVwcyA9IFtdO1xuICBsZXQgdml6ID0gW107XG4gIGxldCB2aXNpYmxlU3RlcHMgPSBbXTtcblxuICBjb25zdCBhcnRpY2xlUmVtaW5kZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXJ0aWNsZS1yZW1pbmRlcicpO1xuICBjb25zdCBzY3JvbGxQcm9ncmVzcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWRlciA+IC5wcm9ncmVzcycpO1xuICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnRyby1zZWN0aW9uIGgxJyk7XG5cbiAgY29uc3Qgdml6U2VjdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudml6LXNlY3Rpb24nKTtcbiAgY29uc29sZS5sb2coY2FsbGJhY2tzKVxuICBjb25zb2xlLmxvZyhjYWxsYmFja3MubGVuZ3RoKVxuXG4gIGlmICh2aXpTZWN0aW9ucy5sZW5ndGggIT09IGNhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBudW1iZXIgb2Ygdml6IHNlY3Rpb25zICgke3ZpelNlY3Rpb25zLmxlbmd0aH0pIG1pc21hdGNoIHdpdGggdGhlIGxlbmd0aCBvZiB0aGUgZmlyc3QgYCArXG4gICAgICBgZGltZW5zaW9uIG9mIHRoZSBjYWxsYmFja3MgYXJyYXkgKCR7Y2FsbGJhY2tzLmxlbmd0aH0pLiBQbGVhc2UsIGJlIHN1cmUgdGhhdCB0aGUgdHdvIGVsZW1lbnRzIGAgK1xuICAgICAgYGhhdmUgdGhlIHNhbWUgc2l6ZS5gKTtcbiAgfVxuICB2aXpTZWN0aW9ucy5mb3JFYWNoKCh2aXpTZWN0aW9uLCBpKSA9PiB7XG4gICAgY29uc3Qgc2VjdGlvbnMgPSBbLi4udml6U2VjdGlvbi5xdWVyeVNlbGVjdG9yQWxsKCdzZWN0aW9uJyldO1xuICAgIGlmIChzZWN0aW9ucy5sZW5ndGggIT09IGNhbGxiYWNrc1tpXS5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIG51bWJlciBvZiBzdGVwcyAoJHtzZWN0aW9ucy5sZW5ndGh9KSBpbiB0aGUgdml6IHNlY3Rpb24gIyR7aSArIDF9IG1pc21hdGNoIHdpdGggdGhlIGAgK1xuICAgICAgICBgbnVtYmVyIG9mIGNhbGxiYWNrcyBzcGVjaWZpZWQgKCR7Y2FsbGJhY2tzW2ldLmxlbmd0aH0pIGF0IHRoZSBpbmRleCBcIiR7aX1cIi4gUGxlYXNlLCBiZSBzdXJlIHRoYXQgdGhlIHR3byBgICtcbiAgICAgICAgYGVsZW1lbnRzIGhhdmUgdGhlIHNhbWUgc2l6ZS5gKTtcbiAgICB9XG4gICAgc3RlcHMgPSBzdGVwcy5jb25jYXQoc2VjdGlvbnMubWFwKChlLCBqKSA9PiBuZXcgU2Nyb2xsZXJTdGVwKGUsIGAke2l9LSR7an1gLCBjYWxsYmFja3NbaV1bal0pKSk7XG4gICAgdml6ID0gdml6LmNvbmNhdCh2aXosIHZpelNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnZpeiA+IConKSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBkaXNwbGF5IGJhc2VkIG9uIHNjcm9sbGJhciBwb3NpdGlvbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnN0IF91cGRhdGUgPSAoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudFNjcm9sbCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgIHN0ZXBzLmZvckVhY2goc3RlcCA9PiB7XG4gICAgICAvLyBDaGVjayBpZiB0aGUgY3VycmVudCBzdGVwIGlzIGluIHRoZSB2aWV3cG9ydC5cbiAgICAgIGNvbnN0IGJvdW5kaW5nUmVjdCA9IHN0ZXAuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBpZiAoaW5uZXJIZWlnaHQgLSBib3VuZGluZ1JlY3QudG9wIC0gX29mZnNldEJvdHRvbSA+IDBcbiAgICAgICAgJiYgYm91bmRpbmdSZWN0LnRvcCArIGJvdW5kaW5nUmVjdC5oZWlnaHQgLSBfb2Zmc2V0VG9wID4gMCkge1xuICAgICAgICB2aXNpYmxlU3RlcHMucHVzaChzdGVwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ZXAuZGVhY3RpdmF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRGlzcGxheSB0aGUgdGl0bGUgYXMgYSByZW1pbmRlciB3aGVuIHRoZSBtYWluIGFydGljbGUgdGl0bGUgaXMgaGlkZGVuLlxuICAgIGNvbnN0IGlzQXJ0aWNsZVJlbWluZGVyRGlzcGxheWVkID0gdGl0bGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tIDw9IDA7XG4gICAgY29uc3QgaXNBcnRpY2xlUmVtaW5kZXJJc1Zpc2libGUgPSBhcnRpY2xlUmVtaW5kZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCd2aXNpYmxlJyk7XG4gICAgaWYgKGlzQXJ0aWNsZVJlbWluZGVyRGlzcGxheWVkICYmICFpc0FydGljbGVSZW1pbmRlcklzVmlzaWJsZSkge1xuICAgICAgYXJ0aWNsZVJlbWluZGVyLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKVxuICAgIH0gZWxzZSBpZiAoIWlzQXJ0aWNsZVJlbWluZGVyRGlzcGxheWVkICYmIGlzQXJ0aWNsZVJlbWluZGVySXNWaXNpYmxlKSB7XG4gICAgICBhcnRpY2xlUmVtaW5kZXIuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpXG4gICAgfVxuXG4gICAgLy8gRm9yIHRoZSB2aXNpYmxlIHN0ZXBzLCBjaG9vc2UgdGhlIGdvb2Qgb25lIGJhc2VkIG9uIHRoZSBzY3JvbGwgZGlyZWN0aW9uLlxuICAgIHZpc2libGVTdGVwcy5mb3JFYWNoKChzZWN0aW9uLCBpKSA9PiB7XG4gICAgICBpZiAoY3VycmVudFNjcm9sbCA+PSBsYXN0U2Nyb2xsKSB7IC8vIFNjcm9sbCBkb3duICjihpMpXG4gICAgICAgIGlmIChpID09PSB2aXNpYmxlU3RlcHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHNlY3Rpb24uYWN0aXZhdGUoc2Nyb2xsRGlyZWN0aW9ucy5kb3duKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWN0aW9uLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHsgLy8gU2Nyb2xsIHVwICjihpEpXG4gICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgc2VjdGlvbi5hY3RpdmF0ZShzY3JvbGxEaXJlY3Rpb25zLnVwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWN0aW9uLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIF91cGRhdGVTY3JvbGxQcm9ncmVzcygpO1xuXG4gICAgLy8gUmVzZXQgdGhlIHZhcmlhYmxlcyBmb3IgdGhlIG5leHQgZnVuY3Rpb24gY2FsbC5cbiAgICB2aXNpYmxlU3RlcHMgPSBbXTtcbiAgICBsYXN0U2Nyb2xsID0gY3VycmVudFNjcm9sbDtcbiAgfTtcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgc2Nyb2xsIHByb2dyZXNzaW9uIGluZGljYXRvci5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnN0IF91cGRhdGVTY3JvbGxQcm9ncmVzcyA9ICgpID0+IHtcbiAgICBjb25zdCB3aW5TY3JvbGwgPSBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgIGNvbnN0IGhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQgLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICAgIGNvbnN0IHNjcm9sbGVkID0gKHdpblNjcm9sbCAvIGhlaWdodCkgKiAxMDA7XG4gICAgc2Nyb2xsUHJvZ3Jlc3Muc3R5bGUud2lkdGggPSBzY3JvbGxlZCArICclJztcbiAgfTtcblxuICBjb25zdCBwdWJsaWNJbnRlcmZhY2UgPSB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIHNjcm9sbGVyLiBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gY2FuIGJlIG9ubHkgY2FsbGVkIG9uY2UuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIGluc3RhbmNlIG9mIHRoZSBzY3JvbGxlci5cbiAgICAgKi9cbiAgICBpbml0aWFsaXplOiAoKSA9PiB7XG4gICAgICBpZiAoaXNJbml0aWFsaXplZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBzY3JvbGxlciBpcyBhbHJlYWR5IGluaXRpYWxpemVkLicpO1xuICAgICAgfVxuICAgICAgaXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgX3VwZGF0ZSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4ge1xuICAgICAgICBpbm5lckhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgX3VwZGF0ZVNjcm9sbFByb2dyZXNzKCk7XG4gICAgICB9KTtcbiAgICAgIGlmICgod2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3ApID4gMCkge1xuICAgICAgICBfdXBkYXRlKCk7XG4gICAgICB9XG4gICAgICBfdXBkYXRlU2Nyb2xsUHJvZ3Jlc3MoKTtcbiAgICAgIHJldHVybiBwdWJsaWNJbnRlcmZhY2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgdG9wIG9mZnNldCB0byB1c2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2Zmc2V0VG9wXG4gICAgICogQHJldHVybnMgeyp9IFRoZSBpbnN0YW5jZSBvZiB0aGUgc2Nyb2xsZXIuXG4gICAgICovXG4gICAgb2Zmc2V0VG9wOiBvZmZzZXRUb3AgPT4ge1xuICAgICAgaWYgKG9mZnNldFRvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBfb2Zmc2V0VG9wO1xuICAgICAgfVxuICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG9mZnNldFRvcCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgb2Zmc2V0IG11c3QgYmUgYW4gaW50ZWdlciBudW1iZXIuJyk7XG4gICAgICB9XG4gICAgICBfb2Zmc2V0VG9wID0gb2Zmc2V0VG9wO1xuICAgICAgcmV0dXJuIHB1YmxpY0ludGVyZmFjZTtcbiAgICB9ICxcblxuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYm90dG9tIG9mZnNldCB0byB1c2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2Zmc2V0Qm90dG9tXG4gICAgICogQHJldHVybnMgeyp9IFRoZSBpbnN0YW5jZSBvZiB0aGUgc2Nyb2xsZXIuXG4gICAgICovXG4gICAgb2Zmc2V0Qm90dG9tOiBvZmZzZXRCb3R0b20gPT4ge1xuICAgICAgaWYgKG9mZnNldEJvdHRvbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBfb2Zmc2V0Qm90dG9tO1xuICAgICAgfVxuICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG9mZnNldEJvdHRvbSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgb2Zmc2V0IG11c3QgYmUgYW4gaW50ZWdlciBudW1iZXIuJyk7XG4gICAgICB9XG4gICAgICBfb2Zmc2V0Qm90dG9tID0gb2Zmc2V0Qm90dG9tO1xuICAgICAgcmV0dXJuIHB1YmxpY0ludGVyZmFjZTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBwdWJsaWNJbnRlcmZhY2U7XG59XG4iLCIvKipcbiAqIGFwcC5qc1xuICogPT09PT09XG4gKiBNYWluIGZpbGUgb2YgdGhlIGFwcGxpY2F0aW9uLiBUaGlzIGZpbGUgaXMgdXNlZCB0byBpbml0aWFsaXplIHRoZSBzY3JvbGxlciBhbmQgaW1wb3J0cyB0aGUgdmlzdWFsaXphdGlvbnMgdXNlZC5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCAnLi4vYXNzZXRzL3N0eWxlcy9zdHlsZS5zY3NzJztcblxuY29uc3QgaGVhZGVySGVpZ2h0ID0gNDA7XG5pbXBvcnQgc3RpY2t5Qml0cyBmcm9tICdzdGlja3liaXRzJ1xuXG5sZXQgZWxlbWVudHMgPSBbXTtcblsnLnZpeicsICcuZnVsbC1wYWdlLXNlY3Rpb24gPiBpbWcnLCAnLmZ1bGwtcGFnZS1zZWN0aW9uID4gdmlkZW8nXS5mb3JFYWNoKHNlbGVjdG9yID0+IHtcbiAgZWxlbWVudHMgPSBlbGVtZW50cy5jb25jYXQoQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSkpO1xufSk7XG5zdGlja3lCaXRzKGVsZW1lbnRzLCB7IHN0aWNreUJpdFN0aWNreU9mZnNldDogaGVhZGVySGVpZ2h0IH0pO1xuXG5pbXBvcnQgeyBpbml0aWFsaXplIGFzIHYxIH0gZnJvbSAnLi92aXonO1xuaW1wb3J0IHsgc2Nyb2xsZXIgfSBmcm9tICcuL3Njcm9sbGVyJztcblxuUHJvbWlzZS5hbGwoW3YxKCldKS50aGVuKChbY2FsbGJhY2tzVjFdKSA9PiAge1xuICBzY3JvbGxlcihjYWxsYmFja3NWMSlcbiAgICAub2Zmc2V0VG9wKGhlYWRlckhlaWdodClcbiAgICAub2Zmc2V0Qm90dG9tKDApXG4gICAgLmluaXRpYWxpemUoKTtcbn0pO1xuIl0sIm5hbWVzIjpbImJ1aWxkTWFwIiwiZGl2X2lkIiwiZDMiLCJ0aGVuIiwiZGF0YSIsImhleGFnb25zIiwibWF4QWNjIiwiaSIsImxlbmd0aCIsImRhdGFMYXQiLCJMT0NfTEFUIiwiZGF0YUxvbmciLCJMT0NfTE9ORyIsImhleCIsImgzIiwiTWF0aCIsIm1heCIsIm1hcGJveGdsIiwibWFwIiwiY29udGFpbmVyIiwic3R5bGUiLCJjZW50ZXIiLCJ6b29tIiwiaW50ZXJhY3RpdmUiLCJvbiIsInRocmVzaG9sZCIsIm1heFZhbHVlIiwiZ2VvanNvbiIsImdlb2pzb24yaDMiLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwidmFsdWUiLCJzb3VyY2VJZCIsImxheWVySWQiLCJzb3VyY2UiLCJnZXRTb3VyY2UiLCJhZGRTb3VyY2UiLCJ0eXBlIiwiYWRkTGF5ZXIiLCJpZCIsInBhaW50Iiwic2V0RGF0YSIsInNldFBhaW50UHJvcGVydHkiLCJwcm9wZXJ0eSIsInN0b3BzIiwiY29sb3JTY2FsZSIsInJlbmRlckhleGVzIiwiZ2V0U2NhbGVYIiwiZGF0ZXMiLCJ3aWR0aCIsImRvbWFpbiIsInJhbmdlIiwiZ2V0U2NhbGVZIiwibWluIiwiaGVpZ2h0IiwidHJhbnNpdGlvbllBeGlzIiwieSIsImRlbGF5IiwidHJhbnNpdGlvbiIsImNhbGwiLCJwcm9jZXNzRGF0YSIsImRhdGExIiwiZGF0YTIiLCJkIiwiZGF0ZSIsIkRhdGUiLCJOb21icmVzIiwiVHlwZXMiLCJkcmF3TGluZUNoYXJ0QXhpcyIsImciLCJ4Iiwic3ZnIiwiYXBwZW5kIiwiYXR0ciIsInRpY2tTaXplT3V0ZXIiLCJkcmF3WEF4aXMiLCJzY2FsZSIsImRyYXdZQXhpcyIsImdldEFubm90YXRpb24iLCJ4U2NhbGUiLCJ5U2NhbGUiLCJtYXJnaW4iLCJncmFwaFNpemUiLCJ2aXoiLCJhbm5vdGF0aW9uIiwibm90ZSIsImxhYmVsIiwic3ViamVjdCIsInkxIiwidG9wIiwieTIiLCJ0aXRsZSIsImNvbm5lY3RvciIsImVuZCIsImJvdHRvbSIsImQzQW5ub3RhdGlvbiIsImRpc2FibGUiLCJkcmF3QW5ub3RhdGlvbnNWaXoiLCJhbm5vdGF0aW9ucyIsImxpbmVUeXBlIiwib3JpZW50YXRpb24iLCJhbGlnbiIsIm1ha2VBbm5vdGF0aW9ucyIsImFjY2Vzc29ycyIsInRleHRXcmFwIiwiaW5pdEFubm90YXRpb24iLCJ5U2NhbGUxIiwieVNjYWxlMiIsImNvbmZpZyIsImFubm90YXRpb24xIiwiYW5ub3RhdGlvbjIiLCJhMSIsImEyIiwiaW5pdExpbmUiLCJjb2xvciIsInNlbGVjdEFsbCIsImpvaW4iLCJzdGVwMUxpbmVDaGFydCIsImxpbmUxIiwiY29uc29sZSIsImxvZyIsInN0ZXAyTGluZUNoYXJ0IiwibGluZTIiLCJsaW5lMyIsInN0ZXAzTGluZUNoYXJ0IiwibGluZTQiLCJzdGVwNExpbmVDaGFydCIsIm90aGVyQ29sb3IiLCJzZWxlY3Rpb25Db2xvciIsImluaXRpYWxpemVQYXJhbGxlU2V0IiwiZGF0YVBhdGgiLCJHcmF2aXRlIiwiRHJhd1BhcmFsbGVsZVNldCIsInJpZ2h0IiwibGVmdCIsInRpcCIsImQzVGlwIiwiaHRtbCIsImdldENvbnRlbnRzIiwicG9wIiwiZ3JhcGgiLCJDcmVhdGVHcmFwaE5vZGVBbmRMaW5rIiwic2Fua2V5IiwiU2Fua2V5Iiwibm9kZVNvcnQiLCJsaW5rU29ydCIsIm5vZGVXaWR0aCIsIm5vZGVQYWRkaW5nIiwiZXh0ZW50Iiwibm9kZXMiLCJhc3NpZ24iLCJsaW5rcyIsIkNyZWF0ZVNWR05vZGVzIiwiQ3JlYXRlU1ZHTGluZXMiLCJDcmVhdGVTVkdUZXh0SW5mbyIsInNldEV2ZW50SGFuZGxlciIsInNlbGVjdE5vZGUiLCJpbmRleCIsIm9uQ2xpY2tFdmVudCIsIm5vZGVCeUtleSIsIk1hcCIsImluZGV4QnlLZXkiLCJrIiwia2V5IiwiSlNPTiIsInN0cmluZ2lmeSIsImhhcyIsIm5vZGUiLCJuYW1lIiwicHVzaCIsInNldCIsImEiLCJiIiwicHJlZml4Iiwic2xpY2UiLCJsaW5rQnlLZXkiLCJuYW1lcyIsInBhcnNlSW50IiwiY291bnQiLCJsaW5rIiwiZ2V0IiwidGFyZ2V0IiwiZW50ZXIiLCJ4MCIsInkwIiwieDEiLCJzaG93IiwiaGlkZSIsInNhbmtleUxpbmtIb3Jpem9udGFsIiwicmVtb3ZlIiwidGV4dCIsIkFkZFNvdXJjZUxpbmtzS2V5cyIsInNvdXJjZUxpbmtzIiwiQWRkVGFyZ2V0TGlua3NLZXlzIiwidGFyZ2V0TGlua3MiLCJzZWxlY3QiLCJpbmNsdWRlcyIsInNvdXJjZXMiLCJmb3JFYWNoIiwiZWxlbWVudCIsInRhcmdldHMiLCJpbml0QmFyQ2hhcnQiLCJhcHBlbmRYQXhpcyIsImFwcGVuZFlBeGlzIiwicGFkZGluZyIsInRpY2tTaXplIiwic3ViZ3JvdXBzIiwiY29sdW1ucyIsInN0YWNrZWREYXRhIiwiVFlQRV9WRUhJQ1VMRSIsImJhbmR3aWR0aCIsImluaXRCYXJBbGwiLCJpbml0QmFyR3JhdmVNb3J0ZWwiLCJzdGVwMUJhckNoYXJ0IiwiaGlkZUdyYXZlTW9ydGVsIiwic2hvd0JhckNoYXJ0QWxsIiwic3RlcDJCYXJDaGFydCIsImhpZGVCYXJDaGFydEFsbCIsInNob3dHcmF2ZU1vcnRlbCIsImZ1bGxXaWR0aCIsImZ1bGxIZWlnaHQiLCJnMSIsImczIiwiZzIiLCJnNSIsInBzZXQxIiwicHNldDMiLCJwc2V0MUNvbG9yIiwicHNldDNDb2xvciIsImxpbmVjaGFydERhdGFBbGwiLCJsaW5lY2hhcnREYXRhVHlwZSIsImJhcmNoYXJ0RGF0YSIsImNvbG9yU2NhbGVCYXIiLCJkYXRhQWxsIiwiZGF0YU90aGVyIiwiZGF0YUNhbWlvbiIsIm1heFNjYWxlWTEiLCJtYXhTY2FsZVkyIiwiQXJyYXkiLCJmcm9tIiwiU2V0Iiwic2NhbGVZMiIsInNjYWxlWCIsInNjYWxlWTEiLCJsaW5lQWxsIiwibGluZU90aGVyIiwibGluZUNhbWlvbiIsImxpbmVDYW1pb25ab29tIiwiU2Nyb2xsZXJTdGVwIiwiZWwiLCJjYWxsYmFjayIsInRoaXMiLCJfaXNBY3RpdmF0ZSIsInNjcm9sbERpcmVjdGlvbiIsImNsYXNzTGlzdCIsImFkZCIsImVsZW1lbnRzIiwic2VsZWN0b3IiLCJjb25jYXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzdGlja3lCaXRzIiwic3RpY2t5Qml0U3RpY2t5T2Zmc2V0IiwiUHJvbWlzZSIsImFsbCIsInYxIiwiY2FsbGJhY2tzIiwiX29mZnNldFRvcCIsIl9vZmZzZXRCb3R0b20iLCJpbm5lckhlaWdodCIsIndpbmRvdyIsImlzSW5pdGlhbGl6ZWQiLCJsYXN0U2Nyb2xsIiwic3RlcHMiLCJ2aXNpYmxlU3RlcHMiLCJhcnRpY2xlUmVtaW5kZXIiLCJxdWVyeVNlbGVjdG9yIiwic2Nyb2xsUHJvZ3Jlc3MiLCJ2aXpTZWN0aW9ucyIsIkVycm9yIiwidml6U2VjdGlvbiIsInNlY3Rpb25zIiwiZSIsImoiLCJfdXBkYXRlIiwiY3VycmVudFNjcm9sbCIsInBhZ2VZT2Zmc2V0IiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsVG9wIiwic3RlcCIsImJvdW5kaW5nUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImRlYWN0aXZhdGUiLCJpc0FydGljbGVSZW1pbmRlckRpc3BsYXllZCIsImlzQXJ0aWNsZVJlbWluZGVySXNWaXNpYmxlIiwiY29udGFpbnMiLCJzZWN0aW9uIiwiYWN0aXZhdGUiLCJfdXBkYXRlU2Nyb2xsUHJvZ3Jlc3MiLCJzY3JvbGxlZCIsImJvZHkiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJwdWJsaWNJbnRlcmZhY2UiLCJpbml0aWFsaXplIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9mZnNldFRvcCIsInVuZGVmaW5lZCIsIk51bWJlciIsImlzSW50ZWdlciIsIm9mZnNldEJvdHRvbSIsInNjcm9sbGVyIl0sInNvdXJjZVJvb3QiOiIifQ==