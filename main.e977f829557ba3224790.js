"use strict";(self.webpackChunkscrollytelling_template=self.webpackChunkscrollytelling_template||[]).push([[179],{9524:(t,e,n)=>{n(9554),n(1539),n(2222),n(1038),n(8783),n(6992),n(8674),n(3948),n(9753),n(2526),n(1817),n(2165),n(7042),n(8309),n(4916);var r=n(9438),o=(n(5666),n(189),n(1249),n(1343)),a=(n(7327),n(7941),n(6158)),i=n(9947),c=n(2895);function l(t){o.gyn("./data/collisions_routieres_locations.csv").then((function(e){for(var n={},r=0,o=0;o<e.length;++o){var l=e[o].LOC_LAT,s=e[o].LOC_LONG,f=i.geoToH3(l,s,8);n[f]=null!=n[f]?n[f]+1:0,r=Math.max(r,n[f])}a.accessToken="pk.eyJ1IjoiYWtvZGEiLCJhIjoiY2wyMnZ0MHowMWsyZTNrbzV4eWlybmlmaCJ9.ID6Bhabq_oe8crICSXGhgA";var p=new a.Map({container:t,style:"mapbox://styles/mapbox/light-v10",center:[-73.7141,45.5388],zoom:10,interactive:!1});p.on("load",(function(){!function(t,e,n,r){var o=c.h3SetToFeatureCollection(Object.keys(e).filter((function(t){return e[t]>0})),(function(t){return{value:e[t]}})),a="h3-hexes",i="".concat(a,"-layer"),l=t.getSource(a);l||(t.addSource(a,{type:"geojson",data:o}),t.addLayer({id:i,source:a,type:"fill",interactive:!1,paint:{"fill-outline-color":"rgba(0,0,0,0)"}}),l=t.getSource(a)),l.setData(o),t.setPaintProperty(i,"fill-color",{property:"value",stops:[[10,u[0]],[100,u[1]],[1e3,u[2]]]}),t.setPaintProperty(i,"fill-opacity",.4)}(p,n)}))}))}var u=["#ffff00","#ffc400","#a60000"];n(3710),n(9600);var s=n(7308);function f(t,e){return o.Xf().domain(o.Wem(t)).range([0,e])}function p(t,e,n){return o.BYU().domain([t,e]).range([n,0])}function d(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2e3,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"yAxisLineChart";o.Ys("#"+n).transition().delay(e).call(o.y4O(t))}function h(t,e){return[t=t.map((function(t){return{date:o.Z1g("%Y-%m-%d")(t.Date),value:+t.Nombres}})),(e=e.map((function(t){return{date:o.Z1g("%Y-%m-%d")(t.Date),type:t.Types,value:+t.Nombres}}))).filter((function(t){return"SANS_CAMION"===t.type})),e.filter((function(t){return"CAMION"===t.type}))]}function y(t,e,n,r,a){!function(t,e,n){t.append("g").attr("transform","translate(0,"+n+")").call(o.LLu(e).tickSizeOuter(0))}(t,e,a),function(t,e){t.append("g").attr("id","yAxisLineChart").call(o.y4O().scale(e))}(t,n)}function v(t,e,n,r,o){var a=[];switch(o){case"annotation1":a=[{note:{label:"Vision Zéro"},subject:{y1:n.top,y2:r.height-n.bottom},y:n.top,data:{x:new Date("2016-01-01")}},{note:{label:"Début couvre-feu"},subject:{y1:n.top,y2:r.height-n.bottom},y:n.top,data:{x:new Date("2020-03-14")}}];break;case"annotation2":a=[{note:{title:"Tendance à la hausse"},connector:{end:"arrow"},subject:{height:r.height-n.top-n.bottom,width:t(new Date("2020-03-14"))-t(new Date("2016-01-01"))},type:s.RA,x:t(new Date("01-01-2016")),y:n.top,disable:["connector"]}]}return a}function m(t,e,n,r){var o=s.Bv(s.dF,{note:{lineType:"none",orientation:"top",align:"middle"}}),a=s.dQ().type(o).accessors({x:function(t){return e(new Date(t.x))},y:function(t){return n(t.y)}}).annotations(r).textWrap(30);return t.append("g").attr("class","annotation-group").call(a)}function g(t,e,n,r,o){var a=v(e,0,o,o.margin,"annotation1"),i=v(e,0,o,o.margin,"annotation2"),c=m(t,e,n,a),l=m(t,e,r,i);return c.style("opacity",0),l.style("opacity",0),[c,l]}function b(t,e,n,r,a){return r.append("g").selectAll(".lines").data([t]).join("path").attr("class","lines").attr("d",o.jvg().x((function(t){return e(t.date)})).y((function(t){return n(t.value)}))).attr("fill","none").attr("stroke",a).attr("stroke-width",2.5).style("opacity",0)}function w(t,e){console.log("drawing all vehicule"),t.transition().style("opacity",0),e.style("opacity",0)}function A(t,e,n,r){e.transition().style("opacity",0),n.transition().style("opacity",0),t.transition().delay(200).style("opacity",1),r.style("opacity",1)}function x(t,e,n,r,o,a,i){d(i,0),a.transition().style("opacity",0),o.transition().style("opacity",0),t.transition().delay(500).style("opacity",0),r.style("opacity",0),e.transition().delay(1e3).style("opacity",1),n.transition().delay(1e3).style("opacity",1)}function S(t,e,n,r,o){t.transition().delay(1e3).style("opacity",0),e.transition().delay(1e3).style("opacity",0),d(n,2e3),r.transition().delay(3e3).style("opacity",1),o.transition().delay(3e3).style("opacity",1)}n(1532),n(1058),n(6699),n(4747),n(2023),n(9601);var k=n(358),O=n(6417),_=n(1928);function j(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return E(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?E(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return i=t.done,t},e:function(t){c=!0,a=t},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function E(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function T(t,e,n,r,o,a,i){try{var c=t[a](i),l=c.value}catch(t){return void n(t)}c.done?e(l):Promise.resolve(l).then(r,o)}function C(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(t){T(a,r,o,i,c,"next",t)}function c(t){T(a,r,o,i,c,"throw",t)}i(void 0)}))}}var I="#CCC",L="#940d45";function z(t){return M.apply(this,arguments)}function M(){return(M=C(regeneratorRuntime.mark((function t(e){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return console.log("initialize"),t.next=3,o.gyn(e).then((function(t){return t.filter((function(t){return"Grave ou Mortel"===t.Gravite}))}));case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function P(t,e,n,r,o){return Y.apply(this,arguments)}function Y(){return(Y=C(regeneratorRuntime.mark((function t(e,n,r,o,a){var i,c,l,u,s,f,p,d;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return console.log("draw"),i={width:r-o.right-o.left,height:n-o.bottom-o.top},c=(0,k.Z)().attr("class","d3-tip").html((function(t){return q(t)})),e.call(c),(l=Object.keys(a[0])).pop(),u=D(l,a),s=(0,O.Z)().nodeSort(null).linkSort(null).nodeWidth(4).nodePadding(20).extent([[0,5],[i.width,i.height]]),f=s({nodes:u.nodes.map((function(t){return Object.assign({},t)})),links:u.links.map((function(t){return Object.assign({},t)}))}),p=f.nodes,d=f.links,R(e,a,p,c,i.height),B(e,d,I,c),Z(e,i.width),J(e,L,I),t.abrupt("return",e);case 14:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function N(t,e){var n=t.selectAll(".graph-node").data();H(t,n[e],L,I)}function D(t,e){var n,r=-1,o=[],a=new Map,i=new Map,c=[],l=j(t);try{for(l.s();!(n=l.n()).done;){var u,s=n.value,f=j(e);try{for(f.s();!(u=f.n()).done;){var p=u.value,d=JSON.stringify([s,p[s]]);if(!a.has(d)){var h={name:p[s]};o.push(h),a.set(d,h),i.set(d,++r)}}}catch(t){f.e(t)}finally{f.f()}}}catch(t){l.e(t)}finally{l.f()}for(var y=1;y<t.length;++y){var v,m=t[y-1],g=t[y],b=t.slice(0,y+1),w=new Map,A=j(e);try{var x=function(){var t=v.value,e=b.map((function(e){return t[e]})),n=JSON.stringify(e),r=parseInt(t.count)||1,o=w.get(n);if(o)return o.value+=r,"continue";o={source:i.get(JSON.stringify([m,t[m]])),target:i.get(JSON.stringify([g,t[g]])),names:e,value:r},c.push(o),w.set(n,o)};for(A.s();!(v=A.n()).done;)x()}catch(t){A.e(t)}finally{A.f()}}return{nodes:o,links:c}}function R(t,e,n,r,a){var i=o.Smz(e,(function(t){return t.count}));console.log("count : ",i),console.log("height : ",a),t.selectAll(".graph-node").data(n).enter().append("g").attr("class","graph-node").append("rect").attr("x",(function(t){return t.x0})).attr("y",(function(t){return t.y0})).attr("height",(function(t){return t.y1-t.y0})).attr("width",(function(t){return t.x1-t.x0})).attr("fill","black").on("mouseover",r.show).on("mouseout",r.hide)}function B(t,e,n,r){t.selectAll(".graph-line").data(e).enter().append("g").attr("fill","none").attr("class","graph-line").append("path").attr("d",(0,_.Z)()).attr("stroke",(function(t){return n})).attr("stroke-width",(function(t){return t.width})).style("mix-blend-mode","multiply").on("mouseover",r.show).on("mouseout",r.hide)}function Z(t,e){t.selectAll(".info").remove(),t.selectAll(".graph-node").style("font","20px sans-serif bolder").append("text").attr("class","info").attr("x",(function(t){return t.x0<e/2?t.x1+6:t.x0-6})).attr("y",(function(t){return(t.y1+t.y0)/2})).attr("dy","0.35em").attr("text-anchor",(function(t){return t.x0<e/2?"start":"end"})).text((function(t){return t.name})).append("tspan").attr("class","info").attr("fill-opacity",.7)}function q(t){return"<span id='tooltip-title'>"+o.Ys(t.target).data()[0].value+"</span>"}function J(t,e,n){var r=t.selectAll(".graph-node");console.log("values : ",r),r.on("click",(function(r){var a=o.Ys(r.target).data();H(t,a[0],e,n)}))}function H(t,e,n,r){var o=[];W(o,e.sourceLinks),G(o,e.targetLinks),t.selectAll(".graph-line").select("path").attr("stroke",(function(t){return o.includes(t.index)?n:r}))}function W(t,e){console.log("sources",e),e.forEach((function(e){t.includes(e.index)||t.push(e.index),W(t,e.target.sourceLinks)}))}function G(t,e){console.log("targets",e),e.forEach((function(e){t.includes(e.index)||t.push(e.index),G(t,e.source.targetLinks)}))}function U(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,a=[],i=!0,c=!1;try{for(n=n.call(t);!(i=(r=n.next()).done)&&(a.push(r.value),!e||a.length!==e);i=!0);}catch(t){c=!0,o=t}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}}(t,e)||function(t,e){if(t){if("string"==typeof t)return F(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?F(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function F(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function $(t,e,n,r,o,a,i){try{var c=t[a](i),l=c.value}catch(t){return void n(t)}c.done?e(l):Promise.resolve(l).then(r,o)}function V(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(t){$(a,r,o,i,c,"next",t)}function c(t){$(a,r,o,i,c,"throw",t)}i(void 0)}))}}var X={width:1e3,height:500,margin:{top:100,right:100,bottom:100,left:100}},Q=X.margin.left+X.width+X.margin.right,K=X.margin.top+X.height+X.margin.bottom,tt=o.Ys("#viz_line_chart").append("svg").attr("viewBox","0 0 ".concat(Q," ").concat(K)).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate(".concat(X.margin.left,", ").concat(X.margin.top,")")),et=o.Ys("#viz2").append("svg").attr("viewBox","0 0 ".concat(2400," ",1400)).attr("preserveAspectRatio","xMidYMid").append("g").attr("transform","translate(".concat(X.margin.left,", ").concat(X.margin.top,")"));function nt(){return(nt=V(regeneratorRuntime.mark((function t(){var e,n,r,a,i,c,u,s,d,v,m,k,O,_,j,E,T,C,I,L,M,Y,D,R;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,o.gyn("./data/rolling7_viz1_all_vehicule_date.csv");case 2:return e=t.sent,t.next=5,o.gyn("./data/rolling7_viz2_acc_by_type_date.csv");case 5:return n=t.sent,t.next=8,z("./data/pset_env_route_vit.csv");case 8:return r=t.sent,u=h(e,n),s=U(u,3),a=s[0],i=s[1],c=s[2],d=[o.Fp7(a,(function(t){return t.value})),o.Fp7(c,(function(t){return t.value}))],v=d[0],m=d[1],k=Array.from(new Set(a.map((function(t){return t.date})))),O=[f(k,X.width),p(0,v,X.height),p(0,m,X.height)],E=O[2],y(tt,_=O[0],j=O[1],0,X.height),T=b(a,_,j,tt,"#2c4aad"),C=b(i,_,j,tt,"#000000"),I=b(c,_,j,tt,"#8d072b"),L=b(c,_,E,tt,"#8d072b"),M=g(tt,_,j,E,X),Y=U(M,2),D=Y[0],R=Y[1],l("map"),t.abrupt("return",[[function(){},function(){},function(){},function(){}],[function(){w(T,D)},function(){A(T,C,I,D)},function(){x(T,C,I,D,R,L,j)},function(){S(C,I,E,L,R)}],[function(){},function(){P(et,1e3,2e3,X.margin,r)},function(){N(et,2)},function(){N(et,3)}]]);case 26:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function rt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function ot(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n(9070),n(3161),n(9653);var at=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.el=e,this.index=n,this.callback=r,this._isActivate=!1}var e,n;return e=t,(n=[{key:"activate",value:function(t){this._isActivate||(this._isActivate=!0,this.el.classList.add("active"),this.callback(t))}},{key:"deactivate",value:function(){this._isActivate&&(this._isActivate=!1,this.el.classList.remove("active"))}}])&&ot(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function it(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var ct=[];[".viz",".full-page-section > img",".full-page-section > video"].forEach((function(t){ct=ct.concat(Array.from(document.querySelectorAll(t)))})),(0,r.Z)(ct,{stickyBitStickyOffset:40}),Promise.all([function(){return nt.apply(this,arguments)}()]).then((function(t){var e,n;(function(t){var e=0,n=0,r=window.innerHeight,o=!1,a=0,i=[],c=[],l=[],u=document.querySelector(".article-reminder"),s=document.querySelector("header > .progress"),f=document.querySelector(".intro-section h1"),p=document.querySelectorAll(".viz-section");if(console.log(t),console.log(t.length),p.length!==t.length)throw new Error("The number of viz sections (".concat(p.length,") mismatch with the length of the first ")+"dimension of the callbacks array (".concat(t.length,"). Please, be sure that the two elements ")+"have the same size.");p.forEach((function(e,n){var r,o=function(t){if(Array.isArray(t))return rt(t)}(r=e.querySelectorAll("section"))||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(r)||function(t,e){if(t){if("string"==typeof t)return rt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?rt(t,e):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();if(o.length!==t[n].length)throw new Error("The number of steps (".concat(o.length,") in the viz section #").concat(n+1," mismatch with the ")+"number of callbacks specified (".concat(t[n].length,') at the index "').concat(n,'". Please, be sure that the two ')+"elements have the same size.");i=i.concat(o.map((function(e,r){return new at(e,"".concat(n,"-").concat(r),t[n][r])}))),c=c.concat(c,e.querySelector(".viz > *"))}));var d=function(){var t=window.pageYOffset||document.documentElement.scrollTop;i.forEach((function(t){var o=t.el.getBoundingClientRect();r-o.top-n>0&&o.top+o.height-e>0?l.push(t):t.deactivate()}));var o=f.getBoundingClientRect().bottom<=0,c=u.classList.contains("visible");o&&!c?u.classList.add("visible"):!o&&c&&u.classList.remove("visible"),l.forEach((function(e,n){t>=a?n===l.length-1?e.activate("down"):e.deactivate():0===n?e.activate("up"):e.deactivate()})),h(),l=[],a=t},h=function(){var t=(document.body.scrollTop||document.documentElement.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100;s.style.width=t+"%"},y={initialize:function(){if(o)throw new Error("The scroller is already initialized.");return o=!0,window.addEventListener("scroll",d),window.addEventListener("resize",(function(){r=window.innerHeight,h()})),(window.pageYOffset||document.documentElement.scrollTop)>0&&d(),h(),y},offsetTop:function(t){if(void 0===t)return e;if(!Number.isInteger(t))throw new Error("The offset must be an integer number.");return e=t,y},offsetBottom:function(t){if(void 0===t)return n;if(!Number.isInteger(t))throw new Error("The offset must be an integer number.");return n=t,y}};return y})((e=t,n=1,function(t){if(Array.isArray(t))return t}(e)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,a=[],i=!0,c=!1;try{for(n=n.call(t);!(i=(r=n.next()).done)&&(a.push(r.value),!e||a.length!==e);i=!0);}catch(t){c=!0,o=t}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}}(e,n)||function(t,e){if(t){if("string"==typeof t)return it(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?it(t,e):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0]).offsetTop(40).offsetBottom(0).initialize()}))}},t=>{var e=e=>t(t.s=e);t.O(0,[216],(()=>(e(8594),e(5666),e(9524)))),t.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5mYzA3ZTFlYzIyZmE3ZWYwNTYwOC5qcyIsIm1hcHBpbmdzIjoiMFZBTU8sU0FBU0EsRUFBU0MsR0FFdkJDLEVBQUFBLElBRGtCLDZDQUNBQyxNQUFLLFNBQUNDLEdBWXRCLElBVEEsSUFLSUMsRUFBVyxHQUNYQyxFQUFTLEVBR0xDLEVBQUksRUFBR0EsRUFBSUgsRUFBS0ksU0FBVUQsRUFBRSxDQUNsQyxJQUFJRSxFQUFVTCxFQUFLRyxHQUFHRyxRQUNsQkMsRUFBV1AsRUFBS0csR0FBR0ssU0FDbkJDLEVBQU1DLEVBQUFBLFFBQVdMLEVBQVNFLEVBVFQsR0FVckJOLEVBQVNRLEdBQXdCLE1BQWpCUixFQUFTUSxHQUFlUixFQUFTUSxHQUFLLEVBQUksRUFDMURQLEVBQVNTLEtBQUtDLElBQUlWLEVBQU9ELEVBQVNRLElBR3BDSSxFQUFBQSxZQUF1Qix5RkFDdkIsSUFBTUMsRUFBTSxJQUFJRCxFQUFBQSxJQUFhLENBQ3pCRSxVQUFXbEIsRUFFWG1CLE1BQU8sbUNBQ1BDLE9BQVEsRUFyQkUsUUFERixTQXVCUkMsS0FBTSxHQUNOQyxhQUFhLElBR2pCTCxFQUFJTSxHQUFHLFFBQVEsWUFpQm5CLFNBQXFCTixFQUFLYixFQUFVb0IsRUFBV0MsR0FHM0MsSUFBTUMsRUFBVUMsRUFBQUEseUJBQ2RDLE9BQU9DLEtBQUt6QixHQUFVMEIsUUFBTyxTQUFBbEIsR0FBRyxPQUFJUixFQUFTUSxHQXBCaEIsTUFxQjdCLFNBQUFBLEdBQUcsTUFBSyxDQUFDbUIsTUFBTzNCLEVBQVNRLE9BR3JCb0IsRUFBVyxXQUNYQyxFQUFVLEdBQUgsT0FBTUQsRUFBTixVQUNURSxFQUFTakIsRUFBSWtCLFVBQVVILEdBR3RCRSxJQUNIakIsRUFBSW1CLFVBQVVKLEVBQVUsQ0FDdEJLLEtBQU0sVUFDTmxDLEtBQU11QixJQUVSVCxFQUFJcUIsU0FBUyxDQUNYQyxHQUFJTixFQUNKQyxPQUFRRixFQUNSSyxLQUFNLE9BQ05mLGFBQWEsRUFDYmtCLE1BQU8sQ0FDTCxxQkFBc0IsbUJBRzFCTixFQUFTakIsRUFBSWtCLFVBQVVILElBSXpCRSxFQUFPTyxRQUFRZixHQUdmVCxFQUFJeUIsaUJBQWlCVCxFQUFTLGFBQWMsQ0FDMUNVLFNBQVUsUUFDVkMsTUFBTyxDQUNMLENBQUMsR0FBSUMsRUFBVyxJQUNoQixDQUFDLElBQUtBLEVBQVcsSUFDakIsQ0FBQyxJQUFNQSxFQUFXLE9BSXRCNUIsRUFBSXlCLGlCQUFpQlQsRUFBUyxlQTVDZCxJQWZaYSxDQUFZN0IsRUFBS2IsU0FjekIsSUFBTXlDLEVBQWEsQ0FBQyxVQUFXLFVBQVcsVyw4QkMxQ25DLFNBQVNFLEVBQVVDLEVBQU9DLEdBQzdCLE9BQU9oRCxFQUFBQSxLQUNGaUQsT0FBT2pELEVBQUFBLElBQVUrQyxJQUNqQkcsTUFBTSxDQUFDLEVBQUdGLElBU1osU0FBU0csRUFBVUMsRUFBS3RDLEVBQUt1QyxHQUNoQyxPQUFRckQsRUFBQUEsTUFDSGlELE9BQU8sQ0FBQ0csRUFBS3RDLElBQ2JvQyxNQUFNLENBQUVHLEVBQVEsSUFHbEIsU0FBU0MsRUFBZ0JDLEdBQW1DLElBQWhDQyxFQUFnQyx1REFBMUIsSUFBTWxCLEVBQW9CLHVEQUFqQixpQkFDOUN0QyxFQUFBQSxHQUFVLElBQU1zQyxHQUNYbUIsYUFDQUQsTUFBTUEsR0FDTkUsS0FBSzFELEVBQUFBLElBQVl1RCxJQUduQixTQUFTSSxFQUFZQyxFQUFPQyxHQVEvQixNQUFPLENBUFBELEVBQVFBLEVBQU01QyxLQUFJLFNBQVM4QyxHQUFLLE1BQU8sQ0FBQ0MsS0FBSy9ELEVBQUFBLElBQWEsV0FBYkEsQ0FBeUI4RCxFQUFFRSxNQUFPbEMsT0FBT2dDLEVBQUVHLGFBRXhGSixFQUFRQSxFQUFNN0MsS0FBSSxTQUFTOEMsR0FBSyxNQUFPLENBQUNDLEtBQUsvRCxFQUFBQSxJQUFhLFdBQWJBLENBQXlCOEQsRUFBRUUsTUFBTzVCLEtBQU0wQixFQUFFSSxNQUFPcEMsT0FBT2dDLEVBQUVHLGFBQ25GcEMsUUFBTyxTQUFTaUMsR0FBSyxNQUFrQixnQkFBWEEsRUFBRTFCLFFBQ25DeUIsRUFBTWhDLFFBQU8sU0FBU2lDLEdBQUksTUFBa0IsV0FBWEEsRUFBRTFCLFNBTS9DLFNBQVMrQixFQUFrQkMsRUFBR0MsRUFBR2QsRUFBR1AsRUFBT0ssSUExQ2xELFNBQW1CaUIsRUFBS0QsRUFBR2hCLEdBQ3ZCaUIsRUFBSUMsT0FBTyxLQUNOQyxLQUFLLFlBQWEsZUFBaUJuQixFQUFTLEtBQzVDSyxLQUFLMUQsRUFBQUEsSUFBY3FFLEdBQUdJLGNBQWMsSUF3Q3pDQyxDQUFVTixFQUFFQyxFQUFHaEIsR0EvQm5CLFNBQW1CaUIsRUFBS2YsR0FDcEJlLEVBQUlDLE9BQU8sS0FDTkMsS0FBSyxLQUFNLGtCQUNYZCxLQUFLMUQsRUFBQUEsTUFBYzJFLE1BQU1wQixJQTZCOUJxQixDQUFVUixFQUFHYixHQXFEakIsU0FBU3NCLEVBQWVDLEVBQVFDLEVBQVFDLEVBQVFDLEVBQVdDLEdBQ3ZELElBQUlDLEVBQWEsR0FDakIsT0FBUUQsR0FDSixJQUFLLGNBQ0RDLEVBQWEsQ0FBQyxDQUNWQyxLQUFNLENBQUVDLE1BQU8sZUFDZkMsUUFBUyxDQUNMQyxHQUFJUCxFQUFPUSxJQUNYQyxHQUFJUixFQUFVNUIsT0FBUzJCLEVBQU9VLFFBRWxDbkMsRUFBR3lCLEVBQU9RLElBQ1Z0RixLQUFNLENBQUVtRSxFQUFHLElBQUlMLEtBQUssZ0JBRXBCLENBQ0lvQixLQUFNLENBQUVDLE1BQU8sb0JBQ2ZDLFFBQVMsQ0FDTEMsR0FBSVAsRUFBT1EsSUFDWEMsR0FBSVIsRUFBVTVCLE9BQVMyQixFQUFPVSxRQUVsQ25DLEVBQUd5QixFQUFPUSxJQUNWdEYsS0FBTSxDQUFFbUUsRUFBRyxJQUFJTCxLQUFLLGlCQUU1QixNQUNKLElBQUssY0FDRG1CLEVBQWEsQ0FDVCxDQUNJQyxLQUFNLENBQ0ZPLE1BQU8sd0JBRVhDLFVBQVcsQ0FDUEMsSUFBSyxTQUVUUCxRQUFTLENBQ0xqQyxPQUFRNEIsRUFBVTVCLE9BQVMyQixFQUFPUSxJQUFNUixFQUFPVSxPQUMvQzFDLE1BQU84QixFQUFPLElBQUlkLEtBQUssZUFBaUJjLEVBQU8sSUFBSWQsS0FBSyxnQkFFNUQ1QixLQUFNMEQsRUFBQUEsR0FDTnpCLEVBQUdTLEVBQU8sSUFBSWQsS0FBSyxlQUNuQlQsRUFBR3lCLEVBQU9RLElBQ1ZPLFFBQVMsQ0FBQyxlQUsxQixPQUFPWixFQWVKLFNBQVNhLEVBQW9CNUIsRUFBR1UsRUFBUUMsRUFBUWtCLEdBRW5ELElBQU03RCxFQUFPMEQsRUFBQUEsR0FDVEEsRUFBQUEsR0FDQSxDQUNJVixLQUFNLENBQ0ZjLFNBQVUsT0FDVkMsWUFBYSxNQUNiQyxNQUFPLFlBSWJDLEVBQWtCUCxFQUFBQSxLQUNuQjFELEtBQUtBLEdBRUxrRSxVQUFVLENBQ1BqQyxFQUFHLFNBQVVQLEdBQUssT0FBT2dCLEVBQU8sSUFBSWQsS0FBS0YsRUFBRU8sS0FDM0NkLEVBQUcsU0FBVU8sR0FBSyxPQUFPaUIsRUFBT2pCLEVBQUVQLE1BRXJDMEMsWUFBWUEsR0FDWk0sU0FBUyxJQU1kLE9BSm1CbkMsRUFBRUcsT0FBTyxLQUN2QkMsS0FBSyxRQUFTLG9CQUNkZCxLQUFLMkMsR0FLUCxTQUFTRyxFQUFlcEMsRUFBR1UsRUFBUTJCLEVBQVNDLEVBQVNDLEdBQ3hELElBQU1DLEVBQWMvQixFQUFjQyxFQUFRMkIsRUFBU0UsRUFBUUEsRUFBTzNCLE9BQVEsZUFDcEU2QixFQUFjaEMsRUFBY0MsRUFBUTRCLEVBQVNDLEVBQVFBLEVBQU8zQixPQUFRLGVBQ3BFOEIsRUFBS2QsRUFBbUI1QixFQUFHVSxFQUFRMkIsRUFBU0csR0FDNUNHLEVBQUtmLEVBQW1CNUIsRUFBR1UsRUFBUTRCLEVBQVNHLEdBR2xELE9BRkFDLEVBQUc1RixNQUFNLFVBQVcsR0FDcEI2RixFQUFHN0YsTUFBTSxVQUFXLEdBQ2IsQ0FBQzRGLEVBQUlDLEdBR1QsU0FBU0MsRUFBUzlHLEVBQU1tRSxFQUFHZCxFQUFHZSxFQUFLMkMsR0FnQnRDLE9BZGEzQyxFQUFJQyxPQUFPLEtBQ25CMkMsVUFBVSxVQUNWaEgsS0FBSyxDQUFDQSxJQUNOaUgsS0FBSyxRQUNMM0MsS0FBSyxRQUFTLFNBQ2RBLEtBQUssSUFBSXhFLEVBQUFBLE1BQ0RxRSxHQUFFLFNBQVVQLEdBQUssT0FBT08sRUFBRVAsRUFBRUMsU0FDNUJSLEdBQUUsU0FBVU8sR0FBSyxPQUFPUCxFQUFFTyxFQUFFaEMsV0FFcEMwQyxLQUFLLE9BQVEsUUFDYkEsS0FBSyxTQUFVeUMsR0FDZnpDLEtBQUssZUFBZ0IsS0FDckJ0RCxNQUFNLFVBQVcsR0FRbkIsU0FBU2tHLEVBQWVDLEVBQU9ULEdBQ2xDVSxRQUFRQyxJQUFJLHdCQUNaRixFQUNLNUQsYUFDQXZDLE1BQU0sVUFBVyxHQUV0QjBGLEVBQVkxRixNQUFNLFVBQVcsR0FVMUIsU0FBU3NHLEVBQWVILEVBQU9JLEVBQU9DLEVBQU9kLEdBQ2hEYSxFQUFNaEUsYUFBYXZDLE1BQU0sVUFBVyxHQUNwQ3dHLEVBQU1qRSxhQUFhdkMsTUFBTSxVQUFXLEdBRXBDbUcsRUFDSzVELGFBQ0FELE1BQU0sS0FDTnRDLE1BQU0sVUFBVSxHQUVyQjBGLEVBQVkxRixNQUFNLFVBQVcsR0FNMUIsU0FBU3lHLEVBQWVOLEVBQU9JLEVBQU9DLEVBQU9kLEVBQWFDLEVBQWFlLEVBQU9yRSxHQUNqRkQsRUFBZ0JDLEVBQUcsR0FDbkJxRSxFQUFNbkUsYUFBYXZDLE1BQU0sVUFBVSxHQUNuQzJGLEVBQVlwRCxhQUFhdkMsTUFBTSxVQUFXLEdBRTFDbUcsRUFBTTVELGFBQWFELE1BQU0sS0FBS3RDLE1BQU0sVUFBVyxHQUMvQzBGLEVBQVkxRixNQUFNLFVBQVcsR0FFN0J1RyxFQUFNaEUsYUFBYUQsTUFBTSxLQUFNdEMsTUFBTSxVQUFXLEdBQ2hEd0csRUFBTWpFLGFBQWFELE1BQU0sS0FBTXRDLE1BQU0sVUFBVyxHQUk3QyxTQUFTMkcsRUFBZUosRUFBT0MsRUFBT25FLEVBQUdxRSxFQUFPZixHQUNuRFksRUFBTWhFLGFBQWFELE1BQU0sS0FBTXRDLE1BQU0sVUFBVyxHQUNoRHdHLEVBQU1qRSxhQUFhRCxNQUFNLEtBQU10QyxNQUFNLFVBQVcsR0FFaERvQyxFQUFnQkMsRUFBRyxLQUduQnFFLEVBQU1uRSxhQUFhRCxNQUFNLEtBQU10QyxNQUFNLFVBQVUsR0FDL0MyRixFQUFZcEQsYUFBYUQsTUFBTSxLQUFNdEMsTUFBTSxVQUFXLEcsbzVDQzdRMUQsSUFBTTRHLEVBQWEsT0FDYkMsRUFBaUIsVUFFaEIsU0FBZUMsRUFBdEIsa0MsaURBQU8sV0FBb0NDLEdBQXBDLHVGQUNMWCxRQUFRQyxJQUFJLGNBRFAsU0FFUXZILEVBQUFBLElBQU9pSSxHQUFVaEksTUFBSyxTQUFVQyxHQUkzQyxPQUZPQSxFQUFLMkIsUUFBTyxTQUFBaUMsR0FBQyxNQUFrQixvQkFBZEEsRUFBRW9FLGNBSnZCLG9GLHNCQVVBLFNBQWVDLEVBQXRCLDBDLGlEQUFPLFdBQWdDL0QsRUFBR2YsRUFBUUwsRUFBT2dDLEVBQVE5RSxHQUExRCwyR0FDTG9ILFFBQVFDLElBQUksUUFFTnRDLEVBQVksQ0FDaEJqQyxNQUFPQSxFQUFRZ0MsRUFBT29ELE1BQVFwRCxFQUFPcUQsS0FDckNoRixPQUFRQSxFQUFTMkIsRUFBT1UsT0FBU1YsRUFBT1EsS0FHcEM4QyxHQUFNQyxFQUFBQSxFQUFBQSxLQUFRL0QsS0FBSyxRQUFTLFVBQVVnRSxNQUFLLFNBQVUxRSxHQUFLLE9BQU8yRSxFQUFZM0UsTUFDbkZNLEVBQUVWLEtBQUs0RSxJQUVIMUcsRUFBT0QsT0FBT0MsS0FBSzFCLEVBQUssS0FDdkJ3SSxNQUNDQyxFQUFRQyxFQUF1QmhILEVBQU0xQixHQUVyQzJJLEdBQVNDLEVBQUFBLEVBQUFBLEtBQ1ZDLFNBQVMsTUFDVEMsU0FBUyxNQUNUQyxVQUFVLEdBQ1ZDLFlBQVksSUFDWkMsT0FBTyxDQUFDLENBQUMsRUFBRyxHQUFJLENBQUNsRSxFQUFVakMsTUFBT2lDLEVBQVU1QixVQXBCNUMsRUFzQnNCd0YsRUFBTyxDQUM5Qk8sTUFBT1QsRUFBTVMsTUFBTXBJLEtBQUksU0FBQThDLEdBQUMsT0FBSW5DLE9BQU8wSCxPQUFPLEdBQUl2RixNQUM5Q3dGLE1BQU9YLEVBQU1XLE1BQU10SSxLQUFJLFNBQUE4QyxHQUFDLE9BQUluQyxPQUFPMEgsT0FBTyxHQUFJdkYsUUFGeENzRixFQXRCTCxFQXNCS0EsTUFBT0UsRUF0QlosRUFzQllBLE1BS2ZDLEVBQWVuRixFQUFHbEUsRUFBTWtKLEVBQU9kLEVBQUtyRCxFQUFVNUIsUUFDOUNtRyxFQUFlcEYsRUFBR2tGLEVBQU94QixFQUFZUSxHQUVyQ21CLEVBQWtCckYsRUFBR2EsRUFBVWpDLE9BRS9CMEcsRUFBZ0J0RixFQUFHMkQsRUFBZ0JELEdBaENoQyxrQkFrQ0UxRCxHQWxDRiw2QyxzQkFxQ0EsU0FBU3VGLEVBQVd2RixFQUFHd0YsR0FDNUIsSUFBSVIsRUFBUWhGLEVBQUU4QyxVQUFVLGVBQWVoSCxPQUV2QzJKLEVBQWF6RixFQUFHZ0YsRUFBTVEsR0FBUTdCLEVBQWdCRCxHQU9oRCxTQUFTYyxFQUF3QmhILEVBQU0xQixHQUNyQyxJQUQyQyxFQUN2QzBKLEdBQVMsRUFDUFIsRUFBUSxHQUNSVSxFQUFZLElBQUlDLElBQ2hCQyxFQUFhLElBQUlELElBQ2pCVCxFQUFRLEdBTDZCLElBTzNCMUgsR0FQMkIsSUFPM0MsMkJBQXNCLE9BQVhxSSxFQUFXLFlBQ0ovSixHQURJLElBQ3BCLDJCQUFzQixLQUFYNEQsRUFBVyxRQUNkb0csRUFBTUMsS0FBS0MsVUFBVSxDQUFDSCxFQUFHbkcsRUFBRW1HLEtBQ2pDLElBQUlILEVBQVVPLElBQUlILEdBQWxCLENBQ0EsSUFBTUksRUFBTyxDQUFFQyxLQUFNekcsRUFBRW1HLElBQ3ZCYixFQUFNb0IsS0FBS0YsR0FDWFIsRUFBVVcsSUFBSVAsRUFBS0ksR0FDbkJOLEVBQVdTLElBQUlQLElBQU9OLEtBUEosZ0NBUHFCLDhCQWtCM0MsSUFBSyxJQUFJdkosRUFBSSxFQUFHQSxFQUFJdUIsRUFBS3RCLFNBQVVELEVBQUcsQ0FDcEMsSUFEb0MsRUFDOUJxSyxFQUFJOUksRUFBS3ZCLEVBQUksR0FDYnNLLEVBQUkvSSxFQUFLdkIsR0FDVHVLLEVBQVNoSixFQUFLaUosTUFBTSxFQUFHeEssRUFBSSxHQUMzQnlLLEVBQVksSUFBSWYsSUFKYyxJQUtwQjdKLEdBTG9CLHlCQUt6QjRELEVBTHlCLFFBTTVCaUgsRUFBUUgsRUFBTzVKLEtBQUksU0FBQWlKLEdBQUMsT0FBSW5HLEVBQUVtRyxNQUMxQkMsRUFBTUMsS0FBS0MsVUFBVVcsR0FDckJqSixFQUFRa0osU0FBU2xILEVBQUVtSCxRQUFVLEVBQy9CQyxFQUFPSixFQUFVSyxJQUFJakIsR0FDekIsR0FBSWdCLEVBQTZCLE9BQXJCQSxFQUFLcEosT0FBU0EsRUFBTyxXQUNqQ29KLEVBQU8sQ0FDTGpKLE9BQVErSCxFQUFXbUIsSUFBSWhCLEtBQUtDLFVBQVUsQ0FBQ00sRUFBRzVHLEVBQUU0RyxNQUM1Q1UsT0FBUXBCLEVBQVdtQixJQUFJaEIsS0FBS0MsVUFBVSxDQUFDTyxFQUFHN0csRUFBRTZHLE1BQzVDSSxNQUFBQSxFQUNBakosTUFBQUEsR0FFRndILEVBQU1rQixLQUFLVSxHQUNYSixFQUFVTCxJQUFJUCxFQUFLZ0IsSUFickIsMkJBQXNCLElBTGMsK0JBc0J0QyxNQUFPLENBQUU5QixNQUFBQSxFQUFPRSxNQUFBQSxHQVVsQixTQUFTQyxFQUFnQm5GLEVBQUdsRSxFQUFNa0osRUFBT2QsRUFBS2pGLEdBQzVDLElBQU00SCxFQUFRakwsRUFBQUEsSUFBT0UsR0FBTSxTQUFBNEQsR0FBQyxPQUFJQSxFQUFFbUgsU0FFbEMzRCxRQUFRQyxJQUFJLFdBQVkwRCxHQUN4QjNELFFBQVFDLElBQUksWUFBYWxFLEdBQ3pCZSxFQUFFOEMsVUFBVSxlQUNUaEgsS0FBS2tKLEdBQ0xpQyxRQUNBOUcsT0FBTyxLQUNQQyxLQUFLLFFBQVMsY0FDZEQsT0FBTyxRQUNQQyxLQUFLLEtBQUssU0FBQVYsR0FBQyxPQUFJQSxFQUFFd0gsTUFDakI5RyxLQUFLLEtBQUssU0FBQVYsR0FBQyxPQUFJQSxFQUFFeUgsTUFDakIvRyxLQUFLLFVBQVUsU0FBQVYsR0FBQyxPQUFJQSxFQUFFeUIsR0FBS3pCLEVBQUV5SCxNQUM3Qi9HLEtBQUssU0FBUyxTQUFBVixHQUFDLE9BQUlBLEVBQUUwSCxHQUFLMUgsRUFBRXdILE1BQzVCOUcsS0FBSyxPQUFRLFNBQ2JsRCxHQUFHLFlBQWFnSCxFQUFJbUQsTUFDcEJuSyxHQUFHLFdBQVlnSCxFQUFJb0QsTUFReEIsU0FBU2xDLEVBQWdCcEYsRUFBR2tGLEVBQU9yQyxFQUFPcUIsR0FDeENsRSxFQUFFOEMsVUFBVSxlQUNUaEgsS0FBS29KLEdBQ0wrQixRQUNBOUcsT0FBTyxLQUNQQyxLQUFLLE9BQVEsUUFDYkEsS0FBSyxRQUFTLGNBQ2RELE9BQU8sUUFDUEMsS0FBSyxLQUFLbUgsRUFBQUEsRUFBQUEsTUFDVm5ILEtBQUssVUFBVSxTQUFBVixHQUFDLE9BQUltRCxLQUNwQnpDLEtBQUssZ0JBQWdCLFNBQUFWLEdBQUMsT0FBSUEsRUFBRWQsU0FDNUI5QixNQUFNLGlCQUFrQixZQUN4QkksR0FBRyxZQUFhZ0gsRUFBSW1ELE1BQ3BCbkssR0FBRyxXQUFZZ0gsRUFBSW9ELE1BT3hCLFNBQVNqQyxFQUFtQnJGLEVBQUdwQixHQUM3Qm9CLEVBQUU4QyxVQUFVLFNBQ1QwRSxTQUVIeEgsRUFBRThDLFVBQVUsZUFDVGhHLE1BQU0sT0FBUSwwQkFDZHFELE9BQU8sUUFDUEMsS0FBSyxRQUFTLFFBQ2RBLEtBQUssS0FBSyxTQUFBVixHQUFDLE9BQUlBLEVBQUV3SCxHQUFLdEksRUFBUSxFQUFJYyxFQUFFMEgsR0FBSyxFQUFJMUgsRUFBRXdILEdBQUssS0FDcEQ5RyxLQUFLLEtBQUssU0FBQVYsR0FBQyxPQUFLQSxFQUFFeUIsR0FBS3pCLEVBQUV5SCxJQUFNLEtBQy9CL0csS0FBSyxLQUFNLFVBQ1hBLEtBQUssZUFBZSxTQUFBVixHQUFDLE9BQUlBLEVBQUV3SCxHQUFLdEksRUFBUSxFQUFJLFFBQVUsU0FDdEQ2SSxNQUFLLFNBQUEvSCxHQUFDLE9BQUlBLEVBQUV5RyxRQUNaaEcsT0FBTyxTQUNQQyxLQUFLLFFBQVMsUUFDZEEsS0FBSyxlQUFnQixJQVMxQixTQUFTaUUsRUFBYTNFLEdBRXBCLE1BQU8sNEJBREk5RCxFQUFBQSxHQUFVOEQsRUFBRXNILFFBQVFsTCxPQUNXLEdBQUc0QixNQUFRLFVBVXZELFNBQVM0SCxFQUFpQnRGLEVBQUcyRCxFQUFnQkQsR0FFM0MsSUFBSXNCLEVBQVFoRixFQUFFOEMsVUFBVSxlQUV4QkksUUFBUUMsSUFBSSxZQUFhNkIsR0FFekJBLEVBQU05SCxHQUFHLFNBQVMsU0FBVXdDLEdBQzFCLElBQUk1RCxFQUFPRixFQUFBQSxHQUFVOEQsRUFBRXNILFFBQVFsTCxPQUMvQjJKLEVBQWF6RixFQUFHbEUsRUFBSyxHQUFJNkgsRUFBZ0JELE1BVTdDLFNBQVMrQixFQUFjekYsRUFBR2xFLEVBQU02SCxFQUFnQkQsR0FDOUMsSUFBSWxHLEVBQU8sR0FFWGtLLEVBQW1CbEssRUFBTTFCLEVBQUs2TCxhQUM5QkMsRUFBbUJwSyxFQUFNMUIsRUFBSytMLGFBRzlCN0gsRUFBRThDLFVBQVUsZUFDVGdGLE9BQU8sUUFDUDFILEtBQUssVUFBVSxTQUFBVixHQUFDLE9BQUlsQyxFQUFLdUssU0FBU3JJLEVBQUU4RixPQUFTN0IsRUFBaUJELEtBT25FLFNBQVNnRSxFQUFvQmxLLEVBQU13SyxHQUNqQzlFLFFBQVFDLElBQUksVUFBVzZFLEdBQ3ZCQSxFQUFRQyxTQUFRLFNBQUFDLEdBQ1QxSyxFQUFLdUssU0FBU0csRUFBUTFDLFFBQVVoSSxFQUFLNEksS0FBSzhCLEVBQVExQyxPQUN2RGtDLEVBQW1CbEssRUFBTTBLLEVBQVFsQixPQUFPVyxnQkFRNUMsU0FBU0MsRUFBb0JwSyxFQUFNMkssR0FDakNqRixRQUFRQyxJQUFJLFVBQVdnRixHQUN2QkEsRUFBUUYsU0FBUSxTQUFBQyxHQUNUMUssRUFBS3VLLFNBQVNHLEVBQVExQyxRQUFVaEksRUFBSzRJLEtBQUs4QixFQUFRMUMsT0FDdkRvQyxFQUFtQnBLLEVBQU0wSyxFQUFRckssT0FBT2dLLGdCLDB2Q0NuTzVDLElBQU10RixFQUFTLENBQ2IzRCxNQUFPLElBQ1BLLE9BQVEsSUFDUjJCLE9BQVEsQ0FDTlEsSUFBSyxJQUNMNEMsTUFBTyxJQUNQMUMsT0FBUSxJQUNSMkMsS0FBTSxNQUdKbUUsRUFBWTdGLEVBQU8zQixPQUFPcUQsS0FBTzFCLEVBQU8zRCxNQUFRMkQsRUFBTzNCLE9BQU9vRCxNQUM5RHFFLEVBQWE5RixFQUFPM0IsT0FBT1EsSUFBTW1CLEVBQU90RCxPQUFTc0QsRUFBTzNCLE9BQU9VLE9BTS9EZ0gsR0FKZ0IxTSxFQUFBQSxHQUFVLG1CQUNMdUUsT0FBTyxPQUMvQkMsS0FBSyxVQURLLGNBQ2FnSSxFQURiLFlBQzBCQyxJQUNwQ2pJLEtBQUssc0JBQXVCLFlBQ2ZELE9BQU8sS0FDcEJDLEtBQUssWUFERyxvQkFDdUJtQyxFQUFPM0IsT0FBT3FELEtBRHJDLGFBQzhDMUIsRUFBTzNCLE9BQU9RLElBRDVELE1BT0xtSCxHQUpnQjNNLEVBQUFBLEdBQVUsU0FDTHVFLE9BQU8sT0FDL0JDLEtBQUssVUFESyxjQUNhLEtBRGIsSUFDcUIsT0FDL0JBLEtBQUssc0JBQXVCLFlBQ2ZELE9BQU8sS0FDcEJDLEtBQUssWUFERyxvQkFDdUJtQyxFQUFPM0IsT0FBT3FELEtBRHJDLGFBQzhDMUIsRUFBTzNCLE9BQU9RLElBRDVELE0sbURBR0osaUtBRXdCeEYsRUFBQUEsSUFBTyw4Q0FGL0IsY0FFRDRNLEVBRkMsZ0JBR3lCNU0sRUFBQUEsSUFBTyw2Q0FIaEMsY0FHRDZNLEVBSEMsZ0JBS2E3RSxFQUFxQixpQ0FMbEMsY0FLRDhFLEVBTEMsU0FROEJuSixFQUFZaUosRUFBa0JDLEdBUjVELFNBUUpFLEVBUkksS0FRS0MsRUFSTCxLQVFnQkMsRUFSaEIsT0FVMEIsQ0FBQ2pOLEVBQUFBLElBQU8rTSxHQUFTLFNBQUFqSixHQUFDLE9BQUVBLEVBQUVoQyxTQUFROUIsRUFBQUEsSUFBT2lOLEdBQVksU0FBQW5KLEdBQUMsT0FBRUEsRUFBRWhDLFVBQWhGb0wsRUFWQSxLQVVZQyxFQVZaLEtBV0NwSyxFQUFRcUssTUFBTUMsS0FBSyxJQUFJQyxJQUFJUCxFQUFRL0wsS0FBSSxTQUFBOEMsR0FBQyxPQUFJQSxFQUFFQyxVQVgvQyxFQVk0QixDQUFDakIsRUFBVUMsRUFBTzRELEVBQU8zRCxPQUN4REcsRUFKVyxFQUlLK0osRUFBWXZHLEVBQU90RCxRQUNuQ0YsRUFMVyxFQUtLZ0ssRUFBWXhHLEVBQU90RCxTQUZma0ssRUFaakIsS0FpQkxwSixFQUFrQnVJLEdBTGJjLEVBWkEsS0FZUUMsRUFaUixLQWlCa0M5RyxFQUFjQSxFQUFPdEQsUUFDdERxSyxFQUFVMUcsRUFBUytGLEVBQVNTLEVBQVFDLEVBQVNmLEdBQUksV0FDakRpQixFQUFZM0csRUFBU2dHLEVBQVdRLEVBQVFDLEVBQVNmLEdBQUksV0FDckRrQixFQUFhNUcsRUFBU2lHLEVBQVlPLEVBQVFDLEVBQVNmLEdBQUksV0FDdkRtQixFQUFpQjdHLEVBQVNpRyxFQUFZTyxFQUFRRCxFQUFTYixHQUFJLFdBckI1RCxFQXVCNEJsRyxFQUFla0csR0FBSWMsRUFBUUMsRUFBU0YsRUFBUzVHLEdBdkJ6RSxTQXVCQUMsRUF2QkEsS0F1QmFDLEVBdkJiLEtBK0JMN0YsRUFBYSxPQS9CUixrQkFpQ0UsQ0FDUCxDQUNFLGFBQ0EsYUFDQSxhQUNBLGNBRUEsQ0FDRSxXQUFPb0csRUFBZXNHLEVBQVM5RyxJQUMvQixXQUFPWSxFQUFla0csRUFBU0MsRUFBV0MsRUFBWWhILElBQ3RELFdBQU9lLEVBQWUrRixFQUFTQyxFQUFXQyxFQUFZaEgsRUFBYUMsRUFBYWdILEVBQWdCSixJQUNoRyxXQUFPNUYsRUFBZThGLEVBQVdDLEVBQVlMLEVBQVNNLEVBQWVoSCxLQUV2RSxDQUNFLGFBQ0EsV0FBT3NCLEVBQWlCd0UsR0FBSSxJQUFNLElBQU1oRyxFQUFPM0IsT0FBUThILElBQ3ZELFdBQU9uRCxFQUFXZ0QsR0FBSSxJQUN0QixXQUFPaEQsRUFBV2dELEdBQUksT0FsRHJCLDZDLG9VQzdCRG1CLEdBQUFBLFdBUUosV0FBWUMsRUFBSW5FLEVBQU9vRSxJLDRGQUFVLFNBQy9CQyxLQUFLRixHQUFLQSxFQUNWRSxLQUFLckUsTUFBUUEsRUFDYnFFLEtBQUtELFNBQVdBLEVBQ2hCQyxLQUFLQyxhQUFjLEUsNkNBUXJCLFNBQVNDLEdBQ0hGLEtBQUtDLGNBR1RELEtBQUtDLGFBQWMsRUFDbkJELEtBQUtGLEdBQUdLLFVBQVVDLElBQUksVUFDdEJKLEtBQUtELFNBQVNHLE0sd0JBTWhCLFdBQ09GLEtBQUtDLGNBR1ZELEtBQUtDLGFBQWMsRUFDbkJELEtBQUtGLEdBQUdLLFVBQVV4QyxPQUFPLGdCLHVFQXJDdkJrQyxHLDJHQ1BOLElBR0lRLEdBQVcsR0FDZixDQUFDLE9BQVEsMkJBQTRCLDhCQUE4QmpDLFNBQVEsU0FBQWtDLEdBQ3pFRCxHQUFXQSxHQUFTRSxPQUFPcEIsTUFBTUMsS0FBS29CLFNBQVNDLGlCQUFpQkgsU0FFbEVJLEVBQUFBLEVBQUFBLEdBQVdMLEdBQVUsQ0FBRU0sc0JBUEYsS0FZckJDLFFBQVFDLElBQUksQ0Z3QkwsV0FBUCxnQ0V4QmFDLEtBQU85TyxNQUFLLFksU0R1RGxCLFNBQWtCK08sR0FDdkIsSUFBSUMsRUFBYSxFQUNiQyxFQUFnQixFQUVoQkMsRUFBY0MsT0FBT0QsWUFDckJFLEdBQWdCLEVBQ2hCQyxFQUFhLEVBQ2JDLEVBQVEsR0FDUnJLLEVBQU0sR0FDTnNLLEVBQWUsR0FFYkMsRUFBa0JoQixTQUFTaUIsY0FBYyxxQkFDekNDLEVBQWlCbEIsU0FBU2lCLGNBQWMsc0JBQ3hDL0osRUFBUThJLFNBQVNpQixjQUFjLHFCQUUvQkUsRUFBY25CLFNBQVNDLGlCQUFpQixnQkFJOUMsR0FIQXBILFFBQVFDLElBQUl5SCxHQUNaMUgsUUFBUUMsSUFBSXlILEVBQVUxTyxRQUVsQnNQLEVBQVl0UCxTQUFXME8sRUFBVTFPLE9BQ25DLE1BQU0sSUFBSXVQLE1BQU0sc0NBQStCRCxFQUFZdFAsT0FBM0Msd0ZBQ3VCME8sRUFBVTFPLE9BRGpDLG9FQUlsQnNQLEVBQVl2RCxTQUFRLFNBQUN5RCxFQUFZelAsR0FDL0IsSSxFQUFNMFAsRSxnREFBZUQsRUFBV3BCLGlCQUFpQixhLGtrQkFDakQsR0FBSXFCLEVBQVN6UCxTQUFXME8sRUFBVTNPLEdBQUdDLE9BQ25DLE1BQU0sSUFBSXVQLE1BQU0sK0JBQXdCRSxFQUFTelAsT0FBakMsaUNBQWdFRCxFQUFJLEVBQXBFLGdFQUNvQjJPLEVBQVUzTyxHQUFHQyxPQURqQywyQkFDMERELEVBRDFELG9FQUlsQmtQLEVBQVFBLEVBQU1mLE9BQU91QixFQUFTL08sS0FBSSxTQUFDZ1AsRUFBR0MsR0FBSixPQUFVLElBQUluQyxHQUFha0MsRUFBakIsVUFBdUIzUCxFQUF2QixZQUE0QjRQLEdBQUtqQixFQUFVM08sR0FBRzRQLFFBQzFGL0ssRUFBTUEsRUFBSXNKLE9BQU90SixFQUFLNEssRUFBV0osY0FBYyxnQkFPakQsSUFBTVEsRUFBVSxXQUNkLElBQU1DLEVBQWdCZixPQUFPZ0IsYUFBZTNCLFNBQVM0QixnQkFBZ0JDLFVBQ3JFZixFQUFNbEQsU0FBUSxTQUFBa0UsR0FFWixJQUFNQyxFQUFlRCxFQUFLeEMsR0FBRzBDLHdCQUN6QnRCLEVBQWNxQixFQUFhaEwsSUFBTTBKLEVBQWdCLEdBQ2hEc0IsRUFBYWhMLElBQU1nTCxFQUFhbk4sT0FBUzRMLEVBQWEsRUFDekRPLEVBQWFoRixLQUFLK0YsR0FFbEJBLEVBQUtHLGdCQUtULElBQU1DLEVBQTZCaEwsRUFBTThLLHdCQUF3Qi9LLFFBQVUsRUFDckVrTCxFQUE2Qm5CLEVBQWdCckIsVUFBVXlDLFNBQVMsV0FDbEVGLElBQStCQyxFQUNqQ25CLEVBQWdCckIsVUFBVUMsSUFBSSxZQUNwQnNDLEdBQThCQyxHQUN4Q25CLEVBQWdCckIsVUFBVXhDLE9BQU8sV0FJbkM0RCxFQUFhbkQsU0FBUSxTQUFDeUUsRUFBU3pRLEdBQ3pCOFAsR0FBaUJiLEVBQ2ZqUCxJQUFNbVAsRUFBYWxQLE9BQVMsRUFDOUJ3USxFQUFRQyxTQTdFVixRQStFRUQsRUFBUUosYUFHQSxJQUFOclEsRUFDRnlRLEVBQVFDLFNBcEZaLE1Bc0ZJRCxFQUFRSixnQkFJZE0sSUFHQXhCLEVBQWUsR0FDZkYsRUFBYWEsR0FPVGEsRUFBd0IsV0FDNUIsSUFFTUMsR0FGWXhDLFNBQVN5QyxLQUFLWixXQUFhN0IsU0FBUzRCLGdCQUFnQkMsWUFDdkQ3QixTQUFTNEIsZ0JBQWdCYyxhQUFlMUMsU0FBUzRCLGdCQUFnQmUsY0FDeEMsSUFDeEN6QixFQUFlek8sTUFBTThCLE1BQVFpTyxFQUFXLEtBR3BDSSxFQUFrQixDQU10QkMsV0FBWSxXQUNWLEdBQUlqQyxFQUNGLE1BQU0sSUFBSVEsTUFBTSx3Q0FZbEIsT0FWQVIsR0FBZ0IsRUFDaEJELE9BQU9tQyxpQkFBaUIsU0FBVXJCLEdBQ2xDZCxPQUFPbUMsaUJBQWlCLFVBQVUsV0FDaENwQyxFQUFjQyxPQUFPRCxZQUNyQjZCLFFBRUc1QixPQUFPZ0IsYUFBZTNCLFNBQVM0QixnQkFBZ0JDLFdBQWEsR0FDL0RKLElBRUZjLElBQ09LLEdBU1RHLFVBQVcsU0FBQUEsR0FDVCxRQUFrQkMsSUFBZEQsRUFDRixPQUFPdkMsRUFFVCxJQUFLeUMsT0FBT0MsVUFBVUgsR0FDcEIsTUFBTSxJQUFJM0IsTUFBTSx5Q0FHbEIsT0FEQVosRUFBYXVDLEVBQ05ILEdBU1RPLGFBQWMsU0FBQUEsR0FDWixRQUFxQkgsSUFBakJHLEVBQ0YsT0FBTzFDLEVBRVQsSUFBS3dDLE9BQU9DLFVBQVVDLEdBQ3BCLE1BQU0sSUFBSS9CLE1BQU0seUNBR2xCLE9BREFYLEVBQWdCMEMsRUFDVFAsSUFHWCxPQUFPQSxHQzlNUFEsRSxFQUQyQyxFLEVBQUEsRSxnMEJBQUEsSUFFeENMLFVBZGdCLElBZWhCSSxhQUFhLEdBQ2JOLGtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2Nyb2xseXRlbGxpbmctdGVtcGxhdGUvLi9zcmMvYXBwL21hcC5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvbGluZWNoYXJ0LmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9wYXJhbGxlbGVTZXRDaGFydC5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvdml6LmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9zY3JvbGxlci5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmltcG9ydCAqIGFzIG1hcGJveGdsIGZyb20gXCJtYXBib3gtZ2xcIjtcbmltcG9ydCAqIGFzIGgzIGZyb20gXCJoMy1qc1wiO1xuaW1wb3J0ICogYXMgZ2VvanNvbjJoMyBmcm9tIFwiZ2VvanNvbjJoM1wiO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZE1hcChkaXZfaWQpe1xuICBjb25zdCBwYXRoVG9Dc3YgPSBcIi4vZGF0YS9jb2xsaXNpb25zX3JvdXRpZXJlc19sb2NhdGlvbnMuY3N2XCI7XG4gIGQzLmNzdihwYXRoVG9Dc3YpLnRoZW4oKGRhdGEpID0+IHtcbiAgICBcbiAgICAvL2Nvb3JkIGRlIG1vbnRyZWFsXG4gICAgY29uc3QgbGF0ID0gNDUuNTM4ODtcbiAgICBjb25zdCBsb25nID0gLTczLjcxNDE7XG5cbiAgICBjb25zdCBwcmVjaXNpb25MZXZlbCA9IDg7XG4gICAgXG4gICAgdmFyIGhleGFnb25zID0ge307XG4gICAgdmFyIG1heEFjYyA9IDBcblxuICAgIC8vIExvb3AgY2FsY3VsYXRlcyBudW1iZXIgb2YgYWNjaWRlbnQgd2l0aGluIGVhY2ggaGV4YWdvblxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKXtcbiAgICAgIHZhciBkYXRhTGF0ID0gZGF0YVtpXS5MT0NfTEFUO1xuICAgICAgdmFyIGRhdGFMb25nID0gZGF0YVtpXS5MT0NfTE9ORztcbiAgICAgIHZhciBoZXggPSBoMy5nZW9Ub0gzKGRhdGFMYXQsIGRhdGFMb25nLCBwcmVjaXNpb25MZXZlbCk7XG4gICAgICBoZXhhZ29uc1toZXhdID0gaGV4YWdvbnNbaGV4XSAhPSBudWxsID8gaGV4YWdvbnNbaGV4XSsxIDogMDtcbiAgICAgIG1heEFjYyA9IE1hdGgubWF4KG1heEFjYyxoZXhhZ29uc1toZXhdKTtcbiAgICB9XG5cbiAgICBtYXBib3hnbC5hY2Nlc3NUb2tlbiA9IFwicGsuZXlKMUlqb2lZV3R2WkdFaUxDSmhJam9pWTJ3eU1uWjBNSG93TVdzeVpUTnJielY0ZVdseWJtbG1hQ0o5LklENkJoYWJxX29lOGNySUNTWEdoZ0FcIlxuICAgIGNvbnN0IG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoe1xuICAgICAgICBjb250YWluZXI6IGRpdl9pZCwgLy8gY29udGFpbmVyIElEXG4gICAgICAgIC8vc3R5bGU6ICdtYXBib3g6Ly9zdHlsZXMvbWFwYm94L3N0cmVldHMtdjExJywgLy8gc3R5bGUgVVJMXG4gICAgICAgIHN0eWxlOiAnbWFwYm94Oi8vc3R5bGVzL21hcGJveC9saWdodC12MTAnLCAvLyBzdHlsZSBVUkxcbiAgICAgICAgY2VudGVyOiBbbG9uZywgbGF0XSwgLy8gc3RhcnRpbmcgcG9zaXRpb24gW2xuZywgbGF0XVxuICAgICAgICB6b29tOiAxMCwgLy8gc3RhcnRpbmcgem9vbVxuICAgICAgICBpbnRlcmFjdGl2ZTogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICBtYXAub24oJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgIHJlbmRlckhleGVzKG1hcCwgaGV4YWdvbnMsIDAsIG1heEFjYyk7XG4gICAgICAgIC8vcmVuZGVyQXJlYXMobWFwLCBoZXhhZ29ucywgMCk7XG4gICAgICAgIC8vZDMuc2VsZWN0KCcubWFwYm94Z2wtY29udHJvbC1jb250YWluZXInKS5yZW1vdmUoKTsgLy9cbiAgICB9KTtcbiAgICBcbiAgfSk7XG59XG5cblxuLy8gTW9zdCBjb2RlIGRvd24gdGhlcmUgdGFrZW4gZnJvbSBodHRwczovL29ic2VydmFibGVocS5jb20vQG5yYWJpbm93aXR6L2gzLXR1dG9yaWFsLWhlYXRtYXAtcmVuZGVyaW5nXG5cbi8vY29uc3QgY29sb3JTY2FsZSA9IFsnI2ZmZmZjYycsICcjNzhjNjc5JywgJyMwMDY4MzcnXTtcbi8vY29uc3QgY29sb3JTY2FsZSA9IFsnIzJiZmYwMCcsICcjZmZmYjAwJywgJyNmZjAwMDAnXTtcbi8vY29uc3QgY29sb3JTY2FsZSA9IFsnI2ZmZmYwMCcsICcjZmY5ZDAwJyAsJyNhNjAwMDAnXTtcbmNvbnN0IGNvbG9yU2NhbGUgPSBbJyNmZmZmMDAnLCAnI2ZmYzQwMCcgLCcjYTYwMDAwJ107XG5jb25zdCBmaWxsT3BhY2l0eSA9IDAuNDtcbmZ1bmN0aW9uIHJlbmRlckhleGVzKG1hcCwgaGV4YWdvbnMsIHRocmVzaG9sZCwgbWF4VmFsdWUpIHtcbiAgXG4gICAgLy8gVHJhbnNmb3JtIHRoZSBjdXJyZW50IGhleGFnb24gbWFwIGludG8gYSBHZW9KU09OIG9iamVjdFxuICAgIGNvbnN0IGdlb2pzb24gPSBnZW9qc29uMmgzLmgzU2V0VG9GZWF0dXJlQ29sbGVjdGlvbihcbiAgICAgIE9iamVjdC5rZXlzKGhleGFnb25zKS5maWx0ZXIoaGV4ID0+IGhleGFnb25zW2hleF0gPiB0aHJlc2hvbGQpLFxuICAgICAgaGV4ID0+ICh7dmFsdWU6IGhleGFnb25zW2hleF19KVxuICAgICk7XG4gICAgXG4gICAgY29uc3Qgc291cmNlSWQgPSAnaDMtaGV4ZXMnO1xuICAgIGNvbnN0IGxheWVySWQgPSBgJHtzb3VyY2VJZH0tbGF5ZXJgO1xuICAgIGxldCBzb3VyY2UgPSBtYXAuZ2V0U291cmNlKHNvdXJjZUlkKTtcbiAgICBcbiAgICAvLyBBZGQgdGhlIHNvdXJjZSBhbmQgbGF5ZXIgaWYgd2UgaGF2ZW4ndCBjcmVhdGVkIHRoZW0geWV0XG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgIG1hcC5hZGRTb3VyY2Uoc291cmNlSWQsIHtcbiAgICAgICAgdHlwZTogJ2dlb2pzb24nLFxuICAgICAgICBkYXRhOiBnZW9qc29uXG4gICAgICB9KTtcbiAgICAgIG1hcC5hZGRMYXllcih7XG4gICAgICAgIGlkOiBsYXllcklkLFxuICAgICAgICBzb3VyY2U6IHNvdXJjZUlkLFxuICAgICAgICB0eXBlOiAnZmlsbCcsXG4gICAgICAgIGludGVyYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgcGFpbnQ6IHtcbiAgICAgICAgICAnZmlsbC1vdXRsaW5lLWNvbG9yJzogJ3JnYmEoMCwwLDAsMCknLFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHNvdXJjZSA9IG1hcC5nZXRTb3VyY2Uoc291cmNlSWQpO1xuICAgIH1cbiAgXG4gICAgLy8gVXBkYXRlIHRoZSBnZW9qc29uIGRhdGFcbiAgICBzb3VyY2Uuc2V0RGF0YShnZW9qc29uKTtcbiAgICBcbiAgICAvLyBVcGRhdGUgdGhlIGxheWVyIHBhaW50IHByb3BlcnRpZXMsIHVzaW5nIHRoZSBjdXJyZW50IGNvbmZpZyB2YWx1ZXNcbiAgICBtYXAuc2V0UGFpbnRQcm9wZXJ0eShsYXllcklkLCAnZmlsbC1jb2xvcicsIHtcbiAgICAgIHByb3BlcnR5OiAndmFsdWUnLFxuICAgICAgc3RvcHM6IFtcbiAgICAgICAgWzEwLCBjb2xvclNjYWxlWzBdXSxcbiAgICAgICAgWzEwMCwgY29sb3JTY2FsZVsxXV0sXG4gICAgICAgIFsxMDAwLCBjb2xvclNjYWxlWzJdXVxuICAgICAgXVxuICAgIH0pO1xuICAgIFxuICAgIG1hcC5zZXRQYWludFByb3BlcnR5KGxheWVySWQsICdmaWxsLW9wYWNpdHknLCBmaWxsT3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXJBcmVhcyhtYXAsIGhleGFnb25zLCB0aHJlc2hvbGQpIHtcbiAgXG4gICAgLy8gVHJhbnNmb3JtIHRoZSBjdXJyZW50IGhleGFnb24gbWFwIGludG8gYSBHZW9KU09OIG9iamVjdFxuICAgIGNvbnN0IGdlb2pzb24gPSBnZW9qc29uMmgzLmgzU2V0VG9GZWF0dXJlKFxuICAgICAgT2JqZWN0LmtleXMoaGV4YWdvbnMpLmZpbHRlcihoZXggPT4gaGV4YWdvbnNbaGV4XSA+IHRocmVzaG9sZClcbiAgICApO1xuICAgIFxuICAgIGNvbnN0IHNvdXJjZUlkID0gJ2gzLWhleC1hcmVhcyc7XG4gICAgY29uc3QgbGF5ZXJJZCA9IGAke3NvdXJjZUlkfS1sYXllcmA7XG4gICAgbGV0IHNvdXJjZSA9IG1hcC5nZXRTb3VyY2Uoc291cmNlSWQpO1xuICAgIFxuICAgIC8vIEFkZCB0aGUgc291cmNlIGFuZCBsYXllciBpZiB3ZSBoYXZlbid0IGNyZWF0ZWQgdGhlbSB5ZXRcbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgbWFwLmFkZFNvdXJjZShzb3VyY2VJZCwge1xuICAgICAgICB0eXBlOiAnZ2VvanNvbicsXG4gICAgICAgIGRhdGE6IGdlb2pzb25cbiAgICAgIH0pO1xuICAgICAgbWFwLmFkZExheWVyKHtcbiAgICAgICAgaWQ6IGxheWVySWQsXG4gICAgICAgIHNvdXJjZTogc291cmNlSWQsXG4gICAgICAgIHR5cGU6ICdsaW5lJyxcbiAgICAgICAgaW50ZXJhY3RpdmU6IGZhbHNlLFxuICAgICAgICBwYWludDoge1xuICAgICAgICAgICdsaW5lLXdpZHRoJzogMyxcbiAgICAgICAgICAnbGluZS1jb2xvcic6IGNvbG9yU2NhbGVbMl0sXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgc291cmNlID0gbWFwLmdldFNvdXJjZShzb3VyY2VJZCk7XG4gICAgfVxuICBcbiAgICAvLyBVcGRhdGUgdGhlIGdlb2pzb24gZGF0YVxuICAgIHNvdXJjZS5zZXREYXRhKGdlb2pzb24pO1xuIH1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmltcG9ydCB7IGFubm90YXRpb24gfSBmcm9tICdkMy1zdmctYW5ub3RhdGlvbidcbmltcG9ydCAqIGFzIGQzQW5ub3RhdGlvbiBmcm9tICdkMy1zdmctYW5ub3RhdGlvbidcblxuXG5mdW5jdGlvbiBkcmF3WEF4aXMoc3ZnLCB4LCBoZWlnaHQpe1xuICAgIHN2Zy5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICsgXCIpXCIpXG4gICAgICAgIC5jYWxsKGQzLmF4aXNCb3R0b20oeCkudGlja1NpemVPdXRlcigwKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjYWxlWChkYXRlcywgd2lkdGgpe1xuICAgIHJldHVybiBkMy5zY2FsZVRpbWUoKVxuICAgICAgICAuZG9tYWluKGQzLmV4dGVudChkYXRlcykpXG4gICAgICAgIC5yYW5nZShbMCwgd2lkdGhdKVxufVxuXG5mdW5jdGlvbiBkcmF3WUF4aXMoc3ZnLCB5KXtcbiAgICBzdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cignaWQnLCAneUF4aXNMaW5lQ2hhcnQnKVxuICAgICAgICAuY2FsbChkMy5heGlzTGVmdCgpLnNjYWxlKHkpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2NhbGVZKG1pbiwgbWF4LCBoZWlnaHQpe1xuICAgIHJldHVybiAgZDMuc2NhbGVMaW5lYXIoKVxuICAgICAgICAuZG9tYWluKFttaW4sIG1heF0pXG4gICAgICAgIC5yYW5nZShbIGhlaWdodCwgMCBdKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNpdGlvbllBeGlzKHksIGRlbGF5PTIwMDAsIGlkPSd5QXhpc0xpbmVDaGFydCcpe1xuICAgIGQzLnNlbGVjdCgnIycgKyBpZClcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZGVsYXkoZGVsYXkpXG4gICAgICAgIC5jYWxsKGQzLmF4aXNMZWZ0KHkpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0RhdGEoZGF0YTEsIGRhdGEyKXtcbiAgICBkYXRhMSA9IGRhdGExLm1hcChmdW5jdGlvbihkKSB7IHJldHVybiB7ZGF0ZTpkMy50aW1lUGFyc2UoXCIlWS0lbS0lZFwiKShkLkRhdGUpLCB2YWx1ZTorZC5Ob21icmVzfX0pXG5cbiAgICBkYXRhMiA9IGRhdGEyLm1hcChmdW5jdGlvbihkKSB7IHJldHVybiB7ZGF0ZTpkMy50aW1lUGFyc2UoXCIlWS0lbS0lZFwiKShkLkRhdGUpLCB0eXBlOiBkLlR5cGVzLCB2YWx1ZTorZC5Ob21icmVzfX0pXG4gICAgY29uc3Qgb3RoZXIgPSBkYXRhMi5maWx0ZXIoZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSAnU0FOU19DQU1JT04nfSlcbiAgICBjb25zdCBjYW1pb24gPSBkYXRhMi5maWx0ZXIoZnVuY3Rpb24oZCkge3JldHVybiBkLnR5cGUgPT09ICdDQU1JT04nfSlcblxuICAgIC8vIGRhdGEzID0gZGF0YTMubWFwKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHtkYXRlOmQzLnRpbWVQYXJzZShcIiVZLSVtLSVkXCIpKGQuRGF0ZSksIHZhbHVlOitkLk5vbWJyZXN9fSlcbiAgICByZXR1cm4gW2RhdGExLCBvdGhlciwgY2FtaW9uXVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZHJhd0xpbmVDaGFydEF4aXMoZywgeCwgeSwgd2lkdGgsIGhlaWdodCl7XG4gICAgZHJhd1hBeGlzKGcseCwgaGVpZ2h0KVxuICAgIGRyYXdZQXhpcyhnLCB5KVxufVxuXG4vKipcbiAqIFBvc2l0aW9ucyB0aGUgeCBheGlzIGxhYmVsIGFuZCB5IGF4aXMgbGFiZWwuXG4gKlxuICogQHBhcmFtIHsqfSBnIFRoZSBkMyBTZWxlY3Rpb24gb2YgdGhlIGdyYXBoJ3MgZyBTVkcgZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIFRoZSB3aWR0aCBvZiB0aGUgZ3JhcGhcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgVGhlIGhlaWdodCBvZiB0aGUgZ3JhcGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvc2l0aW9uTGFiZWxzIChnLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgLy8gVE9ETyA6IFBvc2l0aW9uIGF4aXMgbGFiZWxzXG4gICAgdmFyIGxhYmVsRGF0ZSA9IGcuc2VsZWN0QWxsKCcueC5heGlzLXRleHQnKVxuICAgIHZhciBsYWJlbEFjY2lkZW50ID0gZy5zZWxlY3RBbGwoJy55LmF4aXMtdGV4dCcpXG5cbiAgICBsYWJlbERhdGUuYXR0cigneCcsIHdpZHRoIC8gMilcbiAgICBsYWJlbERhdGUuYXR0cigneScsIGhlaWdodCArIDQwKVxuXG4gICAgbGFiZWxBY2NpZGVudC5hdHRyKCd4JywgLTQwKVxuICAgIGxhYmVsQWNjaWRlbnQuYXR0cigneScsIGhlaWdodCAvIDIpXG59XG5cbi8qKlxuICogRHJhd3MgdGhlIGNpcmNsZXMgb24gdGhlIGdyYXBoLlxuICpcbiAqIEBwYXJhbSBnXG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YSBUaGUgZGF0YSB0byBiaW5kIHRvXG4gKiBAcGFyYW0geyp9IHJTY2FsZSBUaGUgc2NhbGUgZm9yIHRoZSBjaXJjbGVzJyByYWRpdXNcbiAqIEBwYXJhbSB7Kn0gY29sb3JTY2FsZSBUaGUgc2NhbGUgZm9yIHRoZSBjaXJjbGVzJyBjb2xvclxuICogQHBhcmFtIGNvbG9yXG4gKiBAcGFyYW0geFNjYWxlXG4gKiBAcGFyYW0geVNjYWxlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkcmF3TGluZSAoZywgZGF0YSwgY29sb3IsIHhTY2FsZSwgeVNjYWxlKSB7XG4gICAgZy5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAuZGF0dW0oZGF0YSlcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xpbmVQYXRoJylcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnbm9uZScpXG4gICAgICAgIC5hdHRyKCdzdHJva2UnLCBjb2xvcilcbiAgICAgICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsIDEuNSlcbiAgICAgICAgLmF0dHIoJ2QnLCBkMy5saW5lKClcbiAgICAgICAgICAgIC54KGZ1bmN0aW9uIChkKSB7IHJldHVybiB4U2NhbGUoZC5kYXRlKSB9KVxuICAgICAgICAgICAgLnkoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIHlTY2FsZShkLm5vbWJyZSkgfSlcbiAgICAgICAgKVxufVxuXG4vKipcbiAqIEBwYXJhbSB4U2NhbGVcbiAqIEBwYXJhbSB5U2NhbGVcbiAqIEBwYXJhbSBtYXJnaW5cbiAqIEBwYXJhbSBncmFwaFNpemVcbiAqIEBwYXJhbSB2aXogOiBzdHJpbmcgY2FuIGJlICdhbm5vdGF0aW9uMScgb3IgJ2Fubm90YXRpb24yJ1xuICovXG5mdW5jdGlvbiBnZXRBbm5vdGF0aW9uICh4U2NhbGUsIHlTY2FsZSwgbWFyZ2luLCBncmFwaFNpemUsIHZpeikge1xuICAgIGxldCBhbm5vdGF0aW9uID0gW11cbiAgICBzd2l0Y2ggKHZpeikge1xuICAgICAgICBjYXNlICdhbm5vdGF0aW9uMSc6XG4gICAgICAgICAgICBhbm5vdGF0aW9uID0gW3tcbiAgICAgICAgICAgICAgICBub3RlOiB7IGxhYmVsOiAnVmlzaW9uIFrDqXJvJyB9LFxuICAgICAgICAgICAgICAgIHN1YmplY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgeTE6IG1hcmdpbi50b3AsXG4gICAgICAgICAgICAgICAgICAgIHkyOiBncmFwaFNpemUuaGVpZ2h0IC0gbWFyZ2luLmJvdHRvbVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeTogbWFyZ2luLnRvcCxcbiAgICAgICAgICAgICAgICBkYXRhOiB7IHg6IG5ldyBEYXRlKCcyMDE2LTAxLTAxJykgfSAvLyBwb3NpdGlvbiB0aGUgeCBiYXNlZCBvbiBhbiB4IHNjYWxlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbm90ZTogeyBsYWJlbDogJ0TDqWJ1dCBjb3V2cmUtZmV1JyB9LFxuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5MTogbWFyZ2luLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHkyOiBncmFwaFNpemUuaGVpZ2h0IC0gbWFyZ2luLmJvdHRvbVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB5OiBtYXJnaW4udG9wLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IHg6IG5ldyBEYXRlKCcyMDIwLTAzLTE0JykgfVxuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdhbm5vdGF0aW9uMic6XG4gICAgICAgICAgICBhbm5vdGF0aW9uID0gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbm90ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdUZW5kYW5jZSDDoCBsYSBoYXVzc2UnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rvcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiAnYXJyb3cnIC8vIENhbiBiZSBub25lLCBvciBhcnJvdyBvciBkb3RcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBncmFwaFNpemUuaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b20sXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogeFNjYWxlKG5ldyBEYXRlKCcyMDIwLTAzLTE0JykpIC0geFNjYWxlKG5ldyBEYXRlKCcyMDE2LTAxLTAxJykpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGQzQW5ub3RhdGlvbi5hbm5vdGF0aW9uQ2FsbG91dFJlY3QsXG4gICAgICAgICAgICAgICAgICAgIHg6IHhTY2FsZShuZXcgRGF0ZSgnMDEtMDEtMjAxNicpKSxcbiAgICAgICAgICAgICAgICAgICAgeTogbWFyZ2luLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZTogWydjb25uZWN0b3InXSAvLyBkb2Vzbid0IGRyYXcgdGhlIGNvbm5lY3RvclxuXG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIGJyZWFrXG4gICAgfVxuICAgIHJldHVybiBhbm5vdGF0aW9uXG59XG5cbi8qKlxuICogRHJhdyB2ZXJ0aWNhbCBsaW5lIHRvIGluZGljYXRlIGFuIGV2ZW50IGluIHRpbWVcbiAqXG4gKiBAcGFyYW0gZGF0ZVxuICogQHBhcmFtIHRleHRcbiAqIEBwYXJhbSBnXG4gKiBAcGFyYW0geFNjYWxlXG4gKiBAcGFyYW0geVNjYWxlXG4gKiBAcGFyYW0gbWFyZ2luXG4gKiBAcGFyYW0gaGVpZ2h0XG4gKiBAcGFyYW0gYW5ub3RhdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRyYXdBbm5vdGF0aW9uc1ZpeiAoZywgeFNjYWxlLCB5U2NhbGUsIGFubm90YXRpb25zKSB7XG4gICAgLyogQ29kZSBiZWxvdyByZWxldmFudCBmb3IgYW5ub3RhdGlvbnMgKi9cbiAgICBjb25zdCB0eXBlID0gZDNBbm5vdGF0aW9uLmFubm90YXRpb25DdXN0b21UeXBlKFxuICAgICAgICBkM0Fubm90YXRpb24uYW5ub3RhdGlvblhZVGhyZXNob2xkLFxuICAgICAgICB7XG4gICAgICAgICAgICBub3RlOiB7XG4gICAgICAgICAgICAgICAgbGluZVR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICBvcmllbnRhdGlvbjogJ3RvcCcsXG4gICAgICAgICAgICAgICAgYWxpZ246ICdtaWRkbGUnXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApXG4gICAgY29uc3QgbWFrZUFubm90YXRpb25zID0gZDNBbm5vdGF0aW9uLmFubm90YXRpb24oKVxuICAgICAgICAudHlwZSh0eXBlKVxuICAgICAgICAvLyBHaXZlcyB5b3UgYWNjZXNzIHRvIGFueSBkYXRhIG9iamVjdHMgaW4gdGhlIGFubm90YXRpb25zIGFycmF5XG4gICAgICAgIC5hY2Nlc3NvcnMoe1xuICAgICAgICAgICAgeDogZnVuY3Rpb24gKGQpIHsgcmV0dXJuIHhTY2FsZShuZXcgRGF0ZShkLngpKSB9LFxuICAgICAgICAgICAgeTogZnVuY3Rpb24gKGQpIHsgcmV0dXJuIHlTY2FsZShkLnkpIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmFubm90YXRpb25zKGFubm90YXRpb25zKVxuICAgICAgICAudGV4dFdyYXAoMzApXG5cbiAgICBjb25zdCBhbm5vdGF0aW9uID0gZy5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnYW5ub3RhdGlvbi1ncm91cCcpXG4gICAgICAgIC5jYWxsKG1ha2VBbm5vdGF0aW9ucylcblxuICAgIHJldHVybiBhbm5vdGF0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0QW5ub3RhdGlvbihnLCB4U2NhbGUsIHlTY2FsZTEsIHlTY2FsZTIsIGNvbmZpZyl7XG4gICAgY29uc3QgYW5ub3RhdGlvbjEgPSBnZXRBbm5vdGF0aW9uKHhTY2FsZSwgeVNjYWxlMSwgY29uZmlnLCBjb25maWcubWFyZ2luLCAnYW5ub3RhdGlvbjEnKVxuICAgIGNvbnN0IGFubm90YXRpb24yID0gZ2V0QW5ub3RhdGlvbih4U2NhbGUsIHlTY2FsZTIsIGNvbmZpZywgY29uZmlnLm1hcmdpbiwgJ2Fubm90YXRpb24yJylcbiAgICBjb25zdCBhMSA9IGRyYXdBbm5vdGF0aW9uc1ZpeihnLCB4U2NhbGUsIHlTY2FsZTEsIGFubm90YXRpb24xKVxuICAgIGNvbnN0IGEyID0gZHJhd0Fubm90YXRpb25zVml6KGcsIHhTY2FsZSwgeVNjYWxlMiwgYW5ub3RhdGlvbjIpXG4gICAgYTEuc3R5bGUoJ29wYWNpdHknLCAwKVxuICAgIGEyLnN0eWxlKCdvcGFjaXR5JywgMClcbiAgICByZXR1cm4gW2ExLCBhMl1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRMaW5lKGRhdGEsIHgsIHksIHN2ZywgY29sb3IpIHtcbiAgICAvLyBVcGRhdGEgdGhlIGxpbmVcbiAgICBjb25zdCBsaW5lID0gc3ZnLmFwcGVuZCgnZycpXG4gICAgICAgIC5zZWxlY3RBbGwoXCIubGluZXNcIilcbiAgICAgICAgLmRhdGEoW2RhdGFdKVxuICAgICAgICAuam9pbihcInBhdGhcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxpbmVzXCIpXG4gICAgICAgIC5hdHRyKFwiZFwiLGQzLmxpbmUoKVxuICAgICAgICAgICAgICAgIC54KGZ1bmN0aW9uIChkKSB7IHJldHVybiB4KGQuZGF0ZSl9KVxuICAgICAgICAgICAgICAgIC55KGZ1bmN0aW9uIChkKSB7IHJldHVybiB5KGQudmFsdWUpfSlcbiAgICAgICAgKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIGNvbG9yKVxuICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAyLjUpXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMClcblxuICAgIHJldHVybiBsaW5lXG59XG5cbi8qKlxuICogZHJhdyBheGlzLCBpbml0IGNoYXJ0IHdpdGggdHJhbnNpdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RlcDFMaW5lQ2hhcnQobGluZTEsIGFubm90YXRpb24xKXtcbiAgICBjb25zb2xlLmxvZygnZHJhd2luZyBhbGwgdmVoaWN1bGUnKVxuICAgIGxpbmUxXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMClcblxuICAgIGFubm90YXRpb24xLnN0eWxlKCdvcGFjaXR5JywgMCApXG5cblxuICAgIC8vIHNob3cgZ3JhcGhlIG9wYWNpdHkgMVxuICAgIC8vIGV4aXQgZGF0YSB0eXBlXG4gICAgLy8gYW5ub3RhdGlvbiAxIG9wYWNpdHkgMFxufVxuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHN0ZXAyTGluZUNoYXJ0KGxpbmUxLCBsaW5lMiwgbGluZTMsIGFubm90YXRpb24xKXtcbiAgICBsaW5lMi50cmFuc2l0aW9uKCkuc3R5bGUoJ29wYWNpdHknLCAwKVxuICAgIGxpbmUzLnRyYW5zaXRpb24oKS5zdHlsZSgnb3BhY2l0eScsIDApXG5cbiAgICBsaW5lMVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kZWxheSgyMDApXG4gICAgICAgIC5zdHlsZSgnb3BhY2l0eScsMSlcblxuICAgIGFubm90YXRpb24xLnN0eWxlKCdvcGFjaXR5JywgMSlcbiAgICAvL2FkZCBhbm5vdGF0aW9uXG5cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gc3RlcDNMaW5lQ2hhcnQobGluZTEsIGxpbmUyLCBsaW5lMywgYW5ub3RhdGlvbjEsIGFubm90YXRpb24yLCBsaW5lNCwgeSl7XG4gICAgdHJhbnNpdGlvbllBeGlzKHksIDApXG4gICAgbGluZTQudHJhbnNpdGlvbigpLnN0eWxlKCdvcGFjaXR5JywwKVxuICAgIGFubm90YXRpb24yLnRyYW5zaXRpb24oKS5zdHlsZSgnb3BhY2l0eScsIDApXG5cbiAgICBsaW5lMS50cmFuc2l0aW9uKCkuZGVsYXkoNTAwKS5zdHlsZSgnb3BhY2l0eScsIDApXG4gICAgYW5ub3RhdGlvbjEuc3R5bGUoJ29wYWNpdHknLCAwKVxuXG4gICAgbGluZTIudHJhbnNpdGlvbigpLmRlbGF5KDEwMDApLnN0eWxlKCdvcGFjaXR5JywgMSlcbiAgICBsaW5lMy50cmFuc2l0aW9uKCkuZGVsYXkoMTAwMCkuc3R5bGUoJ29wYWNpdHknLCAxKVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBzdGVwNExpbmVDaGFydChsaW5lMiwgbGluZTMsIHksIGxpbmU0LCBhbm5vdGF0aW9uMil7XG4gICAgbGluZTIudHJhbnNpdGlvbigpLmRlbGF5KDEwMDApLnN0eWxlKCdvcGFjaXR5JywgMClcbiAgICBsaW5lMy50cmFuc2l0aW9uKCkuZGVsYXkoMTAwMCkuc3R5bGUoJ29wYWNpdHknLCAwKVxuXG4gICAgdHJhbnNpdGlvbllBeGlzKHksIDIwMDApXG5cblxuICAgIGxpbmU0LnRyYW5zaXRpb24oKS5kZWxheSgzMDAwKS5zdHlsZSgnb3BhY2l0eScsMSlcbiAgICBhbm5vdGF0aW9uMi50cmFuc2l0aW9uKCkuZGVsYXkoMzAwMCkuc3R5bGUoJ29wYWNpdHknLCAxKVxuXG59XG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tICdkMydcbmltcG9ydCBkM1RpcCBmcm9tICdkMy10aXAnXG5pbXBvcnQgeyBzYW5rZXkgYXMgU2Fua2V5IH0gZnJvbSAnZDMtc2Fua2V5J1xuaW1wb3J0IHsgc2Fua2V5TGlua0hvcml6b250YWwgfSBmcm9tICdkMy1zYW5rZXknXG5cbmNvbnN0IG90aGVyQ29sb3IgPSAnI0NDQydcbmNvbnN0IHNlbGVjdGlvbkNvbG9yID0gJyM5NDBkNDUnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplUGFyYWxsZVNldChkYXRhUGF0aCkge1xuICBjb25zb2xlLmxvZyhcImluaXRpYWxpemVcIik7XG4gIHJldHVybiBhd2FpdCBkMy5jc3YoZGF0YVBhdGgpLnRoZW4oZnVuY3Rpb24gKGRhdGEpe1xuXG4gICAgZGF0YSA9IGRhdGEuZmlsdGVyKGQgPT4gZC5HcmF2aXRlID09PSAnR3JhdmUgb3UgTW9ydGVsJylcblxuICAgIHJldHVybiBkYXRhXG4gIH0pXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBEcmF3UGFyYWxsZWxlU2V0KGcsIGhlaWdodCwgd2lkdGgsIG1hcmdpbiwgZGF0YSkge1xuICBjb25zb2xlLmxvZyhcImRyYXdcIik7XG5cbiAgY29uc3QgZ3JhcGhTaXplID0ge1xuICAgIHdpZHRoOiB3aWR0aCAtIG1hcmdpbi5yaWdodCAtIG1hcmdpbi5sZWZ0LFxuICAgIGhlaWdodDogaGVpZ2h0IC0gbWFyZ2luLmJvdHRvbSAtIG1hcmdpbi50b3BcbiAgfVxuXG4gIGNvbnN0IHRpcCA9IGQzVGlwKCkuYXR0cignY2xhc3MnLCAnZDMtdGlwJykuaHRtbChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZ2V0Q29udGVudHMoZCkgfSlcbiAgZy5jYWxsKHRpcClcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGFbMF0pXG4gIGtleXMucG9wKClcbiAgY29uc3QgZ3JhcGggPSBDcmVhdGVHcmFwaE5vZGVBbmRMaW5rKGtleXMsIGRhdGEpXG5cbiAgY29uc3Qgc2Fua2V5ID0gU2Fua2V5KClcbiAgICAgIC5ub2RlU29ydChudWxsKVxuICAgICAgLmxpbmtTb3J0KG51bGwpXG4gICAgICAubm9kZVdpZHRoKDQpXG4gICAgICAubm9kZVBhZGRpbmcoMjApXG4gICAgICAuZXh0ZW50KFtbMCwgNV0sIFtncmFwaFNpemUud2lkdGgsIGdyYXBoU2l6ZS5oZWlnaHRdXSlcblxuICAgIGNvbnN0IHsgbm9kZXMsIGxpbmtzIH0gPSBzYW5rZXkoe1xuICAgICAgbm9kZXM6IGdyYXBoLm5vZGVzLm1hcChkID0+IE9iamVjdC5hc3NpZ24oe30sIGQpKSxcbiAgICAgIGxpbmtzOiBncmFwaC5saW5rcy5tYXAoZCA9PiBPYmplY3QuYXNzaWduKHt9LCBkKSlcbiAgICB9KVxuXG4gICAgQ3JlYXRlU1ZHTm9kZXMoZywgZGF0YSwgbm9kZXMsIHRpcCwgZ3JhcGhTaXplLmhlaWdodClcbiAgICBDcmVhdGVTVkdMaW5lcyhnLCBsaW5rcywgb3RoZXJDb2xvciwgdGlwKVxuXG4gICAgQ3JlYXRlU1ZHVGV4dEluZm8oZywgZ3JhcGhTaXplLndpZHRoKVxuXG4gICAgc2V0RXZlbnRIYW5kbGVyKGcsIHNlbGVjdGlvbkNvbG9yLCBvdGhlckNvbG9yKVxuXG4gIHJldHVybiBnXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3ROb2RlKGcsIGluZGV4KSB7XG4gIHZhciBub2RlcyA9IGcuc2VsZWN0QWxsKCcuZ3JhcGgtbm9kZScpLmRhdGEoKVxuICAvL2NvbnNvbGUubG9nKFwibm9kZXMgOiBcIiwgbm9kZXMpO1xuICBvbkNsaWNrRXZlbnQoZywgbm9kZXNbaW5kZXhdLCBzZWxlY3Rpb25Db2xvciwgb3RoZXJDb2xvcilcbn1cblxuLyoqXG4gKiBAcGFyYW0ga2V5c1xuICogQHBhcmFtIGRhdGFcbiAqL1xuZnVuY3Rpb24gQ3JlYXRlR3JhcGhOb2RlQW5kTGluayAoa2V5cywgZGF0YSkge1xuICBsZXQgaW5kZXggPSAtMVxuICBjb25zdCBub2RlcyA9IFtdXG4gIGNvbnN0IG5vZGVCeUtleSA9IG5ldyBNYXAoKVxuICBjb25zdCBpbmRleEJ5S2V5ID0gbmV3IE1hcCgpXG4gIGNvbnN0IGxpbmtzID0gW11cblxuICBmb3IgKGNvbnN0IGsgb2Yga2V5cykge1xuICAgIGZvciAoY29uc3QgZCBvZiBkYXRhKSB7XG4gICAgICBjb25zdCBrZXkgPSBKU09OLnN0cmluZ2lmeShbaywgZFtrXV0pXG4gICAgICBpZiAobm9kZUJ5S2V5LmhhcyhrZXkpKSBjb250aW51ZVxuICAgICAgY29uc3Qgbm9kZSA9IHsgbmFtZTogZFtrXSB9XG4gICAgICBub2Rlcy5wdXNoKG5vZGUpXG4gICAgICBub2RlQnlLZXkuc2V0KGtleSwgbm9kZSlcbiAgICAgIGluZGV4QnlLZXkuc2V0KGtleSwgKytpbmRleClcbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBpID0gMTsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICBjb25zdCBhID0ga2V5c1tpIC0gMV1cbiAgICBjb25zdCBiID0ga2V5c1tpXVxuICAgIGNvbnN0IHByZWZpeCA9IGtleXMuc2xpY2UoMCwgaSArIDEpXG4gICAgY29uc3QgbGlua0J5S2V5ID0gbmV3IE1hcCgpXG4gICAgZm9yIChjb25zdCBkIG9mIGRhdGEpIHtcbiAgICAgIGNvbnN0IG5hbWVzID0gcHJlZml4Lm1hcChrID0+IGRba10pXG4gICAgICBjb25zdCBrZXkgPSBKU09OLnN0cmluZ2lmeShuYW1lcylcbiAgICAgIGNvbnN0IHZhbHVlID0gcGFyc2VJbnQoZC5jb3VudCkgfHwgMVxuICAgICAgbGV0IGxpbmsgPSBsaW5rQnlLZXkuZ2V0KGtleSlcbiAgICAgIGlmIChsaW5rKSB7IGxpbmsudmFsdWUgKz0gdmFsdWU7IGNvbnRpbnVlIH1cbiAgICAgIGxpbmsgPSB7XG4gICAgICAgIHNvdXJjZTogaW5kZXhCeUtleS5nZXQoSlNPTi5zdHJpbmdpZnkoW2EsIGRbYV1dKSksXG4gICAgICAgIHRhcmdldDogaW5kZXhCeUtleS5nZXQoSlNPTi5zdHJpbmdpZnkoW2IsIGRbYl1dKSksXG4gICAgICAgIG5hbWVzLFxuICAgICAgICB2YWx1ZVxuICAgICAgfVxuICAgICAgbGlua3MucHVzaChsaW5rKVxuICAgICAgbGlua0J5S2V5LnNldChrZXksIGxpbmspXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgbm9kZXMsIGxpbmtzIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0gZ1xuICogQHBhcmFtIGRhdGFcbiAqIEBwYXJhbSBub2Rlc1xuICogQHBhcmFtIHRpcFxuICogQHBhcmFtIGhlaWdodFxuICovXG5mdW5jdGlvbiBDcmVhdGVTVkdOb2RlcyAoZywgZGF0YSwgbm9kZXMsIHRpcCwgaGVpZ2h0KSB7XG4gIGNvbnN0IGNvdW50ID0gZDMuc3VtKGRhdGEsIGQgPT4gZC5jb3VudClcbiAgdmFyIHkgPSBoZWlnaHRcbiAgY29uc29sZS5sb2coJ2NvdW50IDogJywgY291bnQpXG4gIGNvbnNvbGUubG9nKCdoZWlnaHQgOiAnLCBoZWlnaHQpXG4gIGcuc2VsZWN0QWxsKCcuZ3JhcGgtbm9kZScpXG4gICAgLmRhdGEobm9kZXMpXG4gICAgLmVudGVyKClcbiAgICAuYXBwZW5kKCdnJylcbiAgICAuYXR0cignY2xhc3MnLCAnZ3JhcGgtbm9kZScpXG4gICAgLmFwcGVuZCgncmVjdCcpXG4gICAgLmF0dHIoJ3gnLCBkID0+IGQueDApXG4gICAgLmF0dHIoJ3knLCBkID0+IGQueTApXG4gICAgLmF0dHIoJ2hlaWdodCcsIGQgPT4gZC55MSAtIGQueTApXG4gICAgLmF0dHIoJ3dpZHRoJywgZCA9PiBkLngxIC0gZC54MClcbiAgICAuYXR0cignZmlsbCcsICdibGFjaycpXG4gICAgLm9uKCdtb3VzZW92ZXInLCB0aXAuc2hvdylcbiAgICAub24oJ21vdXNlb3V0JywgdGlwLmhpZGUpXG59XG5cbi8qKlxuICogQHBhcmFtIGdcbiAqIEBwYXJhbSBsaW5rc1xuICogQHBhcmFtIGNvbG9yXG4gKi9cbmZ1bmN0aW9uIENyZWF0ZVNWR0xpbmVzIChnLCBsaW5rcywgY29sb3IsIHRpcCkge1xuICBnLnNlbGVjdEFsbCgnLmdyYXBoLWxpbmUnKVxuICAgIC5kYXRhKGxpbmtzKVxuICAgIC5lbnRlcigpXG4gICAgLmFwcGVuZCgnZycpXG4gICAgLmF0dHIoJ2ZpbGwnLCAnbm9uZScpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ2dyYXBoLWxpbmUnKVxuICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgIC5hdHRyKCdkJywgc2Fua2V5TGlua0hvcml6b250YWwoKSlcbiAgICAuYXR0cignc3Ryb2tlJywgZCA9PiBjb2xvcilcbiAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgZCA9PiBkLndpZHRoKVxuICAgIC5zdHlsZSgnbWl4LWJsZW5kLW1vZGUnLCAnbXVsdGlwbHknKVxuICAgIC5vbignbW91c2VvdmVyJywgdGlwLnNob3cpXG4gICAgLm9uKCdtb3VzZW91dCcsIHRpcC5oaWRlKVxufVxuXG4vKipcbiAqIEBwYXJhbSBnXG4gKiBAcGFyYW0gd2lkdGhcbiAqL1xuZnVuY3Rpb24gQ3JlYXRlU1ZHVGV4dEluZm8gKGcsIHdpZHRoKSB7XG4gIGcuc2VsZWN0QWxsKCcuaW5mbycpXG4gICAgLnJlbW92ZSgpXG5cbiAgZy5zZWxlY3RBbGwoJy5ncmFwaC1ub2RlJylcbiAgICAuc3R5bGUoJ2ZvbnQnLCAnMjBweCBzYW5zLXNlcmlmIGJvbGRlcicpXG4gICAgLmFwcGVuZCgndGV4dCcpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ2luZm8nKVxuICAgIC5hdHRyKCd4JywgZCA9PiBkLngwIDwgd2lkdGggLyAyID8gZC54MSArIDYgOiBkLngwIC0gNilcbiAgICAuYXR0cigneScsIGQgPT4gKGQueTEgKyBkLnkwKSAvIDIpXG4gICAgLmF0dHIoJ2R5JywgJzAuMzVlbScpXG4gICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgZCA9PiBkLngwIDwgd2lkdGggLyAyID8gJ3N0YXJ0JyA6ICdlbmQnKVxuICAgIC50ZXh0KGQgPT4gZC5uYW1lKVxuICAgIC5hcHBlbmQoJ3RzcGFuJylcbiAgICAuYXR0cignY2xhc3MnLCAnaW5mbycpXG4gICAgLmF0dHIoJ2ZpbGwtb3BhY2l0eScsIDAuNylcbn1cblxuLyoqXG4gKiBEZWZpbmVzIHRoZSBjb250ZW50cyBvZiB0aGUgdG9vbHRpcC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZCBUaGUgZGF0YSBhc3NvY2lhdGVkIHRvIHRoZSBob3ZlcmVkIGVsZW1lbnRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSB0b29sdGlwIGNvbnRlbnRzXG4gKi9cbmZ1bmN0aW9uIGdldENvbnRlbnRzIChkKSB7XG4gIHZhciBkYXRhID0gZDMuc2VsZWN0KGQudGFyZ2V0KS5kYXRhKClcbiAgcmV0dXJuIFwiPHNwYW4gaWQ9J3Rvb2x0aXAtdGl0bGUnPlwiICsgZGF0YVswXS52YWx1ZSArICc8L3NwYW4+J1xufVxuXG4vKipcbiAqIFNldHMgdXAgYW4gZXZlbnQgaGFuZGxlclxuICpcbiAqIEBwYXJhbSBnXG4gKiBAcGFyYW0gY29sb3JTY2FsZVxuICogQHBhcmFtIG90aGVyQ29sb3JcbiAqL1xuZnVuY3Rpb24gc2V0RXZlbnRIYW5kbGVyIChnLCBzZWxlY3Rpb25Db2xvciwgb3RoZXJDb2xvcikge1xuICAvLyBUT0RPIDogU2VsZWN0IHRoZSBzcXVhcmVzIGFuZCBzZXQgdGhlaXIgZXZlbnQgaGFuZGxlcnNcbiAgdmFyIG5vZGVzID0gZy5zZWxlY3RBbGwoJy5ncmFwaC1ub2RlJylcblxuICBjb25zb2xlLmxvZygndmFsdWVzIDogJywgbm9kZXMpXG5cbiAgbm9kZXMub24oJ2NsaWNrJywgZnVuY3Rpb24gKGQpIHtcbiAgICB2YXIgZGF0YSA9IGQzLnNlbGVjdChkLnRhcmdldCkuZGF0YSgpO1xuICAgIG9uQ2xpY2tFdmVudChnLCBkYXRhWzBdLCBzZWxlY3Rpb25Db2xvciwgb3RoZXJDb2xvcilcbiAgfSlcbn1cblxuLyoqXG4gKiBAcGFyYW0gZ1xuICogQHBhcmFtIGRhdGFcbiAqIEBwYXJhbSBjb2xvclNjYWxlXG4gKiBAcGFyYW0gb3RoZXJDb2xvclxuICovXG5mdW5jdGlvbiBvbkNsaWNrRXZlbnQgKGcsIGRhdGEsIHNlbGVjdGlvbkNvbG9yLCBvdGhlckNvbG9yKSB7XG4gIHZhciBrZXlzID0gW11cblxuICBBZGRTb3VyY2VMaW5rc0tleXMoa2V5cywgZGF0YS5zb3VyY2VMaW5rcylcbiAgQWRkVGFyZ2V0TGlua3NLZXlzKGtleXMsIGRhdGEudGFyZ2V0TGlua3MpXG5cblxuICBnLnNlbGVjdEFsbCgnLmdyYXBoLWxpbmUnKVxuICAgIC5zZWxlY3QoJ3BhdGgnKVxuICAgIC5hdHRyKCdzdHJva2UnLCBkID0+IGtleXMuaW5jbHVkZXMoZC5pbmRleCkgPyBzZWxlY3Rpb25Db2xvciA6IG90aGVyQ29sb3IpXG59XG5cbi8qKlxuICogQHBhcmFtIGtleXNcbiAqIEBwYXJhbSBzb3VyY2VzXG4gKi9cbmZ1bmN0aW9uIEFkZFNvdXJjZUxpbmtzS2V5cyAoa2V5cywgc291cmNlcykge1xuICBjb25zb2xlLmxvZygnc291cmNlcycsIHNvdXJjZXMpXG4gIHNvdXJjZXMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICBpZiAoIWtleXMuaW5jbHVkZXMoZWxlbWVudC5pbmRleCkpIHsga2V5cy5wdXNoKGVsZW1lbnQuaW5kZXgpIH1cbiAgICBBZGRTb3VyY2VMaW5rc0tleXMoa2V5cywgZWxlbWVudC50YXJnZXQuc291cmNlTGlua3MpXG4gIH0pXG59XG5cbi8qKlxuICogQHBhcmFtIGtleXNcbiAqIEBwYXJhbSB0YXJnZXRzXG4gKi9cbmZ1bmN0aW9uIEFkZFRhcmdldExpbmtzS2V5cyAoa2V5cywgdGFyZ2V0cykge1xuICBjb25zb2xlLmxvZygndGFyZ2V0cycsIHRhcmdldHMpXG4gIHRhcmdldHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICBpZiAoIWtleXMuaW5jbHVkZXMoZWxlbWVudC5pbmRleCkpIHsga2V5cy5wdXNoKGVsZW1lbnQuaW5kZXgpIH1cbiAgICBBZGRUYXJnZXRMaW5rc0tleXMoa2V5cywgZWxlbWVudC5zb3VyY2UudGFyZ2V0TGlua3MpXG4gIH0pXG59IiwiLyoqXG4gKiB2aXouanNcbiAqID09PT09PT1cbiAqIEZpbGUgdXNlZCB0byBkZWZpbmUgdGhlIHZpc3VhbGl6YXRpb24gc2VjdGlvbi5cbiAqL1xuXG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5pbXBvcnQgKiBhcyBtYXAgZnJvbSBcIi4vbWFwLmpzXCI7XG5pbXBvcnQge1xuICBnZXRTY2FsZVgsXG4gIGdldFNjYWxlWSxcbiAgZHJhd0xpbmVDaGFydEF4aXMsXG4gIHByb2Nlc3NEYXRhLFxuICBzdGVwMUxpbmVDaGFydCxcbiAgaW5pdExpbmUsIHN0ZXAyTGluZUNoYXJ0LCBzdGVwM0xpbmVDaGFydCwgc3RlcDRMaW5lQ2hhcnQsIGluaXRBbm5vdGF0aW9uXG59IGZyb20gXCIuL2xpbmVjaGFydFwiO1xuaW1wb3J0IHtEcmF3UGFyYWxsZWxlU2V0LCBpbml0aWFsaXplUGFyYWxsZVNldCwgc2VsZWN0Tm9kZX0gZnJvbSBcIi4vcGFyYWxsZWxlU2V0Q2hhcnRcIlxuXG5cbmNvbnN0IGNvbmZpZyA9IHtcbiAgd2lkdGg6IDEwMDAsXG4gIGhlaWdodDogNTAwLFxuICBtYXJnaW46IHtcbiAgICB0b3A6IDEwMCxcbiAgICByaWdodDogMTAwLFxuICAgIGJvdHRvbTogMTAwLFxuICAgIGxlZnQ6IDEwMFxuICB9XG59XG5jb25zdCBmdWxsV2lkdGggPSBjb25maWcubWFyZ2luLmxlZnQgKyBjb25maWcud2lkdGggKyBjb25maWcubWFyZ2luLnJpZ2h0O1xuY29uc3QgZnVsbEhlaWdodCA9IGNvbmZpZy5tYXJnaW4udG9wICsgY29uZmlnLmhlaWdodCArIGNvbmZpZy5tYXJnaW4uYm90dG9tO1xuXG5jb25zdCB2aXNDb250YWluZXIxID0gZDMuc2VsZWN0KCcjdml6X2xpbmVfY2hhcnQnKTtcbmNvbnN0IHN2ZzEgPSB2aXNDb250YWluZXIxLmFwcGVuZCgnc3ZnJylcbiAgLmF0dHIoJ3ZpZXdCb3gnLCBgMCAwICR7ZnVsbFdpZHRofSAke2Z1bGxIZWlnaHR9YClcbiAgLmF0dHIoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pZFlNaWQnKTtcbmNvbnN0IGcxID0gc3ZnMS5hcHBlbmQoJ2cnKVxuICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke2NvbmZpZy5tYXJnaW4ubGVmdH0sICR7Y29uZmlnLm1hcmdpbi50b3B9KWApO1xuXG5jb25zdCB2aXNDb250YWluZXIyID0gZDMuc2VsZWN0KCcjdml6MicpO1xuY29uc3Qgc3ZnMiA9IHZpc0NvbnRhaW5lcjIuYXBwZW5kKCdzdmcnKVxuICAuYXR0cigndmlld0JveCcsIGAwIDAgJHsyNDAwfSAkezE0MDB9YClcbiAgLmF0dHIoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pZFlNaWQnKTtcbmNvbnN0IGcyID0gc3ZnMi5hcHBlbmQoJ2cnKVxuICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke2NvbmZpZy5tYXJnaW4ubGVmdH0sICR7Y29uZmlnLm1hcmdpbi50b3B9KWApO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcblxuICBsZXQgbGluZWNoYXJ0RGF0YUFsbCA9IGF3YWl0IGQzLmNzdignLi9kYXRhL3JvbGxpbmc3X3ZpejFfYWxsX3ZlaGljdWxlX2RhdGUuY3N2Jyk7XG4gIGxldCBsaW5lY2hhcnREYXRhVHlwZSA9IGF3YWl0IGQzLmNzdignLi9kYXRhL3JvbGxpbmc3X3ZpejJfYWNjX2J5X3R5cGVfZGF0ZS5jc3YnKTtcbiAgLy8gbGV0IGxpbmVjaGFydENhbWlvbiA9IGF3YWl0IGQzLmNzdignLi9kYXRhL3JvbGxpbmc3X3ZpejNfYWNjX2NhbWlvbl9kYXRlLmNzdicpO1xuICBsZXQgcHNldDEgPSBhd2FpdCBpbml0aWFsaXplUGFyYWxsZVNldCgnLi9kYXRhL3BzZXRfZW52X3JvdXRlX3ZpdC5jc3YnKTtcblxuICBsZXQgZGF0YUFsbCwgZGF0YU90aGVyLCBkYXRhQ2FtaW9uXG4gIFtkYXRhQWxsLCBkYXRhT3RoZXIsIGRhdGFDYW1pb25dID0gcHJvY2Vzc0RhdGEobGluZWNoYXJ0RGF0YUFsbCwgbGluZWNoYXJ0RGF0YVR5cGUpXG4gIGNvbnN0IG1pblkgPSAwXG4gIGxldCBbbWF4U2NhbGVZMSwgbWF4U2NhbGVZMl0gPSBbZDMubWF4KGRhdGFBbGwsIGQ9PmQudmFsdWUpLCBkMy5tYXgoZGF0YUNhbWlvbiwgZD0+ZC52YWx1ZSldXG4gIGNvbnN0IGRhdGVzID0gQXJyYXkuZnJvbShuZXcgU2V0KGRhdGFBbGwubWFwKGQgPT4gZC5kYXRlKSkpXG4gIGxldCBbc2NhbGVYLCBzY2FsZVkxLCBzY2FsZVkyXSA9IFtnZXRTY2FsZVgoZGF0ZXMsIGNvbmZpZy53aWR0aCksXG4gICAgZ2V0U2NhbGVZKG1pblksIG1heFNjYWxlWTEsIGNvbmZpZy5oZWlnaHQpLFxuICAgIGdldFNjYWxlWShtaW5ZLCBtYXhTY2FsZVkyLCBjb25maWcuaGVpZ2h0KV1cblxuXG4gIGRyYXdMaW5lQ2hhcnRBeGlzKGcxLCBzY2FsZVgsIHNjYWxlWTEsIGNvbmZpZy53aWR0aCwgY29uZmlnLmhlaWdodClcbiAgY29uc3QgbGluZUFsbCA9IGluaXRMaW5lKGRhdGFBbGwsIHNjYWxlWCwgc2NhbGVZMSwgZzEsIFwiIzJjNGFhZFwiKVxuICBjb25zdCBsaW5lT3RoZXIgPSBpbml0TGluZShkYXRhT3RoZXIsIHNjYWxlWCwgc2NhbGVZMSwgZzEsIFwiIzAwMDAwMFwiKVxuICBjb25zdCBsaW5lQ2FtaW9uID0gaW5pdExpbmUoZGF0YUNhbWlvbiwgc2NhbGVYLCBzY2FsZVkxLCBnMSwgXCIjOGQwNzJiXCIpXG4gIGNvbnN0IGxpbmVDYW1pb25ab29tID0gaW5pdExpbmUoZGF0YUNhbWlvbiwgc2NhbGVYLCBzY2FsZVkyLCBnMSwgXCIjOGQwNzJiXCIpXG5cbiAgbGV0IFthbm5vdGF0aW9uMSwgYW5ub3RhdGlvbjJdID0gaW5pdEFubm90YXRpb24oZzEsIHNjYWxlWCwgc2NhbGVZMSwgc2NhbGVZMiwgY29uZmlnKVxuXG5cbiAgLy8gZHJhd0xpbmVDaGFydEF4aXMoZzEsIHNjYWxlWCwgc2NhbGVZMSwgY29uZmlnLndpZHRoLCBjb25maWcuaGVpZ2h0KVxuICAvLyBkcmF3T25lTGluZShsaW5lY2hhcnRBbGwsIHNjYWxlWCwgc2NhbGVZMSwgZzEsIFwiIzJjNGFhZFwiKVxuICAvLyB0cmFuc2l0aW9uWUF4aXMoc2NhbGVZMilcbiAgLy8gZHJhd09uZUxpbmUobGluZWNoYXJ0Q2FtaW9uLCBzY2FsZVgsIHNjYWxlWTIsIGcxLCBcIiNjZTBkMGRcIilcblxuICBtYXAuYnVpbGRNYXAoJ21hcCcpO1xuXG4gIHJldHVybiBbXG4gIFtcbiAgICAoKSA9PiB7fSxcbiAgICAoKSA9PiB7fSxcbiAgICAoKSA9PiB7fSxcbiAgICAoKSA9PiB7fVxuICBdLFxuICAgIFtcbiAgICAgICgpID0+IHtzdGVwMUxpbmVDaGFydChsaW5lQWxsLCBhbm5vdGF0aW9uMSl9LFxuICAgICAgKCkgPT4ge3N0ZXAyTGluZUNoYXJ0KGxpbmVBbGwsIGxpbmVPdGhlciwgbGluZUNhbWlvbiwgYW5ub3RhdGlvbjEpfSxcbiAgICAgICgpID0+IHtzdGVwM0xpbmVDaGFydChsaW5lQWxsLCBsaW5lT3RoZXIsIGxpbmVDYW1pb24sIGFubm90YXRpb24xLCBhbm5vdGF0aW9uMiwgbGluZUNhbWlvblpvb20sIHNjYWxlWTEpfSxcbiAgICAgICgpID0+IHtzdGVwNExpbmVDaGFydChsaW5lT3RoZXIsIGxpbmVDYW1pb24sIHNjYWxlWTIsIGxpbmVDYW1pb25ab29tLGFubm90YXRpb24yKX1cbiAgXSxcbiAgICBbXG4gICAgICAoKSA9PiB7fSxcbiAgICAgICgpID0+IHtEcmF3UGFyYWxsZWxlU2V0KGcyLCAxMDAwLCAyMDAwLCBjb25maWcubWFyZ2luLCBwc2V0MSl9LFxuICAgICAgKCkgPT4ge3NlbGVjdE5vZGUoZzIsIDIpfSxcbiAgICAgICgpID0+IHtzZWxlY3ROb2RlKGcyLCAzKX1cbiAgICBdXG4gIF1cbn1cbiIsIi8qKlxuICogc2Nyb2xsZXIuanNcbiAqID09PT09PT09PT09XG4gKiBEZWZpbmVzIHRoZSBsb2dpYyB1c2VkIGJ5IHRoZSBzY3JvbGxlci4gVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCBleHRlcm5hbCBkZXBlbmRlbmNpZXMgYW5kIHVzZXMgbmF0aXZlIGZ1bmN0aW9uc1xuICogb2YgdGhlIGJyb3dzZXIuXG4gKlxuICogLyFcXCBQTEVBU0UsIERPIE5PVCBNT0RJRlkgVEhJUyBGSUxFLlxuICpcbiAqIEBhdXRob3IgQW50b2luZSBCw6lsYW5kIDxhYmVsYW5kQGxlZGV2b2lyLmNvbT5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGVmaW5lcyBhIHN0ZXAgYXNzb2NpYXRlZCB3aXRoIGEgc3BlY2lmaWMgdmlzdWFsaXphdGlvbi4gQSBzdGVwIGlzIGFjdGl2YXRlZCBvciBkZWFjdGl2YXRlZCBiYXNlZCBvbiB0aGUgc2Nyb2xsXG4gKiBwb3NpdGlvbi4gVGhpcyBjbGFzcyBpcyB1c2VkIGJ5IHRoZSBzY3JvbGxlciBmdW5jdGlvbi5cbiAqL1xuY2xhc3MgU2Nyb2xsZXJTdGVwIHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIFNjcm9sbGVyU3RlcC5cbiAgICpcbiAgICogQHBhcmFtIGVsICAgICAgICAgIFRoZSBuYXRpdmUgZWxlbWVudCB0aGF0IHJlcHJlc2VudHMgdGhlIHN0ZXAgaW4gdGhlIEhUTUwgZG9jdW1lbnQuXG4gICAqIEBwYXJhbSBpbmRleCAgICAgICBUaGUgaW5kZXggb2YgdGhlIHN0ZXAuXG4gICAqIEBwYXJhbSBjYWxsYmFjayAgICBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBzdGVwIGlzIGFjdGl2YXRlLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWwsIGluZGV4LCBjYWxsYmFjaykge1xuICAgIHRoaXMuZWwgPSBlbDtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX2lzQWN0aXZhdGUgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBY3RpdmF0ZXMgdGhlIGN1cnJlbnQgc3RlcC5cbiAgICpcbiAgICogQHBhcmFtIHNjcm9sbERpcmVjdGlvbiAgIFRoZSBjdXJyZW50IHNjcm9sbCBkaXJlY3Rpb24uXG4gICAqL1xuICBhY3RpdmF0ZShzY3JvbGxEaXJlY3Rpb24pIHtcbiAgICBpZiAodGhpcy5faXNBY3RpdmF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9pc0FjdGl2YXRlID0gdHJ1ZTtcbiAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgIHRoaXMuY2FsbGJhY2soc2Nyb2xsRGlyZWN0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWFjdGl2YXRlcyB0aGUgY3VycmVudCBzdGVwLlxuICAgKi9cbiAgZGVhY3RpdmF0ZSgpIHtcbiAgICBpZiAoIXRoaXMuX2lzQWN0aXZhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5faXNBY3RpdmF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWZpbmVzIHRoZSBzY3JvbGwgZGlyZWN0aW9ucy5cbiAqXG4gKiBAdHlwZSB7e3VwOiBzdHJpbmcsIGRvd246IHN0cmluZ319XG4gKi9cbmV4cG9ydCBjb25zdCBzY3JvbGxEaXJlY3Rpb25zID0ge1xuICB1cDogJ3VwJyxcbiAgZG93bjogJ2Rvd24nXG59O1xuXG4vKipcbiAqIERlZmluZXMgdGhlIHNjcm9sbGVyIHRvIHVzZSB3aXRoIHRoZSBMZSBEZXZvaXIncyBzY3JvbGx5dGVsbGluZyBhcnRpY2xlcy4gUGxlYXNlIHNlZSBcIlJFQURNRS5tZFwiXG4gKiB0byBrbm93IGhvdyB0byB1c2UgaXQuXG4gKlxuICogLyFcXCBCZSBzdXJlIHRvIHVzZSB0aGUgZ29vZCBDU1MgY2xhc3MgbmFtZXMgaW4geW91ciBIVE1MIGZpbGUgYmVmb3JlIHRvIHVzZSB0aGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIGNhbGxiYWNrcyAgIEEgbXVsdGktZGltZW5zaW9uYWwgYXJyYXkgb2YgY2FsbGJhY2tzIHRvIHVzZSB3aXRoIGVhY2ggc3RlcC5cbiAqIEByZXR1cm5zIHsqfSAgICAgICBUaGUgaW5zdGFuY2Ugb2YgdGhlIHNjcm9sbGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2Nyb2xsZXIoY2FsbGJhY2tzKSB7XG4gIGxldCBfb2Zmc2V0VG9wID0gMDtcbiAgbGV0IF9vZmZzZXRCb3R0b20gPSAwO1xuXG4gIGxldCBpbm5lckhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgbGV0IGlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgbGV0IGxhc3RTY3JvbGwgPSAwO1xuICBsZXQgc3RlcHMgPSBbXTtcbiAgbGV0IHZpeiA9IFtdO1xuICBsZXQgdmlzaWJsZVN0ZXBzID0gW107XG5cbiAgY29uc3QgYXJ0aWNsZVJlbWluZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFydGljbGUtcmVtaW5kZXInKTtcbiAgY29uc3Qgc2Nyb2xsUHJvZ3Jlc3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkZXIgPiAucHJvZ3Jlc3MnKTtcbiAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW50cm8tc2VjdGlvbiBoMScpO1xuXG4gIGNvbnN0IHZpelNlY3Rpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnZpei1zZWN0aW9uJyk7XG4gIGNvbnNvbGUubG9nKGNhbGxiYWNrcylcbiAgY29uc29sZS5sb2coY2FsbGJhY2tzLmxlbmd0aClcblxuICBpZiAodml6U2VjdGlvbnMubGVuZ3RoICE9PSBjYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgbnVtYmVyIG9mIHZpeiBzZWN0aW9ucyAoJHt2aXpTZWN0aW9ucy5sZW5ndGh9KSBtaXNtYXRjaCB3aXRoIHRoZSBsZW5ndGggb2YgdGhlIGZpcnN0IGAgK1xuICAgICAgYGRpbWVuc2lvbiBvZiB0aGUgY2FsbGJhY2tzIGFycmF5ICgke2NhbGxiYWNrcy5sZW5ndGh9KS4gUGxlYXNlLCBiZSBzdXJlIHRoYXQgdGhlIHR3byBlbGVtZW50cyBgICtcbiAgICAgIGBoYXZlIHRoZSBzYW1lIHNpemUuYCk7XG4gIH1cbiAgdml6U2VjdGlvbnMuZm9yRWFjaCgodml6U2VjdGlvbiwgaSkgPT4ge1xuICAgIGNvbnN0IHNlY3Rpb25zID0gWy4uLnZpelNlY3Rpb24ucXVlcnlTZWxlY3RvckFsbCgnc2VjdGlvbicpXTtcbiAgICBpZiAoc2VjdGlvbnMubGVuZ3RoICE9PSBjYWxsYmFja3NbaV0ubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBudW1iZXIgb2Ygc3RlcHMgKCR7c2VjdGlvbnMubGVuZ3RofSkgaW4gdGhlIHZpeiBzZWN0aW9uICMke2kgKyAxfSBtaXNtYXRjaCB3aXRoIHRoZSBgICtcbiAgICAgICAgYG51bWJlciBvZiBjYWxsYmFja3Mgc3BlY2lmaWVkICgke2NhbGxiYWNrc1tpXS5sZW5ndGh9KSBhdCB0aGUgaW5kZXggXCIke2l9XCIuIFBsZWFzZSwgYmUgc3VyZSB0aGF0IHRoZSB0d28gYCArXG4gICAgICAgIGBlbGVtZW50cyBoYXZlIHRoZSBzYW1lIHNpemUuYCk7XG4gICAgfVxuICAgIHN0ZXBzID0gc3RlcHMuY29uY2F0KHNlY3Rpb25zLm1hcCgoZSwgaikgPT4gbmV3IFNjcm9sbGVyU3RlcChlLCBgJHtpfS0ke2p9YCwgY2FsbGJhY2tzW2ldW2pdKSkpO1xuICAgIHZpeiA9IHZpei5jb25jYXQodml6LCB2aXpTZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy52aXogPiAqJykpO1xuICB9KTtcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgZGlzcGxheSBiYXNlZCBvbiBzY3JvbGxiYXIgcG9zaXRpb24uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdCBfdXBkYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRTY3JvbGwgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgICBzdGVwcy5mb3JFYWNoKHN0ZXAgPT4ge1xuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgc3RlcCBpcyBpbiB0aGUgdmlld3BvcnQuXG4gICAgICBjb25zdCBib3VuZGluZ1JlY3QgPSBzdGVwLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgaWYgKGlubmVySGVpZ2h0IC0gYm91bmRpbmdSZWN0LnRvcCAtIF9vZmZzZXRCb3R0b20gPiAwXG4gICAgICAgICYmIGJvdW5kaW5nUmVjdC50b3AgKyBib3VuZGluZ1JlY3QuaGVpZ2h0IC0gX29mZnNldFRvcCA+IDApIHtcbiAgICAgICAgdmlzaWJsZVN0ZXBzLnB1c2goc3RlcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGVwLmRlYWN0aXZhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIERpc3BsYXkgdGhlIHRpdGxlIGFzIGEgcmVtaW5kZXIgd2hlbiB0aGUgbWFpbiBhcnRpY2xlIHRpdGxlIGlzIGhpZGRlbi5cbiAgICBjb25zdCBpc0FydGljbGVSZW1pbmRlckRpc3BsYXllZCA9IHRpdGxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSA8PSAwO1xuICAgIGNvbnN0IGlzQXJ0aWNsZVJlbWluZGVySXNWaXNpYmxlID0gYXJ0aWNsZVJlbWluZGVyLmNsYXNzTGlzdC5jb250YWlucygndmlzaWJsZScpO1xuICAgIGlmIChpc0FydGljbGVSZW1pbmRlckRpc3BsYXllZCAmJiAhaXNBcnRpY2xlUmVtaW5kZXJJc1Zpc2libGUpIHtcbiAgICAgIGFydGljbGVSZW1pbmRlci5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJylcbiAgICB9IGVsc2UgaWYgKCFpc0FydGljbGVSZW1pbmRlckRpc3BsYXllZCAmJiBpc0FydGljbGVSZW1pbmRlcklzVmlzaWJsZSkge1xuICAgICAgYXJ0aWNsZVJlbWluZGVyLmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKVxuICAgIH1cblxuICAgIC8vIEZvciB0aGUgdmlzaWJsZSBzdGVwcywgY2hvb3NlIHRoZSBnb29kIG9uZSBiYXNlZCBvbiB0aGUgc2Nyb2xsIGRpcmVjdGlvbi5cbiAgICB2aXNpYmxlU3RlcHMuZm9yRWFjaCgoc2VjdGlvbiwgaSkgPT4ge1xuICAgICAgaWYgKGN1cnJlbnRTY3JvbGwgPj0gbGFzdFNjcm9sbCkgeyAvLyBTY3JvbGwgZG93biAo4oaTKVxuICAgICAgICBpZiAoaSA9PT0gdmlzaWJsZVN0ZXBzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBzZWN0aW9uLmFjdGl2YXRlKHNjcm9sbERpcmVjdGlvbnMuZG93bik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VjdGlvbi5kZWFjdGl2YXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7IC8vIFNjcm9sbCB1cCAo4oaRKVxuICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgIHNlY3Rpb24uYWN0aXZhdGUoc2Nyb2xsRGlyZWN0aW9ucy51cCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VjdGlvbi5kZWFjdGl2YXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBfdXBkYXRlU2Nyb2xsUHJvZ3Jlc3MoKTtcblxuICAgIC8vIFJlc2V0IHRoZSB2YXJpYWJsZXMgZm9yIHRoZSBuZXh0IGZ1bmN0aW9uIGNhbGwuXG4gICAgdmlzaWJsZVN0ZXBzID0gW107XG4gICAgbGFzdFNjcm9sbCA9IGN1cnJlbnRTY3JvbGw7XG4gIH07XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHNjcm9sbCBwcm9ncmVzc2lvbiBpbmRpY2F0b3IuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdCBfdXBkYXRlU2Nyb2xsUHJvZ3Jlc3MgPSAoKSA9PiB7XG4gICAgY29uc3Qgd2luU2Nyb2xsID0gZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgICBjb25zdCBoZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICBjb25zdCBzY3JvbGxlZCA9ICh3aW5TY3JvbGwgLyBoZWlnaHQpICogMTAwO1xuICAgIHNjcm9sbFByb2dyZXNzLnN0eWxlLndpZHRoID0gc2Nyb2xsZWQgKyAnJSc7XG4gIH07XG5cbiAgY29uc3QgcHVibGljSW50ZXJmYWNlID0ge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBzY3JvbGxlci4gUGxlYXNlIG5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGNhbiBiZSBvbmx5IGNhbGxlZCBvbmNlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgeyp9IFRoZSBpbnN0YW5jZSBvZiB0aGUgc2Nyb2xsZXIuXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogKCkgPT4ge1xuICAgICAgaWYgKGlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgc2Nyb2xsZXIgaXMgYWxyZWFkeSBpbml0aWFsaXplZC4nKTtcbiAgICAgIH1cbiAgICAgIGlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIF91cGRhdGUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcbiAgICAgICAgaW5uZXJIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgIF91cGRhdGVTY3JvbGxQcm9ncmVzcygpO1xuICAgICAgfSk7XG4gICAgICBpZiAoKHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKSA+IDApIHtcbiAgICAgICAgX3VwZGF0ZSgpO1xuICAgICAgfVxuICAgICAgX3VwZGF0ZVNjcm9sbFByb2dyZXNzKCk7XG4gICAgICByZXR1cm4gcHVibGljSW50ZXJmYWNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHRvcCBvZmZzZXQgdG8gdXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9mZnNldFRvcFxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgaW5zdGFuY2Ugb2YgdGhlIHNjcm9sbGVyLlxuICAgICAqL1xuICAgIG9mZnNldFRvcDogb2Zmc2V0VG9wID0+IHtcbiAgICAgIGlmIChvZmZzZXRUb3AgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gX29mZnNldFRvcDtcbiAgICAgIH1cbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihvZmZzZXRUb3ApKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIG9mZnNldCBtdXN0IGJlIGFuIGludGVnZXIgbnVtYmVyLicpO1xuICAgICAgfVxuICAgICAgX29mZnNldFRvcCA9IG9mZnNldFRvcDtcbiAgICAgIHJldHVybiBwdWJsaWNJbnRlcmZhY2U7XG4gICAgfSAsXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGJvdHRvbSBvZmZzZXQgdG8gdXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9mZnNldEJvdHRvbVxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgaW5zdGFuY2Ugb2YgdGhlIHNjcm9sbGVyLlxuICAgICAqL1xuICAgIG9mZnNldEJvdHRvbTogb2Zmc2V0Qm90dG9tID0+IHtcbiAgICAgIGlmIChvZmZzZXRCb3R0b20gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gX29mZnNldEJvdHRvbTtcbiAgICAgIH1cbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihvZmZzZXRCb3R0b20pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIG9mZnNldCBtdXN0IGJlIGFuIGludGVnZXIgbnVtYmVyLicpO1xuICAgICAgfVxuICAgICAgX29mZnNldEJvdHRvbSA9IG9mZnNldEJvdHRvbTtcbiAgICAgIHJldHVybiBwdWJsaWNJbnRlcmZhY2U7XG4gICAgfVxuICB9O1xuICByZXR1cm4gcHVibGljSW50ZXJmYWNlO1xufVxuIiwiLyoqXG4gKiBhcHAuanNcbiAqID09PT09PVxuICogTWFpbiBmaWxlIG9mIHRoZSBhcHBsaWNhdGlvbi4gVGhpcyBmaWxlIGlzIHVzZWQgdG8gaW5pdGlhbGl6ZSB0aGUgc2Nyb2xsZXIgYW5kIGltcG9ydHMgdGhlIHZpc3VhbGl6YXRpb25zIHVzZWQuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgJy4uL2Fzc2V0cy9zdHlsZXMvc3R5bGUuc2Nzcyc7XG5cbmNvbnN0IGhlYWRlckhlaWdodCA9IDQwO1xuaW1wb3J0IHN0aWNreUJpdHMgZnJvbSAnc3RpY2t5Yml0cydcblxubGV0IGVsZW1lbnRzID0gW107XG5bJy52aXonLCAnLmZ1bGwtcGFnZS1zZWN0aW9uID4gaW1nJywgJy5mdWxsLXBhZ2Utc2VjdGlvbiA+IHZpZGVvJ10uZm9yRWFjaChzZWxlY3RvciA9PiB7XG4gIGVsZW1lbnRzID0gZWxlbWVudHMuY29uY2F0KEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpKTtcbn0pO1xuc3RpY2t5Qml0cyhlbGVtZW50cywgeyBzdGlja3lCaXRTdGlja3lPZmZzZXQ6IGhlYWRlckhlaWdodCB9KTtcblxuaW1wb3J0IHsgaW5pdGlhbGl6ZSBhcyB2MSB9IGZyb20gJy4vdml6JztcbmltcG9ydCB7IHNjcm9sbGVyIH0gZnJvbSAnLi9zY3JvbGxlcic7XG5cblByb21pc2UuYWxsKFt2MSgpXSkudGhlbigoW2NhbGxiYWNrc1YxXSkgPT4gIHtcbiAgc2Nyb2xsZXIoY2FsbGJhY2tzVjEpXG4gICAgLm9mZnNldFRvcChoZWFkZXJIZWlnaHQpXG4gICAgLm9mZnNldEJvdHRvbSgwKVxuICAgIC5pbml0aWFsaXplKCk7XG59KTtcbiJdLCJuYW1lcyI6WyJidWlsZE1hcCIsImRpdl9pZCIsImQzIiwidGhlbiIsImRhdGEiLCJoZXhhZ29ucyIsIm1heEFjYyIsImkiLCJsZW5ndGgiLCJkYXRhTGF0IiwiTE9DX0xBVCIsImRhdGFMb25nIiwiTE9DX0xPTkciLCJoZXgiLCJoMyIsIk1hdGgiLCJtYXgiLCJtYXBib3hnbCIsIm1hcCIsImNvbnRhaW5lciIsInN0eWxlIiwiY2VudGVyIiwiem9vbSIsImludGVyYWN0aXZlIiwib24iLCJ0aHJlc2hvbGQiLCJtYXhWYWx1ZSIsImdlb2pzb24iLCJnZW9qc29uMmgzIiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsInZhbHVlIiwic291cmNlSWQiLCJsYXllcklkIiwic291cmNlIiwiZ2V0U291cmNlIiwiYWRkU291cmNlIiwidHlwZSIsImFkZExheWVyIiwiaWQiLCJwYWludCIsInNldERhdGEiLCJzZXRQYWludFByb3BlcnR5IiwicHJvcGVydHkiLCJzdG9wcyIsImNvbG9yU2NhbGUiLCJyZW5kZXJIZXhlcyIsImdldFNjYWxlWCIsImRhdGVzIiwid2lkdGgiLCJkb21haW4iLCJyYW5nZSIsImdldFNjYWxlWSIsIm1pbiIsImhlaWdodCIsInRyYW5zaXRpb25ZQXhpcyIsInkiLCJkZWxheSIsInRyYW5zaXRpb24iLCJjYWxsIiwicHJvY2Vzc0RhdGEiLCJkYXRhMSIsImRhdGEyIiwiZCIsImRhdGUiLCJEYXRlIiwiTm9tYnJlcyIsIlR5cGVzIiwiZHJhd0xpbmVDaGFydEF4aXMiLCJnIiwieCIsInN2ZyIsImFwcGVuZCIsImF0dHIiLCJ0aWNrU2l6ZU91dGVyIiwiZHJhd1hBeGlzIiwic2NhbGUiLCJkcmF3WUF4aXMiLCJnZXRBbm5vdGF0aW9uIiwieFNjYWxlIiwieVNjYWxlIiwibWFyZ2luIiwiZ3JhcGhTaXplIiwidml6IiwiYW5ub3RhdGlvbiIsIm5vdGUiLCJsYWJlbCIsInN1YmplY3QiLCJ5MSIsInRvcCIsInkyIiwiYm90dG9tIiwidGl0bGUiLCJjb25uZWN0b3IiLCJlbmQiLCJkM0Fubm90YXRpb24iLCJkaXNhYmxlIiwiZHJhd0Fubm90YXRpb25zVml6IiwiYW5ub3RhdGlvbnMiLCJsaW5lVHlwZSIsIm9yaWVudGF0aW9uIiwiYWxpZ24iLCJtYWtlQW5ub3RhdGlvbnMiLCJhY2Nlc3NvcnMiLCJ0ZXh0V3JhcCIsImluaXRBbm5vdGF0aW9uIiwieVNjYWxlMSIsInlTY2FsZTIiLCJjb25maWciLCJhbm5vdGF0aW9uMSIsImFubm90YXRpb24yIiwiYTEiLCJhMiIsImluaXRMaW5lIiwiY29sb3IiLCJzZWxlY3RBbGwiLCJqb2luIiwic3RlcDFMaW5lQ2hhcnQiLCJsaW5lMSIsImNvbnNvbGUiLCJsb2ciLCJzdGVwMkxpbmVDaGFydCIsImxpbmUyIiwibGluZTMiLCJzdGVwM0xpbmVDaGFydCIsImxpbmU0Iiwic3RlcDRMaW5lQ2hhcnQiLCJvdGhlckNvbG9yIiwic2VsZWN0aW9uQ29sb3IiLCJpbml0aWFsaXplUGFyYWxsZVNldCIsImRhdGFQYXRoIiwiR3Jhdml0ZSIsIkRyYXdQYXJhbGxlbGVTZXQiLCJyaWdodCIsImxlZnQiLCJ0aXAiLCJkM1RpcCIsImh0bWwiLCJnZXRDb250ZW50cyIsInBvcCIsImdyYXBoIiwiQ3JlYXRlR3JhcGhOb2RlQW5kTGluayIsInNhbmtleSIsIlNhbmtleSIsIm5vZGVTb3J0IiwibGlua1NvcnQiLCJub2RlV2lkdGgiLCJub2RlUGFkZGluZyIsImV4dGVudCIsIm5vZGVzIiwiYXNzaWduIiwibGlua3MiLCJDcmVhdGVTVkdOb2RlcyIsIkNyZWF0ZVNWR0xpbmVzIiwiQ3JlYXRlU1ZHVGV4dEluZm8iLCJzZXRFdmVudEhhbmRsZXIiLCJzZWxlY3ROb2RlIiwiaW5kZXgiLCJvbkNsaWNrRXZlbnQiLCJub2RlQnlLZXkiLCJNYXAiLCJpbmRleEJ5S2V5IiwiayIsImtleSIsIkpTT04iLCJzdHJpbmdpZnkiLCJoYXMiLCJub2RlIiwibmFtZSIsInB1c2giLCJzZXQiLCJhIiwiYiIsInByZWZpeCIsInNsaWNlIiwibGlua0J5S2V5IiwibmFtZXMiLCJwYXJzZUludCIsImNvdW50IiwibGluayIsImdldCIsInRhcmdldCIsImVudGVyIiwieDAiLCJ5MCIsIngxIiwic2hvdyIsImhpZGUiLCJzYW5rZXlMaW5rSG9yaXpvbnRhbCIsInJlbW92ZSIsInRleHQiLCJBZGRTb3VyY2VMaW5rc0tleXMiLCJzb3VyY2VMaW5rcyIsIkFkZFRhcmdldExpbmtzS2V5cyIsInRhcmdldExpbmtzIiwic2VsZWN0IiwiaW5jbHVkZXMiLCJzb3VyY2VzIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJ0YXJnZXRzIiwiZnVsbFdpZHRoIiwiZnVsbEhlaWdodCIsImcxIiwiZzIiLCJsaW5lY2hhcnREYXRhQWxsIiwibGluZWNoYXJ0RGF0YVR5cGUiLCJwc2V0MSIsImRhdGFBbGwiLCJkYXRhT3RoZXIiLCJkYXRhQ2FtaW9uIiwibWF4U2NhbGVZMSIsIm1heFNjYWxlWTIiLCJBcnJheSIsImZyb20iLCJTZXQiLCJzY2FsZVkyIiwic2NhbGVYIiwic2NhbGVZMSIsImxpbmVBbGwiLCJsaW5lT3RoZXIiLCJsaW5lQ2FtaW9uIiwibGluZUNhbWlvblpvb20iLCJTY3JvbGxlclN0ZXAiLCJlbCIsImNhbGxiYWNrIiwidGhpcyIsIl9pc0FjdGl2YXRlIiwic2Nyb2xsRGlyZWN0aW9uIiwiY2xhc3NMaXN0IiwiYWRkIiwiZWxlbWVudHMiLCJzZWxlY3RvciIsImNvbmNhdCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsInN0aWNreUJpdHMiLCJzdGlja3lCaXRTdGlja3lPZmZzZXQiLCJQcm9taXNlIiwiYWxsIiwidjEiLCJjYWxsYmFja3MiLCJfb2Zmc2V0VG9wIiwiX29mZnNldEJvdHRvbSIsImlubmVySGVpZ2h0Iiwid2luZG93IiwiaXNJbml0aWFsaXplZCIsImxhc3RTY3JvbGwiLCJzdGVwcyIsInZpc2libGVTdGVwcyIsImFydGljbGVSZW1pbmRlciIsInF1ZXJ5U2VsZWN0b3IiLCJzY3JvbGxQcm9ncmVzcyIsInZpelNlY3Rpb25zIiwiRXJyb3IiLCJ2aXpTZWN0aW9uIiwic2VjdGlvbnMiLCJlIiwiaiIsIl91cGRhdGUiLCJjdXJyZW50U2Nyb2xsIiwicGFnZVlPZmZzZXQiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JvbGxUb3AiLCJzdGVwIiwiYm91bmRpbmdSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZGVhY3RpdmF0ZSIsImlzQXJ0aWNsZVJlbWluZGVyRGlzcGxheWVkIiwiaXNBcnRpY2xlUmVtaW5kZXJJc1Zpc2libGUiLCJjb250YWlucyIsInNlY3Rpb24iLCJhY3RpdmF0ZSIsIl91cGRhdGVTY3JvbGxQcm9ncmVzcyIsInNjcm9sbGVkIiwiYm9keSIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInB1YmxpY0ludGVyZmFjZSIsImluaXRpYWxpemUiLCJhZGRFdmVudExpc3RlbmVyIiwib2Zmc2V0VG9wIiwidW5kZWZpbmVkIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwib2Zmc2V0Qm90dG9tIiwic2Nyb2xsZXIiXSwic291cmNlUm9vdCI6IiJ9